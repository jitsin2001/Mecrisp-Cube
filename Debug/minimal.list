
minimal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000871c  08000140  08000140  00010140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  0800885c  0800885c  0001885c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08008938  08008938  00018938  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08008940  08008940  00018940  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08008944  08008944  00018944  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000004  08008948  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000388  20000010  08008954  00020010  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000398  08008954  00020398  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 10 .debug_info   00014812  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002b85  00000000  00000000  00034852  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00001928  00000000  00000000  000373d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000017f0  00000000  00000000  00038d00  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  00022b96  00000000  00000000  0003a4f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0001190f  00000000  00000000  0005d086  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000dd284  00000000  00000000  0006e995  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007b  00000000  00000000  0014bc19  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000696c  00000000  00000000  0014bc94  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000010 	.word	0x20000010
 800015c:	00000000 	.word	0x00000000
 8000160:	08008844 	.word	0x08008844

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000014 	.word	0x20000014
 800017c:	08008844 	.word	0x08008844

08000180 <CoreDictionaryAnfang>:
 8000180:	080001a6 	.word	0x080001a6
 8000184:	2d1fffff 	.word	0x2d1fffff
 8000188:	4d202d2d 	.word	0x4d202d2d
 800018c:	69726365 	.word	0x69726365
 8000190:	532d7073 	.word	0x532d7073
 8000194:	6c6c6574 	.word	0x6c6c6574
 8000198:	73697261 	.word	0x73697261
 800019c:	352e3220 	.word	0x352e3220
 80001a0:	2d20322e 	.word	0x2d20322e
 80001a4:	2d2d      	.short	0x2d2d

080001a6 <Code_20>:
 80001a6:	01be      	.short	0x01be
 80001a8:	00420800 	.word	0x00420800
 80001ac:	75643204 	.word	0x75643204
 80001b0:	70          	.byte	0x70
	...

080001b2 <Code_21>:
@------------------------------------------------------------------------------

@ -----------------------------------------------------------------------------
  Wortbirne Flag_foldable_2, "2dup" @ ( 2 1 -- 2 1 2 1 )
@ -----------------------------------------------------------------------------
  ldr r0, [psp]
 80001b2:	6838      	ldr	r0, [r7, #0]
  pushdatos
 80001b4:	f847 6d04 	str.w	r6, [r7, #-4]!
  subs psp, #4
 80001b8:	3f04      	subs	r7, #4
  str r0, [psp]
 80001ba:	6038      	str	r0, [r7, #0]
  bx lr
 80001bc:	4770      	bx	lr

080001be <Dictionary_23>:
 80001be:	01d0      	.short	0x01d0
 80001c0:	00620800 	.word	0x00620800
 80001c4:	72643205 	.word	0x72643205
 80001c8:	706f      	.short	0x706f

080001ca <Code_23>:

@ -----------------------------------------------------------------------------
  Wortbirne Flag_foldable_2|Flag_inline, "2drop" @ ( 2 1 -- )
ddrop_vektor:
@ -----------------------------------------------------------------------------
  adds psp, #4
 80001ca:	3704      	adds	r7, #4
  drop
 80001cc:	cf40      	ldmia	r7!, {r6}
  bx lr
 80001ce:	4770      	bx	lr

080001d0 <Dictionary_25>:
 80001d0:	080001ee 	.word	0x080001ee
 80001d4:	32050044 	.word	0x32050044
 80001d8:	70617773 	.word	0x70617773

080001dc <Code_25>:

@ -----------------------------------------------------------------------------
  Wortbirne Flag_foldable_4, "2swap" @ ( 4 3 2 1 -- 2 1 4 3 )
dswap:
@ -----------------------------------------------------------------------------
  ldm psp!, {r0, r1, r2}
 80001dc:	cf07      	ldmia	r7!, {r0, r1, r2}
  subs psp, #4
 80001de:	3f04      	subs	r7, #4
  str r0, [psp]
 80001e0:	6038      	str	r0, [r7, #0]
  pushdatos
 80001e2:	f847 6d04 	str.w	r6, [r7, #-4]!
  subs psp, #4
 80001e6:	3f04      	subs	r7, #4
  str r2, [psp]
 80001e8:	603a      	str	r2, [r7, #0]
  movs tos, r1
 80001ea:	000e      	movs	r6, r1
  bx lr
 80001ec:	4770      	bx	lr

080001ee <Dictionary_27>:
 80001ee:	0202      	.short	0x0202
 80001f0:	00620800 	.word	0x00620800
 80001f4:	696e3204 	.word	0x696e3204
 80001f8:	70          	.byte	0x70
	...

080001fa <Code_27>:

@ -----------------------------------------------------------------------------
  Wortbirne Flag_foldable_2|Flag_inline, "2nip" @ ( 4 3 2 1 -- 2 1 )
dnip:
@ -----------------------------------------------------------------------------
  ldm psp!, {r0, r1, r2}
 80001fa:	cf07      	ldmia	r7!, {r0, r1, r2}
  subs psp, #4
 80001fc:	3f04      	subs	r7, #4
  str r0, [psp]
 80001fe:	6038      	str	r0, [r7, #0]
  bx lr
 8000200:	4770      	bx	lr

08000202 <Dictionary_28>:
 8000202:	021c      	.short	0x021c
 8000204:	00440800 	.word	0x00440800
 8000208:	766f3205 	.word	0x766f3205
 800020c:	7265      	.short	0x7265

0800020e <Code_28>:

@ -----------------------------------------------------------------------------
  Wortbirne Flag_foldable_4, "2over" @ ( 4 3 2 1 -- 4 3 2 1 4 3 )
@ -----------------------------------------------------------------------------
  ldr r0, [psp, #8]
 800020e:	68b8      	ldr	r0, [r7, #8]
  pushdatos
 8000210:	f847 6d04 	str.w	r6, [r7, #-4]!
  subs psp, #4
 8000214:	3f04      	subs	r7, #4
  str r0, [psp]
 8000216:	6038      	str	r0, [r7, #0]
  ldr tos, [psp, #12]
 8000218:	68fe      	ldr	r6, [r7, #12]
  bx lr
 800021a:	4770      	bx	lr

0800021c <Dictionary_30>:
 800021c:	08000240 	.word	0x08000240
 8000220:	32050044 	.word	0x32050044
 8000224:	6b637574 	.word	0x6b637574

08000228 <Code_30>:

@ -----------------------------------------------------------------------------
  Wortbirne Flag_foldable_4, "2tuck" @ ( 4 3 2 1 -- 2 1 4 3 2 1 )
@ -----------------------------------------------------------------------------
  ldm psp!, {r0, r1, r2} @ w=2 x=3 y=4
 8000228:	cf07      	ldmia	r7!, {r0, r1, r2}
  subs psp, #4
 800022a:	3f04      	subs	r7, #4
  str r0, [psp]
 800022c:	6038      	str	r0, [r7, #0]
  pushdatos
 800022e:	f847 6d04 	str.w	r6, [r7, #-4]!
  subs psp, #4
 8000232:	3f04      	subs	r7, #4
  str r2, [psp]
 8000234:	603a      	str	r2, [r7, #0]
  subs psp, #4
 8000236:	3f04      	subs	r7, #4
  str r1, [psp]
 8000238:	6039      	str	r1, [r7, #0]
  subs psp, #4
 800023a:	3f04      	subs	r7, #4
  str r0, [psp]
 800023c:	6038      	str	r0, [r7, #0]
  bx lr
 800023e:	4770      	bx	lr

08000240 <Dictionary_32>:
 8000240:	08000262 	.word	0x08000262
 8000244:	32040046 	.word	0x32040046
 8000248:	6f72      	.short	0x6f72
 800024a:	74          	.byte	0x74
	...

0800024c <Code_32>:

@ -----------------------------------------------------------------------------
  Wortbirne Flag_foldable_6, "2rot" @ ( 6  5 4 3 2 1  -- 4  3 2 1 6 5 ) ( x w y -- w y x )
                                    @  16 12 8 4 0 tos  16 12 8 4 0 tos
@ -----------------------------------------------------------------------------
  ldr r0, [psp]
 800024c:	6838      	ldr	r0, [r7, #0]
  ldr r1, [psp, #8]
 800024e:	68b9      	ldr	r1, [r7, #8]
  ldr r2, [psp, #16]
 8000250:	693a      	ldr	r2, [r7, #16]

  str r0, [psp, #8]
 8000252:	60b8      	str	r0, [r7, #8]
  str r1, [psp, #16]
 8000254:	6139      	str	r1, [r7, #16]
  str r2, [psp]
 8000256:	603a      	str	r2, [r7, #0]

  ldr r1, [psp, #4]
 8000258:	6879      	ldr	r1, [r7, #4]
  str tos, [psp, #4]
 800025a:	607e      	str	r6, [r7, #4]
  ldr tos, [psp, #12]
 800025c:	68fe      	ldr	r6, [r7, #12]
  str r1, [psp, #12]
 800025e:	60f9      	str	r1, [r7, #12]

  bx lr
 8000260:	4770      	bx	lr

08000262 <Dictionary_33>:
 8000262:	0284      	.short	0x0284
 8000264:	00460800 	.word	0x00460800
 8000268:	722d3205 	.word	0x722d3205
 800026c:	746f      	.short	0x746f

0800026e <Code_33>:

@ -----------------------------------------------------------------------------
  Wortbirne Flag_foldable_6, "2-rot" @ ( 6  5 4 3 2 1 --  2  1 6 5 4 3 ( x w y -- y x w )
                                     @  16 12 8 4 0 tos  16 12 8 4 0 tos
@ -----------------------------------------------------------------------------
  ldr r0, [psp]
 800026e:	6838      	ldr	r0, [r7, #0]
  ldr r1, [psp, #8]
 8000270:	68b9      	ldr	r1, [r7, #8]
  ldr r2, [psp, #16]
 8000272:	693a      	ldr	r2, [r7, #16]

  str r0, [psp, #16]
 8000274:	6138      	str	r0, [r7, #16]
  str r1, [psp]
 8000276:	6039      	str	r1, [r7, #0]
  str r2, [psp, #8]
 8000278:	60ba      	str	r2, [r7, #8]

  ldr r1, [psp, #12]
 800027a:	68f9      	ldr	r1, [r7, #12]
  str tos, [psp, #12]
 800027c:	60fe      	str	r6, [r7, #12]
  ldr tos, [psp, #4]
 800027e:	687e      	ldr	r6, [r7, #4]
  str r1, [psp, #4]
 8000280:	6079      	str	r1, [r7, #4]

  bx lr
 8000282:	4770      	bx	lr

08000284 <Dictionary_34>:
 8000284:	08000298 	.word	0x08000298
 8000288:	32030020 	.word	0x32030020
 800028c:	723e      	.short	0x723e

0800028e <Code_34>:

@------------------------------------------------------------------------------
  Wortbirne Flag_inline, "2>r" @ Puts the two top elements of stack on returnstack.
                               @ Equal to swap >r >r
@------------------------------------------------------------------------------
  ldm psp!, {r0}
 800028e:	cf01      	ldmia	r7!, {r0}
  push {r0}
 8000290:	b401      	push	{r0}
  push {tos}
 8000292:	b440      	push	{r6}
  ldm psp!, {tos}
 8000294:	cf40      	ldmia	r7!, {r6}
  bx lr
 8000296:	4770      	bx	lr

08000298 <Dictionary_35>:
 8000298:	080002b0 	.word	0x080002b0
 800029c:	32030020 	.word	0x32030020
 80002a0:	3e72      	.short	0x3e72

080002a2 <Code_35>:

@------------------------------------------------------------------------------
  Wortbirne Flag_inline, "2r>" @ Fetches back two elements of returnstack.
                               @ Equal to r> r> swap
@------------------------------------------------------------------------------
  pushdatos
 80002a2:	f847 6d04 	str.w	r6, [r7, #-4]!
  pop {tos}
 80002a6:	bc40      	pop	{r6}
  pop {r0}
 80002a8:	bc01      	pop	{r0}
  subs psp, #4
 80002aa:	3f04      	subs	r7, #4
  str r0, [psp]
 80002ac:	6038      	str	r0, [r7, #0]
  bx lr
 80002ae:	4770      	bx	lr

080002b0 <Dictionary_37>:
 80002b0:	080002c8 	.word	0x080002c8
 80002b4:	32030020 	.word	0x32030020
 80002b8:	4072      	.short	0x4072

080002ba <Code_37>:

@------------------------------------------------------------------------------
  Wortbirne Flag_inline, "2r@" @ Copies the two top elements of returnsteack
@------------------------------------------------------------------------------
  pushdatos
 80002ba:	f847 6d04 	str.w	r6, [r7, #-4]!
  ldr tos, [sp, #4]
 80002be:	9e01      	ldr	r6, [sp, #4]
  pushdatos
 80002c0:	f847 6d04 	str.w	r6, [r7, #-4]!
  ldr tos, [sp]
 80002c4:	9e00      	ldr	r6, [sp, #0]
  bx lr
 80002c6:	4770      	bx	lr

080002c8 <Dictionary_40>:
 80002c8:	080002da 	.word	0x080002da
 80002cc:	32060020 	.word	0x32060020
 80002d0:	6f726472 	.word	0x6f726472
 80002d4:	70          	.byte	0x70
	...

080002d6 <Code_40>:

@------------------------------------------------------------------------------
  Wortbirne Flag_visible|Flag_inline, "2rdrop" @ Entfernt die obersten beiden Element des Returnstacks
@------------------------------------------------------------------------------
  add sp, #8
 80002d6:	b002      	add	sp, #8
  bx lr
 80002d8:	4770      	bx	lr

080002da <Dictionary_41>:
 80002da:	02f2      	.short	0x02f2
 80002dc:	00420800 	.word	0x00420800
 80002e0:	2f326403 	.word	0x2f326403

080002e4 <Code_41>:
@------------------------------------------------------------------------------

@------------------------------------------------------------------------------
  Wortbirne Flag_visible|Flag_foldable_2, "d2/"
@------------------------------------------------------------------------------
  ldr r0, [psp]
 80002e4:	6838      	ldr	r0, [r7, #0]
  lsls r1, tos, #31 @ Prepare Carry
 80002e6:	07f1      	lsls	r1, r6, #31
  asrs tos, #1     @ Shift signed high part right
 80002e8:	1076      	asrs	r6, r6, #1
  lsrs r0, #1       @ Shift low part
 80002ea:	0840      	lsrs	r0, r0, #1
  orrs r0, r1
 80002ec:	4308      	orrs	r0, r1
  str r0, [psp]
 80002ee:	6038      	str	r0, [r7, #0]
  bx lr
 80002f0:	4770      	bx	lr

080002f2 <Dictionary_42>:
 80002f2:	0306      	.short	0x0306
 80002f4:	00620800 	.word	0x00620800
 80002f8:	2a326403 	.word	0x2a326403

080002fc <Code_42>:

@------------------------------------------------------------------------------
  Wortbirne Flag_inline|Flag_foldable_2, "d2*"
@------------------------------------------------------------------------------
  ldr r0, [psp]
 80002fc:	6838      	ldr	r0, [r7, #0]
  adds r0, r0
 80002fe:	1800      	adds	r0, r0, r0
  adcs tos, tos
 8000300:	4176      	adcs	r6, r6
  str r0, [psp]
 8000302:	6038      	str	r0, [r7, #0]
  bx lr
 8000304:	4770      	bx	lr

08000306 <Dictionary_43>:
 8000306:	0320      	.short	0x0320
 8000308:	00420800 	.word	0x00420800
 800030c:	68736404 	.word	0x68736404
 8000310:	72          	.byte	0x72
	...

08000312 <Code_43>:

@------------------------------------------------------------------------------
  Wortbirne Flag_visible|Flag_foldable_2, "dshr"
@------------------------------------------------------------------------------
  ldr r0, [psp]
 8000312:	6838      	ldr	r0, [r7, #0]
  lsls r1, tos, #31 @ Prepare Carry
 8000314:	07f1      	lsls	r1, r6, #31
  lsrs tos, #1     @ Shift unsigned high part right
 8000316:	0876      	lsrs	r6, r6, #1
  lsrs r0, #1       @ Shift low part
 8000318:	0840      	lsrs	r0, r0, #1
  orrs r0, r1
 800031a:	4308      	orrs	r0, r1
  str r0, [psp]
 800031c:	6038      	str	r0, [r7, #0]
  bx lr
 800031e:	4770      	bx	lr

08000320 <Dictionary_44>:
 8000320:	08000336 	.word	0x08000336
 8000324:	64040062 	.word	0x64040062
 8000328:	6873      	.short	0x6873
 800032a:	6c          	.byte	0x6c
	...

0800032c <Code_44>:

@------------------------------------------------------------------------------
  Wortbirne Flag_inline|Flag_foldable_2, "dshl"
@------------------------------------------------------------------------------
  ldr r0, [psp]
 800032c:	6838      	ldr	r0, [r7, #0]
  adds r0, r0
 800032e:	1800      	adds	r0, r0, r0
  adcs tos, tos
 8000330:	4176      	adcs	r6, r6
  str r0, [psp]
 8000332:	6038      	str	r0, [r7, #0]
  bx lr
 8000334:	4770      	bx	lr

08000336 <Dictionary_45>:
 8000336:	0348      	.short	0x0348
 8000338:	00420800 	.word	0x00420800
 800033c:	62616404 	.word	0x62616404
 8000340:	73          	.byte	0x73
	...

08000342 <Code_45>:

@------------------------------------------------------------------------------
  Wortbirne Flag_visible|Flag_foldable_2, "dabs"
@------------------------------------------------------------------------------
dabs:
  cmp tos, #0   @ Check sign in high-part
 8000342:	2e00      	cmp	r6, #0
  bmi.n dnegate @ Not negative ? Nothing to do !
 8000344:	d407      	bmi.n	8000356 <Code_46>
  bx lr
 8000346:	4770      	bx	lr

08000348 <Dictionary_46>:
 8000348:	08000366 	.word	0x08000366
 800034c:	64070042 	.word	0x64070042
 8000350:	6167656e 	.word	0x6167656e
 8000354:	6574      	.short	0x6574

08000356 <Code_46>:

@------------------------------------------------------------------------------
  Wortbirne Flag_foldable_2, "dnegate"
@------------------------------------------------------------------------------
dnegate:
  ldr r0, [psp]
 8000356:	6838      	ldr	r0, [r7, #0]
  movs r1, #0
 8000358:	2100      	movs	r1, #0
  mvns r0, r0
 800035a:	43c0      	mvns	r0, r0
  mvns tos, tos
 800035c:	43f6      	mvns	r6, r6
  adds r0, #1
 800035e:	3001      	adds	r0, #1
  adcs tos, r1
 8000360:	414e      	adcs	r6, r1
  str r0, [psp]
 8000362:	6038      	str	r0, [r7, #0]
  bx lr
 8000364:	4770      	bx	lr

08000366 <Dictionary_47>:
 8000366:	037e      	.short	0x037e
 8000368:	00640800 	.word	0x00640800
 800036c:	6402      	.short	0x6402
 800036e:	2d          	.byte	0x2d
	...

08000370 <Code_47>:

@------------------------------------------------------------------------------
  Wortbirne Flag_inline|Flag_foldable_4, "d-" @ ( 1L 1H 2L 2H )
@------------------------------------------------------------------------------
  ldm psp!, {r0, r1, r2}
 8000370:	cf07      	ldmia	r7!, {r0, r1, r2}
  subs r2, r0     @  Low-part first
 8000372:	1a12      	subs	r2, r2, r0
  sbcs r1, tos   @ High-part with carry
 8000374:	41b1      	sbcs	r1, r6
  movs tos, r1
 8000376:	000e      	movs	r6, r1

  subs psp, #4
 8000378:	3f04      	subs	r7, #4
  str r2, [psp]
 800037a:	603a      	str	r2, [r7, #0]
  bx lr
 800037c:	4770      	bx	lr

0800037e <Dictionary_48>:
 800037e:	0394      	.short	0x0394
 8000380:	00640800 	.word	0x00640800
 8000384:	6402      	.short	0x6402
 8000386:	2b          	.byte	0x2b
	...

08000388 <Code_48>:

@------------------------------------------------------------------------------
  Wortbirne Flag_inline|Flag_foldable_4, "d+" @ ( 1L 1H 2L 2H )
@------------------------------------------------------------------------------
  ldm psp!, {r0, r1, r2}
 8000388:	cf07      	ldmia	r7!, {r0, r1, r2}
  adds r2, r0
 800038a:	1812      	adds	r2, r2, r0
  adcs tos, r1
 800038c:	414e      	adcs	r6, r1
  subs psp, #4
 800038e:	3f04      	subs	r7, #4
  str r2, [psp]
 8000390:	603a      	str	r2, [r7, #0]
  bx lr
 8000392:	4770      	bx	lr

08000394 <Dictionary_49>:
 8000394:	080003a6 	.word	0x080003a6
 8000398:	73030061 	.word	0x73030061
 800039c:	643e      	.short	0x643e

0800039e <Code_49>:

@------------------------------------------------------------------------------
  Wortbirne Flag_inline|Flag_foldable_1, "s>d" @ ( n - dl dh ) Single --> Double conversion
@------------------------------------------------------------------------------
  pushdatos
 800039e:	f847 6d04 	str.w	r6, [r7, #-4]!
  movs tos, tos, asr #31    @ Turn MSB into 0xffffffff or 0x00000000
 80003a2:	17f6      	asrs	r6, r6, #31
  bx lr
 80003a4:	4770      	bx	lr

080003a6 <Dictionary_51>:
 80003a6:	03ba      	.short	0x03ba
 80003a8:	00620800 	.word	0x00620800
 80003ac:	2a6d7503 	.word	0x2a6d7503

080003b0 <Code_51>:
  @ Multiply unsigned 32*32 = 64
  @ ( u u -- ud )
um_star:
@------------------------------------------------------------------------------

    ldr r0, [psp]
 80003b0:	6838      	ldr	r0, [r7, #0]
    umull r0, tos, r0, tos @ Unsigned long multiply 32*32=64
 80003b2:	fba0 0606 	umull	r0, r6, r0, r6
    str r0, [psp]
 80003b6:	6038      	str	r0, [r7, #0]
    bx lr
 80003b8:	4770      	bx	lr

080003ba <Dictionary_52>:
 80003ba:	03ce      	.short	0x03ce
 80003bc:	00620800 	.word	0x00620800
 80003c0:	6d02      	.short	0x6d02
 80003c2:	2a          	.byte	0x2a
	...

080003c4 <Code_52>:
  @ Multiply signed 32*32 = 64
  @ ( n n -- d )
m_star:
@------------------------------------------------------------------------------

    ldr r0, [psp]
 80003c4:	6838      	ldr	r0, [r7, #0]
    smull r0, tos, r0, tos @ Signed long multiply 32*32=64
 80003c6:	fb80 0606 	smull	r0, r6, r0, r6
    str r0, [psp]
 80003ca:	6038      	str	r0, [r7, #0]
    bx lr
 80003cc:	4770      	bx	lr

080003ce <Dictionary_53>:
 80003ce:	040c      	.short	0x040c
 80003d0:	00440800 	.word	0x00440800
 80003d4:	2a647503 	.word	0x2a647503

080003d8 <Code_53>:
  @          tos w      x y

@ r1:r0  r3:r2 -->  r1:r0
@ tos r0 r1 r2 -->  tos r0

        ldm psp!, {r0, r1, r2}
 80003d8:	cf07      	ldmia	r7!, {r0, r1, r2}

080003da <ud_star_registers>:

ud_star_registers:

	muls	tos, r2        @ High-1 * Low-2 --> tos
 80003da:	4356      	muls	r6, r2
	muls	r1, r0         @ High-2 * Low-1 --> r1
 80003dc:	4341      	muls	r1, r0
	adds	tos, r1        @                    Sum into tos
 80003de:	1876      	adds	r6, r6, r1

080003e0 <ud_star_late_entry>:

ud_star_late_entry:

	lsrs	r1, r0, #16
 80003e0:	0c01      	lsrs	r1, r0, #16
	lsrs	r3, r2, #16
 80003e2:	0c13      	lsrs	r3, r2, #16
	muls	r1, r3
 80003e4:	4359      	muls	r1, r3
	adds	tos, r1
 80003e6:	1876      	adds	r6, r6, r1

	lsrs	r1, r0, #16
 80003e8:	0c01      	lsrs	r1, r0, #16
	uxth	r0, r0
 80003ea:	b280      	uxth	r0, r0
	uxth	r2, r2
 80003ec:	b292      	uxth	r2, r2
	muls	r1, r2
 80003ee:	4351      	muls	r1, r2
	muls	r3, r0
 80003f0:	4343      	muls	r3, r0
	muls	r0, r2
 80003f2:	4350      	muls	r0, r2

	movs	r2, #0
 80003f4:	2200      	movs	r2, #0
	adds	r1, r3
 80003f6:	18c9      	adds	r1, r1, r3
	adcs	r2, r2
 80003f8:	4152      	adcs	r2, r2
	lsls	r2, #16
 80003fa:	0412      	lsls	r2, r2, #16
	adds	tos, r2
 80003fc:	18b6      	adds	r6, r6, r2

	lsls	r2, r1, #16
 80003fe:	040a      	lsls	r2, r1, #16
	lsrs	r1, #16
 8000400:	0c09      	lsrs	r1, r1, #16
	adds	r0, r2
 8000402:	1880      	adds	r0, r0, r2
	adcs	tos, r1
 8000404:	414e      	adcs	r6, r1

        subs psp, #4
 8000406:	3f04      	subs	r7, #4
        str r0, [psp]
 8000408:	6038      	str	r0, [r7, #0]

        bx lr
 800040a:	4770      	bx	lr

0800040c <Dictionary_54>:
 800040c:	0800049e 	.word	0x0800049e
 8000410:	75040044 	.word	0x75040044
 8000414:	6d64      	.short	0x6d64
 8000416:	2a          	.byte	0x2a
	...

08000418 <Code_54>:
  @ Auf dem Datenstack: ( 1L 1H 2L 2H -- LL  L  H HH )
  @                       12  8  4  0 nach pushdatos
  @                        d  c  b  a    r0 r1 r2 r3
  @ Benötige einen langen Ergebnisregister !

  push {r4, lr}
 8000418:	b510      	push	{r4, lr}
  movs r4, #0 @ For Carry addition
 800041a:	2400      	movs	r4, #0

  @ ( d c b a )
  pushdatos
 800041c:	f847 6d04 	str.w	r6, [r7, #-4]!
  ldr tos, [psp, #4]    @ b
 8000420:	687e      	ldr	r6, [r7, #4]
  pushdatos
 8000422:	f847 6d04 	str.w	r6, [r7, #-4]!
  ldr tos, [psp, #12+4] @ d
 8000426:	693e      	ldr	r6, [r7, #16]
  bl um_star
 8000428:	f7ff ffc2 	bl	80003b0 <Code_51>
  @ ( d c b a  b*d-Low b*d-High )
  popda r1 @ b*d-High
 800042c:	0031      	movs	r1, r6
 800042e:	cf40      	ldmia	r7!, {r6}
  popda r0 @ b*d-Low, finished value
 8000430:	0030      	movs	r0, r6
 8000432:	cf40      	ldmia	r7!, {r6}

  @ ( d c b a )

  pushdatos
 8000434:	f847 6d04 	str.w	r6, [r7, #-4]!
  ldr tos, [psp, #0]   @ a
 8000438:	683e      	ldr	r6, [r7, #0]
  pushdatos
 800043a:	f847 6d04 	str.w	r6, [r7, #-4]!
  ldr tos, [psp, #8+4] @ c
 800043e:	68fe      	ldr	r6, [r7, #12]
  push {r0, r1}
 8000440:	b403      	push	{r0, r1}
    bl um_star
 8000442:	f7ff ffb5 	bl	80003b0 <Code_51>
  pop {r0, r1}
 8000446:	bc03      	pop	{r0, r1}
  @ ( d c b a  a*c-Low a*c-High )
  popda r3 @ a*c-High
 8000448:	0033      	movs	r3, r6
 800044a:	cf40      	ldmia	r7!, {r6}
  popda r2 @ a*c-Low
 800044c:	0032      	movs	r2, r6
 800044e:	cf40      	ldmia	r7!, {r6}

  @ ( d c b a )

  pushdatos
 8000450:	f847 6d04 	str.w	r6, [r7, #-4]!
  ldr tos, [psp, #0]    @ a
 8000454:	683e      	ldr	r6, [r7, #0]
  pushdatos
 8000456:	f847 6d04 	str.w	r6, [r7, #-4]!
  ldr tos, [psp, #12+4] @ d
 800045a:	693e      	ldr	r6, [r7, #16]

  push {r0, r1, r2, r3}
 800045c:	b40f      	push	{r0, r1, r2, r3}
    bl um_star
 800045e:	f7ff ffa7 	bl	80003b0 <Code_51>
  pop {r0, r1, r2, r3}
 8000462:	bc0f      	pop	{r0, r1, r2, r3}
  @ ( d c b a  a*d-Low a*d-High )

  adds r2, tos @ a*c-Low + a*d-High
 8000464:	1992      	adds	r2, r2, r6
  adcs r3, r4  @ Carry
 8000466:	4163      	adcs	r3, r4
  drop
 8000468:	cf40      	ldmia	r7!, {r6}

  adds r1, tos @ a*d-Low + b*d-High
 800046a:	1989      	adds	r1, r1, r6
  adcs r2, r4  @ Carry
 800046c:	4162      	adcs	r2, r4
  adcs r3, r4  @ Carry
 800046e:	4163      	adcs	r3, r4
  drop
 8000470:	cf40      	ldmia	r7!, {r6}

  @ ( d c b a )

  pushdatos
 8000472:	f847 6d04 	str.w	r6, [r7, #-4]!
  ldr tos, [psp, #4]    @ b
 8000476:	687e      	ldr	r6, [r7, #4]
  pushdatos
 8000478:	f847 6d04 	str.w	r6, [r7, #-4]!
  ldr tos, [psp, #8+4]  @ c
 800047c:	68fe      	ldr	r6, [r7, #12]

  push {r0, r1, r2, r3}
 800047e:	b40f      	push	{r0, r1, r2, r3}
    bl um_star
 8000480:	f7ff ff96 	bl	80003b0 <Code_51>
  pop {r0, r1, r2, r3}
 8000484:	bc0f      	pop	{r0, r1, r2, r3}
  @ ( d c b a  b*c-Low b*c-High )

  adds r2, tos @ a*c-Low + b*c-High + a*d-High
 8000486:	1992      	adds	r2, r2, r6
  adcs r3, r4  @ Carry
 8000488:	4163      	adcs	r3, r4
  drop
 800048a:	cf40      	ldmia	r7!, {r6}

  adds r1, tos @ b*c-Low + a*d-Low + b*d-High
 800048c:	1989      	adds	r1, r1, r6
  adcs r2, r4  @ Carry
 800048e:	4162      	adcs	r2, r4
  adcs r3, r4  @ Carry
 8000490:	4163      	adcs	r3, r4
  drop
 8000492:	cf40      	ldmia	r7!, {r6}

  @ ( d c b tos: a )
  movs tos, r3
 8000494:	001e      	movs	r6, r3
  str r2, [psp, #0]
 8000496:	603a      	str	r2, [r7, #0]
  str r1, [psp, #4]
 8000498:	6079      	str	r1, [r7, #4]
  str r0, [psp, #8]
 800049a:	60b8      	str	r0, [r7, #8]

  pop {r4, pc}
 800049c:	bd10      	pop	{r4, pc}

0800049e <Dictionary_71>:
 800049e:	04c0      	.short	0x04c0
 80004a0:	00430800 	.word	0x00430800
 80004a4:	2a02      	.short	0x2a02
 80004a6:	2f          	.byte	0x2f
	...

080004a8 <Code_71>:

@------------------------------------------------------------------------------
  Wortbirne Flag_visible|Flag_foldable_3, "*/" @ Signed scalar
  @ ( u1 u2 u3 -- u1*u2/u3 ) With double length intermediate result
@------------------------------------------------------------------------------
  push {lr}
 80004a8:	b500      	push	{lr}
  to_r
 80004aa:	b440      	push	{r6}
 80004ac:	cf40      	ldmia	r7!, {r6}
  bl m_star
 80004ae:	f7ff ff89 	bl	80003c4 <Code_52>
  r_from
 80004b2:	f847 6d04 	str.w	r6, [r7, #-4]!
 80004b6:	bc40      	pop	{r6}
  bl m_slash_mod
 80004b8:	f000 f84c 	bl	8000554 <Code_94>
  nip
 80004bc:	3704      	adds	r7, #4
  pop {pc}
 80004be:	bd00      	pop	{pc}

080004c0 <Dictionary_76>:
 80004c0:	080004e2 	.word	0x080004e2
 80004c4:	2a050043 	.word	0x2a050043
 80004c8:	646f6d2f 	.word	0x646f6d2f

080004cc <Code_76>:

@------------------------------------------------------------------------------
  Wortbirne Flag_visible|Flag_foldable_3, "*/mod" @ Signed scalar
  @ ( u1 u2 u3 -- u1*u2/u3 ) With double length intermediate result
@------------------------------------------------------------------------------
  push {lr}
 80004cc:	b500      	push	{lr}
  to_r
 80004ce:	b440      	push	{r6}
 80004d0:	cf40      	ldmia	r7!, {r6}
  bl m_star
 80004d2:	f7ff ff77 	bl	80003c4 <Code_52>
  r_from
 80004d6:	f847 6d04 	str.w	r6, [r7, #-4]!
 80004da:	bc40      	pop	{r6}
  bl m_slash_mod
 80004dc:	f000 f83a 	bl	8000554 <Code_94>
  pop {pc}
 80004e0:	bd00      	pop	{pc}

080004e2 <Dictionary_80>:
 80004e2:	0504      	.short	0x0504
 80004e4:	00430800 	.word	0x00430800
 80004e8:	2f2a7503 	.word	0x2f2a7503

080004ec <Code_80>:
@ : u*/  ( u1 u2 u3 -- u1 * u2 / u3 )  >r um* r> um/mod nip 3-foldable ;
@------------------------------------------------------------------------------
  Wortbirne Flag_visible|Flag_foldable_3, "u*/" @ Unsigned scalar
  @ ( u1 u2 u3 -- u1*u2/u3 ) With double length intermediate result
@------------------------------------------------------------------------------
  push {lr}
 80004ec:	b500      	push	{lr}
  to_r
 80004ee:	b440      	push	{r6}
 80004f0:	cf40      	ldmia	r7!, {r6}
  bl um_star
 80004f2:	f7ff ff5d 	bl	80003b0 <Code_51>
  r_from
 80004f6:	f847 6d04 	str.w	r6, [r7, #-4]!
 80004fa:	bc40      	pop	{r6}
  bl um_slash_mod
 80004fc:	f000 f81b 	bl	8000536 <Code_89>
  nip
 8000500:	3704      	adds	r7, #4
  pop {pc}
 8000502:	bd00      	pop	{pc}

08000504 <Dictionary_85>:
 8000504:	08000528 	.word	0x08000528
 8000508:	75060043 	.word	0x75060043
 800050c:	6f6d2f2a 	.word	0x6f6d2f2a
 8000510:	64          	.byte	0x64
	...

08000512 <Code_85>:

@------------------------------------------------------------------------------
  Wortbirne Flag_visible|Flag_foldable_3, "u*/mod" @ Unsigned scalar
  @ ( u1 u2 u3 -- u1*u2/u3 ) With double length intermediate result
@------------------------------------------------------------------------------
  push {lr}
 8000512:	b500      	push	{lr}
  to_r
 8000514:	b440      	push	{r6}
 8000516:	cf40      	ldmia	r7!, {r6}
  bl um_star
 8000518:	f7ff ff4a 	bl	80003b0 <Code_51>
  r_from
 800051c:	f847 6d04 	str.w	r6, [r7, #-4]!
 8000520:	bc40      	pop	{r6}
  bl um_slash_mod
 8000522:	f000 f808 	bl	8000536 <Code_89>
  pop {pc}
 8000526:	bd00      	pop	{pc}

08000528 <Dictionary_89>:
 8000528:	08000548 	.word	0x08000548
 800052c:	75060043 	.word	0x75060043
 8000530:	6f6d2f6d 	.word	0x6f6d2f6d
 8000534:	64          	.byte	0x64
	...

08000536 <Code_89>:
@------------------------------------------------------------------------------
  Wortbirne Flag_visible|Flag_foldable_3, "um/mod"
um_slash_mod: @ ( ud u -- u u ) Dividend Divisor -- Rest Ergebnis
             @ 64/32 = 32 Rest 32
@------------------------------------------------------------------------------
  push {lr}
 8000536:	b500      	push	{lr}
  pushdaconst 0
 8000538:	f847 6d04 	str.w	r6, [r7, #-4]!
 800053c:	2600      	movs	r6, #0
  bl ud_slash_mod
 800053e:	f000 f819 	bl	8000574 <Code_98>
  drop
 8000542:	cf40      	ldmia	r7!, {r6}
  nip
 8000544:	3704      	adds	r7, #4
  pop {pc}
 8000546:	bd00      	pop	{pc}

08000548 <Dictionary_94>:
 8000548:	08000566 	.word	0x08000566
 800054c:	6d050043 	.word	0x6d050043
 8000550:	646f6d2f 	.word	0x646f6d2f

08000554 <Code_94>:
@------------------------------------------------------------------------------
  Wortbirne Flag_visible|Flag_foldable_3, "m/mod"
              @ Signed symmetric divide 64/32 = 32 remainder 32
m_slash_mod:  @ ( d n -- n n )
@------------------------------------------------------------------------------
  push {lr}
 8000554:	b500      	push	{lr}
  pushdatos                 @ s>d
 8000556:	f847 6d04 	str.w	r6, [r7, #-4]!
  movs tos, tos, asr #31    @ Turn MSB into 0xffffffff or 0x00000000
 800055a:	17f6      	asrs	r6, r6, #31
  bl d_slash_mod
 800055c:	f000 f832 	bl	80005c4 <Code_100>
  drop
 8000560:	cf40      	ldmia	r7!, {r6}
  nip
 8000562:	3704      	adds	r7, #4
  pop {pc}
 8000564:	bd00      	pop	{pc}

08000566 <Dictionary_98>:
 8000566:	05b8      	.short	0x05b8
 8000568:	00440800 	.word	0x00440800
 800056c:	2f647506 	.word	0x2f647506
 8000570:	6f6d      	.short	0x6f6d
 8000572:	64          	.byte	0x64
	...

08000574 <Code_98>:
         @ Unsigned divide 64/64 = 64 remainder 64
         @ ( ud1 ud2 -- ud ud)
         @ ( 1L 1H 2L tos: 2H -- Rem-L Rem-H Quot-L tos: Quot-H )
@------------------------------------------------------------------------------
ud_slash_mod:
   push {r4, r5}
 8000574:	b430      	push	{r4, r5}


   @ Shift-High Shift-Low Dividend-High Dividend-Low
   @         r3        r2            r1           r0

   movs r3, #0
 8000576:	2300      	movs	r3, #0
   movs r2, #0
 8000578:	2200      	movs	r2, #0
   ldr  r1, [psp, #4]
 800057a:	6879      	ldr	r1, [r7, #4]
   ldr  r0, [psp, #8]
 800057c:	68b8      	ldr	r0, [r7, #8]

0800057e <ud_slash_mod_internal>:

   @ Divisor-High Divisor-Low
   @          r5           r4

ud_slash_mod_internal:
   movs r5, tos
 800057e:	0035      	movs	r5, r6
   ldr  r4, [psp, #0]
 8000580:	683c      	ldr	r4, [r7, #0]

   @ For this long division, we need 64 individual division steps.
   movs tos, #64
 8000582:	2640      	movs	r6, #64	; 0x40

3: division_step
 8000584:	0040      	lsls	r0, r0, #1
 8000586:	4149      	adcs	r1, r1
 8000588:	4152      	adcs	r2, r2
 800058a:	415b      	adcs	r3, r3
 800058c:	42ab      	cmp	r3, r5
 800058e:	d802      	bhi.n	8000596 <ud_slash_mod_internal+0x18>
 8000590:	d304      	bcc.n	800059c <ud_slash_mod_internal+0x1e>
 8000592:	42a2      	cmp	r2, r4
 8000594:	d302      	bcc.n	800059c <ud_slash_mod_internal+0x1e>
 8000596:	1b12      	subs	r2, r2, r4
 8000598:	41ab      	sbcs	r3, r5
 800059a:	3001      	adds	r0, #1
   subs tos, #1
 800059c:	3e01      	subs	r6, #1
   bne 3b
 800059e:	d1f1      	bne.n	8000584 <ud_slash_mod_internal+0x6>

   @ Now place all values to their destination.
   movs tos, r1       @ Result-High
 80005a0:	000e      	movs	r6, r1
   str  r0, [psp, #0] @ Result-Low
 80005a2:	6038      	str	r0, [r7, #0]
   str  r3, [psp, #4] @ Remainder-High
 80005a4:	607b      	str	r3, [r7, #4]
   str  r2, [psp, #8] @ Remainder-Low
 80005a6:	60ba      	str	r2, [r7, #8]

   pop {r4, r5}
 80005a8:	bc30      	pop	{r4, r5}
   bx lr
 80005aa:	4770      	bx	lr

080005ac <uf_slash_mod>:
@  Wortbirne Flag_visible|Flag_foldable_4, "uf/mod" @ Internal helper only.
uf_slash_mod: @ Divide 64/64 = 64 Remainder 64. Puts decimal point in the middle. Overflow possible.
         @ ( ud1 ud2 -- ud ud)
         @ ( 1L 1H 2L tos: 2H -- Rem-L Rem-H Quot-L tos: Quot-H )
@------------------------------------------------------------------------------
   push {r4, r5}
 80005ac:	b430      	push	{r4, r5}

   movs r3, #0
 80005ae:	2300      	movs	r3, #0
   ldr  r2, [psp, #4]
 80005b0:	687a      	ldr	r2, [r7, #4]
   ldr  r1, [psp, #8]
 80005b2:	68b9      	ldr	r1, [r7, #8]
   movs r0, #0
 80005b4:	2000      	movs	r0, #0

   b.n ud_slash_mod_internal
 80005b6:	e7e2      	b.n	800057e <ud_slash_mod_internal>

080005b8 <Dictionary_100>:
 80005b8:	0800062e 	.word	0x0800062e
 80005bc:	64050044 	.word	0x64050044
 80005c0:	646f6d2f 	.word	0x646f6d2f

080005c4 <Code_100>:
              @ Signed symmetric divide 64/64 = 64 remainder 64
              @ ( d1 d2 -- d d )
d_slash_mod:  @ ( 1L 1H 2L tos: 2H -- Rem-L Rem-H Quot-L tos: Quot-H )
@------------------------------------------------------------------------------
  @ Check Divisor
  push {lr}
 80005c4:	b500      	push	{lr}
  movs r0, tos, asr #31 @ Turn MSB into 0xffffffff or 0x00000000
 80005c6:	17f0      	asrs	r0, r6, #31
  beq 2f
 80005c8:	d019      	beq.n	80005fe <Code_100+0x3a>
    @ ? / -
    bl dnegate
 80005ca:	f7ff fec4 	bl	8000356 <Code_46>
    bl dswap
 80005ce:	f7ff fe05 	bl	80001dc <Code_25>
    movs r0, tos, asr #31 @ Turn MSB into 0xffffffff or 0x00000000
 80005d2:	17f0      	asrs	r0, r6, #31
    beq 1f
 80005d4:	d00c      	beq.n	80005f0 <Code_100+0x2c>
    @ - / -
    bl dnegate
 80005d6:	f7ff febe 	bl	8000356 <Code_46>
    bl dswap
 80005da:	f7ff fdff 	bl	80001dc <Code_25>
    bl ud_slash_mod
 80005de:	f7ff ffc9 	bl	8000574 <Code_98>

    bl dswap
 80005e2:	f7ff fdfb 	bl	80001dc <Code_25>
    bl dnegate @ Negative remainder
 80005e6:	f7ff feb6 	bl	8000356 <Code_46>
    bl dswap
 80005ea:	f7ff fdf7 	bl	80001dc <Code_25>
    pop {pc}
 80005ee:	bd00      	pop	{pc}

1:  @ + / -
    bl dswap
 80005f0:	f7ff fdf4 	bl	80001dc <Code_25>
    bl ud_slash_mod
 80005f4:	f7ff ffbe 	bl	8000574 <Code_98>
    bl dnegate  @ Negative result
 80005f8:	f7ff fead 	bl	8000356 <Code_46>
    pop {pc}
 80005fc:	bd00      	pop	{pc}

2:  @ ? / +
    bl dswap
 80005fe:	f7ff fded 	bl	80001dc <Code_25>
    movs r0, tos, asr #31 @ Turn MSB into 0xffffffff or 0x00000000
 8000602:	17f0      	asrs	r0, r6, #31
    beq 3f
 8000604:	d00e      	beq.n	8000624 <Code_100+0x60>
    @ - / +
    bl dnegate
 8000606:	f7ff fea6 	bl	8000356 <Code_46>
    bl dswap
 800060a:	f7ff fde7 	bl	80001dc <Code_25>

    bl ud_slash_mod
 800060e:	f7ff ffb1 	bl	8000574 <Code_98>

    bl dnegate @ Negative result
 8000612:	f7ff fea0 	bl	8000356 <Code_46>
    bl dswap
 8000616:	f7ff fde1 	bl	80001dc <Code_25>
    bl dnegate @ Negative remainder
 800061a:	f7ff fe9c 	bl	8000356 <Code_46>
    bl dswap
 800061e:	f7ff fddd 	bl	80001dc <Code_25>
    pop {pc}
 8000622:	bd00      	pop	{pc}

3:  @ + / +
    bl dswap
 8000624:	f7ff fdda 	bl	80001dc <Code_25>
    bl ud_slash_mod
 8000628:	f7ff ffa4 	bl	8000574 <Code_98>
    pop {pc}
 800062c:	bd00      	pop	{pc}

0800062e <Dictionary_101>:
 800062e:	0644      	.short	0x0644
 8000630:	00440800 	.word	0x00440800
 8000634:	6402      	.short	0x6402
 8000636:	2f          	.byte	0x2f
	...

08000638 <Code_101>:

@------------------------------------------------------------------------------
  Wortbirne Flag_visible|Flag_foldable_4, "d/"
@------------------------------------------------------------------------------
  push {lr}
 8000638:	b500      	push	{lr}
  bl d_slash_mod
 800063a:	f7ff ffc3 	bl	80005c4 <Code_100>
  bl dnip
 800063e:	f7ff fddc 	bl	80001fa <Code_27>
  pop {pc}
 8000642:	bd00      	pop	{pc}

08000644 <Dictionary_102>:
 8000644:	0800068c 	.word	0x0800068c
 8000648:	66020044 	.word	0x66020044
 800064c:	2a          	.byte	0x2a
	...

0800064e <Code_102>:
  Wortbirne Flag_visible|Flag_foldable_4, "f*"
f_star: @ Signed multiply s31.32
        @ ( fi fi -- fi )
        @ Overflow possible. Sign wrong in this case.
@------------------------------------------------------------------------------
  push {lr}
 800064e:	b500      	push	{lr}
  movs r0, tos, asr #31 @ Turn MSB into 0xffffffff or 0x00000000
 8000650:	17f0      	asrs	r0, r6, #31
  beq 1f
 8000652:	d00d      	beq.n	8000670 <Code_102+0x22>
  @ - * ?
    bl dnegate
 8000654:	f7ff fe7f 	bl	8000356 <Code_46>
    bl dswap
 8000658:	f7ff fdc0 	bl	80001dc <Code_25>
    movs r0, tos, asr #31 @ Turn MSB into 0xffffffff or 0x00000000
 800065c:	17f0      	asrs	r0, r6, #31
    beq 2f @ - * +
 800065e:	d00d      	beq.n	800067c <Code_102+0x2e>

    @ - * -
    bl dnegate
 8000660:	f7ff fe79 	bl	8000356 <Code_46>

3:  @ + * +, - * -
    bl udm_star
 8000664:	f7ff fed8 	bl	8000418 <Code_54>
    @ ( LL L H HH )
    drop
 8000668:	cf40      	ldmia	r7!, {r6}
    ldmia psp!, {r0}
 800066a:	cf01      	ldmia	r7!, {r0}
    str r0, [psp]
 800066c:	6038      	str	r0, [r7, #0]
    @ ( L H )
    pop {pc}
 800066e:	bd00      	pop	{pc}

1:@ + * ?
    bl dswap
 8000670:	f7ff fdb4 	bl	80001dc <Code_25>
    movs r0, tos, asr #31 @ Turn MSB into 0xffffffff or 0x00000000
 8000674:	17f0      	asrs	r0, r6, #31
    beq 3b @ + * +
 8000676:	d0f5      	beq.n	8000664 <Code_102+0x16>

    bl dnegate
 8000678:	f7ff fe6d 	bl	8000356 <Code_46>

    @ - * + or + * -
2:  bl udm_star
 800067c:	f7ff fecc 	bl	8000418 <Code_54>
    @ ( LL L H HH )
    drop
 8000680:	cf40      	ldmia	r7!, {r6}
    ldmia psp!, {r0}
 8000682:	cf01      	ldmia	r7!, {r0}
    str r0, [psp]
 8000684:	6038      	str	r0, [r7, #0]
    @ ( L H )
    bl dnegate
 8000686:	f7ff fe66 	bl	8000356 <Code_46>
  pop {pc}
 800068a:	bd00      	pop	{pc}

0800068c <Dictionary_105>:
 800068c:	080006d8 	.word	0x080006d8
 8000690:	66020044 	.word	0x66020044
 8000694:	2f          	.byte	0x2f
	...

08000696 <Code_105>:
@------------------------------------------------------------------------------
  Wortbirne Flag_visible|Flag_foldable_4, "f/"
  @ Signed divide for s31.32. Overflow possible. Sign wrong in this case.
@------------------------------------------------------------------------------
  @ Take care of sign ! ( 1L 1H 2L 2H - EL EH )
  push {lr}
 8000696:	b500      	push	{lr}
  movs r0, tos, asr #31 @ Turn MSB into 0xffffffff or 0x00000000
 8000698:	17f0      	asrs	r0, r6, #31
  beq 2f
 800069a:	d00e      	beq.n	80006ba <Code_105+0x24>
  @ ? / -
    bl dnegate
 800069c:	f7ff fe5b 	bl	8000356 <Code_46>
    bl dswap
 80006a0:	f7ff fd9c 	bl	80001dc <Code_25>
    movs r0, tos, asr #31 @ Turn MSB into 0xffffffff or 0x00000000
 80006a4:	17f0      	asrs	r0, r6, #31
    beq 3f @ + / -
 80006a6:	d00e      	beq.n	80006c6 <Code_105+0x30>

    @ - / -
    bl dnegate
 80006a8:	f7ff fe55 	bl	8000356 <Code_46>
1:  bl dswap @ - / - or + / +
 80006ac:	f7ff fd96 	bl	80001dc <Code_25>
    bl uf_slash_mod
 80006b0:	f7ff ff7c 	bl	80005ac <uf_slash_mod>
    bl dnip
 80006b4:	f7ff fda1 	bl	80001fa <Code_27>
    pop {pc}
 80006b8:	bd00      	pop	{pc}

2:@ ? / +
  bl dswap
 80006ba:	f7ff fd8f 	bl	80001dc <Code_25>
  movs r0, tos, asr #31 @ Turn MSB into 0xffffffff or 0x00000000
 80006be:	17f0      	asrs	r0, r6, #31
  beq 1b @ + / +
 80006c0:	d0f4      	beq.n	80006ac <Code_105+0x16>

  @ - / +
  bl dnegate
 80006c2:	f7ff fe48 	bl	8000356 <Code_46>
3:bl dswap @ - / + or + / -
 80006c6:	f7ff fd89 	bl	80001dc <Code_25>
  bl uf_slash_mod
 80006ca:	f7ff ff6f 	bl	80005ac <uf_slash_mod>
  bl dnegate
 80006ce:	f7ff fe42 	bl	8000356 <Code_46>
  bl dnip
 80006d2:	f7ff fd92 	bl	80001fa <Code_27>
  pop {pc}
 80006d6:	bd00      	pop	{pc}

080006d8 <Dictionary_106>:
 80006d8:	080006ec 	.word	0x080006ec
 80006dc:	32020020 	.word	0x32020020
 80006e0:	21          	.byte	0x21
	...

080006e2 <Code_106>:
@------------------------------------------------------------------------------

@------------------------------------------------------------------------------
  Wortbirne Flag_inline, "2!" @ Store ( d addr -- )
@------------------------------------------------------------------------------
  ldmia psp!, {r1, r2}
 80006e2:	cf06      	ldmia	r7!, {r1, r2}
  str r1, [tos]
 80006e4:	6031      	str	r1, [r6, #0]
  str r2, [tos, #4]
 80006e6:	6072      	str	r2, [r6, #4]
  drop
 80006e8:	cf40      	ldmia	r7!, {r6}
  bx lr
 80006ea:	4770      	bx	lr

080006ec <Dictionary_108>:
 80006ec:	08000700 	.word	0x08000700
 80006f0:	32020020 	.word	0x32020020
 80006f4:	40          	.byte	0x40
	...

080006f6 <Code_108>:

@------------------------------------------------------------------------------
  Wortbirne Flag_inline, "2@" @ Fetch ( addr -- d )
@------------------------------------------------------------------------------
  subs psp, #4
 80006f6:	3f04      	subs	r7, #4
  ldr r0, [tos, #4]
 80006f8:	6870      	ldr	r0, [r6, #4]
  str r0, [psp]
 80006fa:	6038      	str	r0, [r7, #0]
  ldr tos, [tos]
 80006fc:	6836      	ldr	r6, [r6, #0]
  bx lr
 80006fe:	4770      	bx	lr

08000700 <Dictionary_109>:
 8000700:	08000714 	.word	0x08000714
 8000704:	64030044 	.word	0x64030044
 8000708:	3c75      	.short	0x3c75

0800070a <Code_109>:
Wortbirne Flag_visible|Flag_foldable_4, "du<"
  @ ( 2L 2H 1L 1H -- Flag )
  @   r2 r1 r0 tos
@------------------------------------------------------------------------------

  ldm psp!, {r0, r1, r2}
 800070a:	cf07      	ldmia	r7!, {r0, r1, r2}
  subs r2, r0    @  Low-part first
 800070c:	1a12      	subs	r2, r2, r0
  sbcs r1, tos   @ High-part with carry
 800070e:	41b1      	sbcs	r1, r6

  sbcs tos, tos  @ Create carry flag on TOS
 8000710:	41b6      	sbcs	r6, r6
  bx lr
 8000712:	4770      	bx	lr

08000714 <Dictionary_110>:
 8000714:	08000728 	.word	0x08000728
 8000718:	64030044 	.word	0x64030044
 800071c:	3e75      	.short	0x3e75

0800071e <Code_110>:

@------------------------------------------------------------------------------
Wortbirne Flag_visible|Flag_foldable_4, "du>"  @ Just swapped the order of registers
@------------------------------------------------------------------------------

  ldm psp!, {r0, r1, r2}
 800071e:	cf07      	ldmia	r7!, {r0, r1, r2}
  subs r0, r2    @  Low-part first
 8000720:	1a80      	subs	r0, r0, r2
  sbcs tos, r1   @ High-part with carry
 8000722:	418e      	sbcs	r6, r1

  sbcs tos, tos  @ Create carry flag on TOS
 8000724:	41b6      	sbcs	r6, r6
  bx lr
 8000726:	4770      	bx	lr

08000728 <Dictionary_111>:
 8000728:	0800073e 	.word	0x0800073e
 800072c:	64020044 	.word	0x64020044
 8000730:	3c          	.byte	0x3c
	...

08000732 <Code_111>:

@------------------------------------------------------------------------------
Wortbirne Flag_visible|Flag_foldable_4, "d<"
@------------------------------------------------------------------------------

  ldm psp!, {r0, r1, r2}
 8000732:	cf07      	ldmia	r7!, {r0, r1, r2}
  subs r2, r0    @  Low-part first
 8000734:	1a12      	subs	r2, r2, r0
  sbcs r1, tos   @ High-part with carry
 8000736:	41b1      	sbcs	r1, r6

  blt 1f
 8000738:	db0c      	blt.n	8000754 <Code_112+0xc>
  movs tos, #0
 800073a:	2600      	movs	r6, #0
  bx lr
 800073c:	4770      	bx	lr

0800073e <Dictionary_112>:
 800073e:	075a      	.short	0x075a
 8000740:	00440800 	.word	0x00440800
 8000744:	6402      	.short	0x6402
 8000746:	3e          	.byte	0x3e
	...

08000748 <Code_112>:

@------------------------------------------------------------------------------
Wortbirne Flag_visible|Flag_foldable_4, "d>"  @ Just swapped the order of registers
@------------------------------------------------------------------------------

  ldm psp!, {r0, r1, r2}
 8000748:	cf07      	ldmia	r7!, {r0, r1, r2}
  subs r0, r2    @  Low-part first
 800074a:	1a80      	subs	r0, r0, r2
  sbcs tos, r1   @ High-part with carry
 800074c:	418e      	sbcs	r6, r1

  blt 1f
 800074e:	db01      	blt.n	8000754 <Code_112+0xc>
  movs tos, #0
 8000750:	2600      	movs	r6, #0
  bx lr
 8000752:	4770      	bx	lr

1:movs tos, #0   @ True
 8000754:	2600      	movs	r6, #0
  mvns tos, tos
 8000756:	43f6      	mvns	r6, r6
  bx lr
 8000758:	4770      	bx	lr

0800075a <Dictionary_113>:
 800075a:	076a      	.short	0x076a
 800075c:	00620800 	.word	0x00620800
 8000760:	3c306403 	.word	0x3c306403

08000764 <Code_113>:

@------------------------------------------------------------------------------
  Wortbirne Flag_inline|Flag_foldable_2, "d0<" @ ( 1L 1H -- Flag ) Is double number negative ?
@------------------------------------------------------------------------------
  adds psp, #4
 8000764:	3704      	adds	r7, #4
  movs TOS, TOS, asr #31    @ Turn MSB into 0xffffffff or 0x00000000
 8000766:	17f6      	asrs	r6, r6, #31
  bx lr
 8000768:	4770      	bx	lr

0800076a <Dictionary_114>:
 800076a:	077e      	.short	0x077e
 800076c:	00620800 	.word	0x00620800
 8000770:	3d306403 	.word	0x3d306403

08000774 <Code_114>:

@------------------------------------------------------------------------------
  Wortbirne Flag_foldable_2|Flag_inline, "d0=" @ ( 1L 1H -- Flag )
@------------------------------------------------------------------------------
  ldm psp!, {r0}
 8000774:	cf01      	ldmia	r7!, {r0}
  orrs tos, r0
 8000776:	4306      	orrs	r6, r0
  subs tos, #1
 8000778:	3e01      	subs	r6, #1
  sbcs tos, tos
 800077a:	41b6      	sbcs	r6, r6
  bx lr
 800077c:	4770      	bx	lr

0800077e <Dictionary_115>:
 800077e:	0798      	.short	0x0798
 8000780:	00440800 	.word	0x00440800
 8000784:	3e3c6403 	.word	0x3e3c6403

08000788 <Code_115>:

@------------------------------------------------------------------------------
  Wortbirne Flag_foldable_4, "d<>" @ ( 1L 1H 2L 2H -- Flag )
@------------------------------------------------------------------------------
  ldm psp!, {r0, r1, r2}
 8000788:	cf07      	ldmia	r7!, {r0, r1, r2}

  eors r0, r2
 800078a:	4050      	eors	r0, r2
  eors tos, r1
 800078c:	404e      	eors	r6, r1
  orrs tos, r0
 800078e:	4306      	orrs	r6, r0

  subs tos, #1
 8000790:	3e01      	subs	r6, #1
  sbcs tos, tos
 8000792:	41b6      	sbcs	r6, r6
  mvns tos, tos
 8000794:	43f6      	mvns	r6, r6

  bx lr
 8000796:	4770      	bx	lr

08000798 <Dictionary_116>:
 8000798:	080007b0 	.word	0x080007b0
 800079c:	64020044 	.word	0x64020044
 80007a0:	3d          	.byte	0x3d
	...

080007a2 <Code_116>:

@------------------------------------------------------------------------------
  Wortbirne Flag_foldable_4, "d=" @ ( 1L 1H 2L 2H -- Flag )
@------------------------------------------------------------------------------
  ldm psp!, {r0, r1, r2}
 80007a2:	cf07      	ldmia	r7!, {r0, r1, r2}

  eors r0, r2
 80007a4:	4050      	eors	r0, r2
  eors tos, r1
 80007a6:	404e      	eors	r6, r1
  orrs tos, r0
 80007a8:	4306      	orrs	r6, r0

  subs tos, #1
 80007aa:	3e01      	subs	r6, #1
  sbcs tos, tos
 80007ac:	41b6      	sbcs	r6, r6

  bx lr
 80007ae:	4770      	bx	lr

080007b0 <Dictionary_117>:
 80007b0:	080007c2 	.word	0x080007c2
 80007b4:	73030020 	.word	0x73030020
 80007b8:	4070      	.short	0x4070

080007ba <Code_117>:
@ Stack pointers

@ -----------------------------------------------------------------------------
  Wortbirne Flag_inline, "sp@" @ ( -- a-addr )
@ -----------------------------------------------------------------------------
  pushdatos
 80007ba:	f847 6d04 	str.w	r6, [r7, #-4]!
  movs tos, psp
 80007be:	003e      	movs	r6, r7
  bx lr
 80007c0:	4770      	bx	lr

080007c2 <Dictionary_119>:
 80007c2:	07d2      	.short	0x07d2
 80007c4:	00200800 	.word	0x00200800
 80007c8:	21707303 	.word	0x21707303

080007cc <Code_119>:

@ -----------------------------------------------------------------------------
  Wortbirne Flag_inline, "sp!" @ ( a-addr -- )
@ -----------------------------------------------------------------------------
  movs psp, tos
 80007cc:	0037      	movs	r7, r6
  ldm psp!, {tos}
 80007ce:	cf40      	ldmia	r7!, {r6}
  bx lr
 80007d0:	4770      	bx	lr

080007d2 <Dictionary_120>:
 80007d2:	07e4      	.short	0x07e4
 80007d4:	00200800 	.word	0x00200800
 80007d8:	40707203 	.word	0x40707203

080007dc <Code_120>:

@ -----------------------------------------------------------------------------
  Wortbirne Flag_inline, "rp@" @ ( -- a-addr )
@ -----------------------------------------------------------------------------
  pushdatos
 80007dc:	f847 6d04 	str.w	r6, [r7, #-4]!
  mov tos, sp
 80007e0:	466e      	mov	r6, sp
  bx lr
 80007e2:	4770      	bx	lr

080007e4 <Dictionary_122>:
 80007e4:	080007f4 	.word	0x080007f4
 80007e8:	72030020 	.word	0x72030020
 80007ec:	2170      	.short	0x2170

080007ee <Code_122>:

@ -----------------------------------------------------------------------------
  Wortbirne Flag_inline, "rp!" @ ( a-addr -- )
@ -----------------------------------------------------------------------------
  mov sp, tos
 80007ee:	46b5      	mov	sp, r6
  ldm psp!, {tos}
 80007f0:	cf40      	ldmia	r7!, {r6}
  bx lr
 80007f2:	4770      	bx	lr

080007f4 <Dictionary_123>:
 80007f4:	08000804 	.word	0x08000804
 80007f8:	64030061 	.word	0x64030061
 80007fc:	7075      	.short	0x7075

080007fe <Code_123>:
@ Stack juggling

@ -----------------------------------------------------------------------------
  Wortbirne Flag_foldable_1|Flag_inline, "dup" @ ( x -- x x )
@ -----------------------------------------------------------------------------
  dup
 80007fe:	f847 6d04 	str.w	r6, [r7, #-4]!
  bx lr
 8000802:	4770      	bx	lr

08000804 <Dictionary_126>:
 8000804:	08000814 	.word	0x08000814
 8000808:	64040061 	.word	0x64040061
 800080c:	6f72      	.short	0x6f72
 800080e:	70          	.byte	0x70
	...

08000810 <Code_126>:

@ -----------------------------------------------------------------------------
  Wortbirne Flag_foldable_1|Flag_inline, "drop" @ ( x -- )
@ -----------------------------------------------------------------------------
  drop
 8000810:	cf40      	ldmia	r7!, {r6}
  bx lr
 8000812:	4770      	bx	lr

08000814 <Dictionary_128>:
 8000814:	0800082a 	.word	0x0800082a
 8000818:	3f040061 	.word	0x3f040061
 800081c:	7564      	.short	0x7564
 800081e:	70          	.byte	0x70
	...

08000820 <Code_128>:

@ -----------------------------------------------------------------------------
  Wortbirne Flag_foldable_1|Flag_inline, "?dup" @ ( x -- 0 | x x )
@ -----------------------------------------------------------------------------
  cmp tos, #0
 8000820:	2e00      	cmp	r6, #0
  beq 1f
 8000822:	d001      	beq.n	8000828 <Code_128+0x8>
  pushdatos
 8000824:	f847 6d04 	str.w	r6, [r7, #-4]!
1:bx lr
 8000828:	4770      	bx	lr

0800082a <Dictionary_130>:
 800082a:	083e      	.short	0x083e
 800082c:	00620800 	.word	0x00620800
 8000830:	61777304 	.word	0x61777304
 8000834:	70          	.byte	0x70
	...

08000836 <Code_130>:

@ -----------------------------------------------------------------------------
  Wortbirne Flag_foldable_2|Flag_inline, "swap" @ ( x y -- y x )
@ -----------------------------------------------------------------------------
  ldr r1,  [psp]  @ Load X from the stack, no SP change.
 8000836:	6839      	ldr	r1, [r7, #0]
  str tos, [psp]  @ Replace it with TOS.
 8000838:	603e      	str	r6, [r7, #0]
  movs tos, r1    @ And vice versa.
 800083a:	000e      	movs	r6, r1
  bx lr
 800083c:	4770      	bx	lr

0800083e <Dictionary_131>:
 800083e:	084c      	.short	0x084c
 8000840:	00620800 	.word	0x00620800
 8000844:	70696e03 	.word	0x70696e03

08000848 <Code_131>:

@ -----------------------------------------------------------------------------
  Wortbirne Flag_foldable_2|Flag_inline, "nip" @ ( x y -- x )
@ -----------------------------------------------------------------------------
  nip
 8000848:	3704      	adds	r7, #4
  bx lr
 800084a:	4770      	bx	lr

0800084c <Dictionary_133>:
 800084c:	08000860 	.word	0x08000860
 8000850:	6f040062 	.word	0x6f040062
 8000854:	6576      	.short	0x6576
 8000856:	72          	.byte	0x72
	...

08000858 <Code_133>:

@ -----------------------------------------------------------------------------
  Wortbirne Flag_foldable_2|Flag_inline, "over" @ ( x y -- x y x )
@ -----------------------------------------------------------------------------
  pushdatos
 8000858:	f847 6d04 	str.w	r6, [r7, #-4]!
  ldr tos, [psp, #4]
 800085c:	687e      	ldr	r6, [r7, #4]
  bx lr
 800085e:	4770      	bx	lr

08000860 <Dictionary_135>:
 8000860:	08000876 	.word	0x08000876
 8000864:	74040062 	.word	0x74040062
 8000868:	6375      	.short	0x6375
 800086a:	6b          	.byte	0x6b
	...

0800086c <Code_135>:

@ -----------------------------------------------------------------------------
  Wortbirne Flag_foldable_2|Flag_inline, "tuck" @ ( x1 x2 -- x2 x1 x2 )
@ -----------------------------------------------------------------------------
tuck:
  ldm psp!, {r0}
 800086c:	cf01      	ldmia	r7!, {r0}
  subs psp, #8
 800086e:	3f08      	subs	r7, #8
  str tos, [psp, #4]
 8000870:	607e      	str	r6, [r7, #4]
  str r0, [psp]
 8000872:	6038      	str	r0, [r7, #0]
  bx lr
 8000874:	4770      	bx	lr

08000876 <Dictionary_136>:
 8000876:	088c      	.short	0x088c
 8000878:	00630800 	.word	0x00630800
 800087c:	746f7203 	.word	0x746f7203

08000880 <Code_136>:

@ -----------------------------------------------------------------------------
  Wortbirne Flag_foldable_3|Flag_inline, "rot" @ ( x w y -- w y x )
@ -----------------------------------------------------------------------------
rot:
  ldm psp!, {r0, r1}
 8000880:	cf03      	ldmia	r7!, {r0, r1}
  subs psp, #8
 8000882:	3f08      	subs	r7, #8
  str r0, [psp, #4]
 8000884:	6078      	str	r0, [r7, #4]
  str tos, [psp]
 8000886:	603e      	str	r6, [r7, #0]
  movs tos, r1
 8000888:	000e      	movs	r6, r1
  bx lr
 800088a:	4770      	bx	lr

0800088c <Dictionary_137>:
 800088c:	080008a4 	.word	0x080008a4
 8000890:	2d040063 	.word	0x2d040063
 8000894:	6f72      	.short	0x6f72
 8000896:	74          	.byte	0x74
	...

08000898 <Code_137>:

@ -----------------------------------------------------------------------------
  Wortbirne Flag_foldable_3|Flag_inline, "-rot" @ ( x w y -- y x w )
@ -----------------------------------------------------------------------------
minusrot:
  ldm psp!, {r0, r1}
 8000898:	cf03      	ldmia	r7!, {r0, r1}
  subs psp, #8
 800089a:	3f08      	subs	r7, #8
  str tos, [psp, #4]
 800089c:	607e      	str	r6, [r7, #4]
  str r1, [psp]
 800089e:	6039      	str	r1, [r7, #0]
  movs tos, r0
 80008a0:	0006      	movs	r6, r0
  bx lr
 80008a2:	4770      	bx	lr

080008a4 <Dictionary_138>:
 80008a4:	080008b6 	.word	0x080008b6
 80008a8:	70040020 	.word	0x70040020
 80008ac:	6369      	.short	0x6369
 80008ae:	6b          	.byte	0x6b
	...

080008b0 <Code_138>:
  .ifdef m0core
  lsls r0, tos, #2
  ldr tos, [psp, r0]
  bx lr
  .else
  ldr tos, [psp, tos, lsl #2]  @ I love ARM. :-)
 80008b0:	f857 6026 	ldr.w	r6, [r7, r6, lsl #2]
  bx lr
 80008b4:	4770      	bx	lr

080008b6 <Dictionary_139>:
 80008b6:	08ce      	.short	0x08ce
 80008b8:	00000800 	.word	0x00000800
 80008bc:	70656405 	.word	0x70656405
 80008c0:	6874      	.short	0x6874

080008c2 <Code_139>:
@ -----------------------------------------------------------------------------
  Wortbirne Flag_visible, "depth" @ ( -- Zahl der Elemente, die vorher auf den Datenstack waren )
                                  @ ( -- Number of elements that have been on datastack before )
@ -----------------------------------------------------------------------------
  @ Berechne den Stackfüllstand
  ldr r1, =datenstackanfang @ Anfang laden  Calculate stack fill gauge
 80008c2:	49bc      	ldr	r1, [pc, #752]	; (8000bb4 <Code_183+0xa>)
  subs r1, psp @ und aktuellen Stackpointer abziehen
 80008c4:	1bc9      	subs	r1, r1, r7
  pushdatos
 80008c6:	f847 6d04 	str.w	r6, [r7, #-4]!
  asrs tos, r1, #2 @ Durch 4 teilen  Divide through 4 Bytes/element.
 80008ca:	108e      	asrs	r6, r1, #2
  bx lr
 80008cc:	4770      	bx	lr

080008ce <Dictionary_141>:
 80008ce:	08ea      	.short	0x08ea
 80008d0:	00000800 	.word	0x00000800
 80008d4:	65647206 	.word	0x65647206
 80008d8:	7470      	.short	0x7470
 80008da:	68          	.byte	0x68
	...

080008dc <Code_141>:

@ -----------------------------------------------------------------------------
  Wortbirne Flag_visible, "rdepth"
@ -----------------------------------------------------------------------------
  pushdatos
 80008dc:	f847 6d04 	str.w	r6, [r7, #-4]!
  mov tos, sp
 80008e0:	466e      	mov	r6, sp
  ldr r1, =returnstackanfang @ Anfang laden  Calculate stack fill gauge
 80008e2:	49b5      	ldr	r1, [pc, #724]	; (8000bb8 <Code_183+0xe>)
  subs r1, tos @ und aktuellen Stackpointer abziehen
 80008e4:	1b89      	subs	r1, r1, r6
  asrs tos, r1, #2 @ Durch 4 teilen  Divide through 4 Bytes/element.
 80008e6:	108e      	asrs	r6, r1, #2
  bx lr
 80008e8:	4770      	bx	lr

080008ea <Dictionary_143>:
 80008ea:	08fa      	.short	0x08fa
 80008ec:	00200800 	.word	0x00200800
 80008f0:	3e02      	.short	0x3e02
 80008f2:	72          	.byte	0x72
	...

080008f4 <Code_143>:
@ Returnstack

@------------------------------------------------------------------------------
  Wortbirne Flag_visible|Flag_inline, ">r" @ Legt das oberste Element des Datenstacks auf den Returnstack.
@------------------------------------------------------------------------------
  push {tos}
 80008f4:	b440      	push	{r6}
  ldm psp!, {tos}
 80008f6:	cf40      	ldmia	r7!, {r6}
  bx lr
 80008f8:	4770      	bx	lr

080008fa <Dictionary_144>:
 80008fa:	090c      	.short	0x090c
 80008fc:	00200800 	.word	0x00200800
 8000900:	7202      	.short	0x7202
 8000902:	3e          	.byte	0x3e
	...

08000904 <Code_144>:

@------------------------------------------------------------------------------
  Wortbirne Flag_visible|Flag_inline, "r>" @ Holt das zwischengespeicherte Element aus dem Returnstack zurück
@------------------------------------------------------------------------------
  pushdatos
 8000904:	f847 6d04 	str.w	r6, [r7, #-4]!
  pop {tos}
 8000908:	bc40      	pop	{r6}
  bx lr
 800090a:	4770      	bx	lr

0800090c <Dictionary_146>:
 800090c:	0800091e 	.word	0x0800091e
 8000910:	72020020 	.word	0x72020020
 8000914:	40          	.byte	0x40
	...

08000916 <Code_146>:

@------------------------------------------------------------------------------
  Wortbirne Flag_visible|Flag_inline, "r@" @ Kopiert das oberste Element des Returnstacks auf den Datenstack
@------------------------------------------------------------------------------
  pushdatos
 8000916:	f847 6d04 	str.w	r6, [r7, #-4]!
  ldr tos, [sp]
 800091a:	9e00      	ldr	r6, [sp, #0]
  bx lr
 800091c:	4770      	bx	lr

0800091e <Dictionary_148>:
 800091e:	092e      	.short	0x092e
 8000920:	00200800 	.word	0x00200800
 8000924:	72647205 	.word	0x72647205
 8000928:	706f      	.short	0x706f

0800092a <Code_148>:

@------------------------------------------------------------------------------
  Wortbirne Flag_visible|Flag_inline, "rdrop" @ Entfernt das oberste Element des Returnstacks
@------------------------------------------------------------------------------
  add sp, #4
 800092a:	b001      	add	sp, #4
  bx lr
 800092c:	4770      	bx	lr

0800092e <Dictionary_149>:
 800092e:	0942      	.short	0x0942
 8000930:	00200800 	.word	0x00200800
 8000934:	69707205 	.word	0x69707205
 8000938:	6b63      	.short	0x6b63

0800093a <Code_149>:

@ -----------------------------------------------------------------------------
  Wortbirne Flag_visible|Flag_inline, "rpick" @ ( u -- xu R: xu .. x1 x0 -- xu ... x1 x0 )
@ -----------------------------------------------------------------------------
  lsls tos, #2
 800093a:	00b6      	lsls	r6, r6, #2
  add tos, sp
 800093c:	446e      	add	r6, sp
  ldr tos, [tos]
 800093e:	6836      	ldr	r6, [r6, #0]
  bx lr
 8000940:	4770      	bx	lr

08000942 <Dictionary_150>:
 8000942:	0958      	.short	0x0958
 8000944:	006e0800 	.word	0x006e0800
 8000948:	646e6103 	.word	0x646e6103

0800094c <Code_150>:

@ -----------------------------------------------------------------------------
  Wortbirne Flag_inline|Flag_opcodierbar_Rechenlogik_M3, "and" @ ( x1 x2 -- x1&x2 )
                        @ Combines the top two stack elements using bitwise AND.
@ -----------------------------------------------------------------------------
  ldm psp!, {r0}
 800094c:	cf01      	ldmia	r7!, {r0}
  ands tos, r0
 800094e:	4006      	ands	r6, r0
  bx lr
 8000950:	4770      	bx	lr
  ands tos, r0 @ Opcode for use with literal in register
 8000952:	4006      	ands	r6, r0
 8000954:	f0160600 	.word	0xf0160600

08000958 <Dictionary_151>:
 8000958:	08000970 	.word	0x08000970
 800095c:	6203006e 	.word	0x6203006e
 8000960:	6369      	.short	0x6369

08000962 <Code_151>:
  .endif @ Opcode ands tos, tos, #imm12

@ -----------------------------------------------------------------------------
  Wortbirne Flag_inline|Flag_opcodierbar_Rechenlogik_M3, "bic" @ ( x1 x2 -- x1&~x2 )
@ -----------------------------------------------------------------------------
  ldm psp!, {r0}
 8000962:	cf01      	ldmia	r7!, {r0}
  bics r0, tos
 8000964:	43b0      	bics	r0, r6
  movs tos, r0
 8000966:	0006      	movs	r6, r0
  bx lr
 8000968:	4770      	bx	lr
  bics tos, r0 @ Opcode for use with literal in register
 800096a:	4386      	bics	r6, r0
 800096c:	f0360600 	.word	0xf0360600

08000970 <Dictionary_152>:
 8000970:	08000986 	.word	0x08000986
 8000974:	6f02006e 	.word	0x6f02006e
 8000978:	72          	.byte	0x72
	...

0800097a <Code_152>:

@ -----------------------------------------------------------------------------
  Wortbirne Flag_inline|Flag_opcodierbar_Rechenlogik_M3, "or" @ ( x1 x2 -- x1|x2 )
                       @ Combines the top two stack elements using bitwise OR.
@ -----------------------------------------------------------------------------
  ldm psp!, {r0}
 800097a:	cf01      	ldmia	r7!, {r0}
  orrs tos, r0
 800097c:	4306      	orrs	r6, r0
  bx lr
 800097e:	4770      	bx	lr
  orrs tos, r0 @ Opcode for use with literal in register
 8000980:	4306      	orrs	r6, r0
 8000982:	0600      	.short	0x0600
 8000984:	f056      	.short	0xf056

08000986 <Dictionary_153>:
 8000986:	099c      	.short	0x099c
 8000988:	006e0800 	.word	0x006e0800
 800098c:	726f7803 	.word	0x726f7803

08000990 <Code_153>:

@ -----------------------------------------------------------------------------
  Wortbirne Flag_inline|Flag_opcodierbar_Rechenlogik_M3, "xor" @ ( x1 x2 -- x1|x2 )
                        @ Combines the top two stack elements using bitwise exclusive-OR.
@ -----------------------------------------------------------------------------
  ldm psp!, {r0}
 8000990:	cf01      	ldmia	r7!, {r0}
  eors tos, r0
 8000992:	4046      	eors	r6, r0
  bx lr
 8000994:	4770      	bx	lr
  eors tos, r0 @ Opcode for use with literal in register
 8000996:	4046      	eors	r6, r0
 8000998:	f0960600 	.word	0xf0960600

0800099c <Dictionary_154>:
 800099c:	080009aa 	.word	0x080009aa
 80009a0:	6e030061 	.word	0x6e030061
 80009a4:	746f      	.short	0x746f

080009a6 <Code_154>:


@ -----------------------------------------------------------------------------
  Wortbirne Flag_foldable_1|Flag_inline, "not" @ ( x -- ~x )
@ -----------------------------------------------------------------------------
  mvns tos, tos
 80009a6:	43f6      	mvns	r6, r6
  bx lr
 80009a8:	4770      	bx	lr

080009aa <Dictionary_155>:
 80009aa:	09ba      	.short	0x09ba
 80009ac:	00610800 	.word	0x00610800
 80009b0:	7a6c6303 	.word	0x7a6c6303

080009b4 <Code_155>:

@ -----------------------------------------------------------------------------
  Wortbirne Flag_foldable_1|Flag_inline, "clz" @ ( x -- u )
                        @ Counts leading zeroes in x.
@ -----------------------------------------------------------------------------
  clz tos, tos
 80009b4:	fab6 f686 	clz	r6, r6
  bx lr
 80009b8:	4770      	bx	lr

080009ba <Dictionary_156>:
 80009ba:	09c8      	.short	0x09c8
 80009bc:	00610800 	.word	0x00610800
 80009c0:	72687303 	.word	0x72687303

080009c4 <Code_156>:
  .endif

@ -----------------------------------------------------------------------------
  Wortbirne Flag_inline|Flag_foldable_1, "shr" @ ( x -- x' ) @ Um eine Stelle rechts schieben
@ -----------------------------------------------------------------------------
  lsrs tos, #1
 80009c4:	0876      	lsrs	r6, r6, #1
  bx lr
 80009c6:	4770      	bx	lr

080009c8 <Dictionary_157>:
 80009c8:	080009d6 	.word	0x080009d6
 80009cc:	73030061 	.word	0x73030061
 80009d0:	6c68      	.short	0x6c68

080009d2 <Code_157>:

@ -----------------------------------------------------------------------------
  Wortbirne Flag_inline|Flag_foldable_1, "shl" @ ( x -- x' ) @ Um eine Stelle links schieben
@ -----------------------------------------------------------------------------
  lsls tos, #1
 80009d2:	0076      	lsls	r6, r6, #1
  bx lr
 80009d4:	4770      	bx	lr

080009d6 <Dictionary_158>:
 80009d6:	09e6      	.short	0x09e6
 80009d8:	00610800 	.word	0x00610800
 80009dc:	726f7203 	.word	0x726f7203

080009e0 <Code_158>:
  .ifdef m0core
    movs r0, #1
    rors tos, r0
    bx lr
  .else
    rors tos, #1
 80009e0:	ea5f 0676 	movs.w	r6, r6, ror #1
    bx lr
 80009e4:	4770      	bx	lr

080009e6 <Dictionary_159>:
 80009e6:	09f8      	.short	0x09f8
 80009e8:	00610800 	.word	0x00610800
 80009ec:	6c6f7203 	.word	0x6c6f7203

080009f0 <Code_159>:
    movs r0, #0
    adds tos, tos, tos
    adcs tos, r0
    bx lr
  .else
    adds tos, tos, tos
 80009f0:	19b6      	adds	r6, r6, r6
    adcs tos, #0
 80009f2:	f156 0600 	adcs.w	r6, r6, #0
    bx lr
 80009f6:	4770      	bx	lr

080009f8 <Dictionary_160>:
 80009f8:	08000a12 	.word	0x08000a12
 80009fc:	7206006c 	.word	0x7206006c
 8000a00:	66696873 	.word	0x66696873
 8000a04:	74          	.byte	0x74
	...

08000a06 <Code_160>:

@ -----------------------------------------------------------------------------
  Wortbirne Flag_inline|Flag_opcodierbar_Schieben, "rshift" @ ( x n -- x' )
                           @ Shifts 'x' right by 'n' bits.
@ -----------------------------------------------------------------------------
  ldm psp!, {r0}
 8000a06:	cf01      	ldmia	r7!, {r0}
  lsrs r0, tos
 8000a08:	40f0      	lsrs	r0, r6
  movs tos, r0
 8000a0a:	0006      	movs	r6, r0
  bx lr
 8000a0c:	4770      	bx	lr
 8000a0e:	0836      	.short	0x0836
  .hword 0x0836 @ Opcode lsrs r6, r6, #0
  movs tos, #0  @ Opcode if shift is > 31 places.
 8000a10:	2600      	movs	r6, #0

08000a12 <Dictionary_161>:
 8000a12:	0a2c      	.short	0x0a2c
 8000a14:	006c0800 	.word	0x006c0800
 8000a18:	73726107 	.word	0x73726107
 8000a1c:	74666968 	.word	0x74666968

08000a20 <Code_161>:

@ -----------------------------------------------------------------------------
  Wortbirne Flag_inline|Flag_opcodierbar_Schieben, "arshift" @ ( x n -- x' )
                            @ Shifts 'x' right by 'n' bits, shifting in x's MSB.
@ -----------------------------------------------------------------------------
  ldm psp!, {r0}
 8000a20:	cf01      	ldmia	r7!, {r0}
  asrs r0, tos
 8000a22:	4130      	asrs	r0, r6
  movs tos, r0
 8000a24:	0006      	movs	r6, r0
  bx lr
 8000a26:	4770      	bx	lr
 8000a28:	1036      	.short	0x1036
  .hword 0x1036 @ Opcode asrs r6, r6, #0
  asrs tos, #31 @ Opcode if shift is > 31 places.
 8000a2a:	17f6      	asrs	r6, r6, #31

08000a2c <Dictionary_162>:
 8000a2c:	08000a46 	.word	0x08000a46
 8000a30:	6c06006c 	.word	0x6c06006c
 8000a34:	66696873 	.word	0x66696873
 8000a38:	74          	.byte	0x74
	...

08000a3a <Code_162>:

@ -----------------------------------------------------------------------------
  Wortbirne Flag_inline|Flag_opcodierbar_Schieben, "lshift" @ ( x n -- x' )
                           @ Shifts 'x' left by 'n' bits.
@ -----------------------------------------------------------------------------
  ldm psp!, {r0}
 8000a3a:	cf01      	ldmia	r7!, {r0}
  lsls r0, tos
 8000a3c:	40b0      	lsls	r0, r6
  movs tos, r0
 8000a3e:	0006      	movs	r6, r0
  bx lr
 8000a40:	4770      	bx	lr
 8000a42:	0036      	.short	0x0036
  .hword 0x0036 @ Opcode lsls r6, r6, #0
  movs tos, #0  @ Opcode if shift is > 31 places.
 8000a44:	2600      	movs	r6, #0

08000a46 <Dictionary_163>:
 8000a46:	0a56      	.short	0x0a56
 8000a48:	00610800 	.word	0x00610800
 8000a4c:	3002      	.short	0x3002
 8000a4e:	3d          	.byte	0x3d
	...

08000a50 <Code_163>:
  Wortbirne Flag_foldable_1|Flag_inline, "0=" @ ( x -- ? )
@ -----------------------------------------------------------------------------
@        subs TOS, TOS, #1       ; if zero, carry is set, else carry is clear
@        sbc TOS, TOS, TOS       ; subtracting r0 from itself leaves zero if
@                                ; carry was clear or -1 if carry was set.
  subs tos, #1
 8000a50:	3e01      	subs	r6, #1
  sbcs tos, tos
 8000a52:	41b6      	sbcs	r6, r6
  bx lr
 8000a54:	4770      	bx	lr

08000a56 <Dictionary_164>:
 8000a56:	0a68      	.short	0x0a68
 8000a58:	00610800 	.word	0x00610800
 8000a5c:	3e3c3003 	.word	0x3e3c3003

08000a60 <Code_164>:


@ -----------------------------------------------------------------------------
  Wortbirne Flag_foldable_1|Flag_inline, "0<>" @ ( x -- ? )
@ -----------------------------------------------------------------------------
  subs tos, #1
 8000a60:	3e01      	subs	r6, #1
  sbcs tos, tos
 8000a62:	41b6      	sbcs	r6, r6
  mvns tos, tos
 8000a64:	43f6      	mvns	r6, r6
  bx lr
 8000a66:	4770      	bx	lr

08000a68 <Dictionary_165>:
 8000a68:	08000a76 	.word	0x08000a76
 8000a6c:	30020061 	.word	0x30020061
 8000a70:	3c          	.byte	0x3c
	...

08000a72 <Code_165>:

@ -----------------------------------------------------------------------------
  Wortbirne Flag_foldable_1|Flag_inline, "0<" @ ( n -- ? )
@ -----------------------------------------------------------------------------
  movs TOS, TOS, asr #31    @ Turn MSB into 0xffffffff or 0x00000000
 8000a72:	17f6      	asrs	r6, r6, #31
  bx lr
 8000a74:	4770      	bx	lr

08000a76 <Dictionary_166>:
 8000a76:	0a8c      	.short	0x0a8c
 8000a78:	00600800 	.word	0x00600800
 8000a7c:	75727404 	.word	0x75727404
 8000a80:	65          	.byte	0x65
	...

08000a82 <Code_166>:

@ -----------------------------------------------------------------------------
  Wortbirne Flag_foldable_0|Flag_inline, "true" @ ( -- -1 )
@ -----------------------------------------------------------------------------
  pushdatos
 8000a82:	f847 6d04 	str.w	r6, [r7, #-4]!

08000a86 <generate_true>:
generate_true:
  movs tos, #0
 8000a86:	2600      	movs	r6, #0
  mvns tos, tos
 8000a88:	43f6      	mvns	r6, r6
  bx lr
 8000a8a:	4770      	bx	lr

08000a8c <Dictionary_168>:
 8000a8c:	08000aa0 	.word	0x08000aa0
 8000a90:	66050060 	.word	0x66050060
 8000a94:	65736c61 	.word	0x65736c61

08000a98 <Code_168>:

@ -----------------------------------------------------------------------------
  Wortbirne Flag_foldable_0|Flag_inline, "false" @ ( x -- 0 )
@ -----------------------------------------------------------------------------
  pushdatos
 8000a98:	f847 6d04 	str.w	r6, [r7, #-4]!
  movs tos, #0
 8000a9c:	2600      	movs	r6, #0
  bx lr
 8000a9e:	4770      	bx	lr

08000aa0 <Dictionary_170>:
 8000aa0:	08000ab4 	.word	0x08000ab4
 8000aa4:	3e020042 	.word	0x3e020042
 8000aa8:	3d          	.byte	0x3d
	...

08000aaa <Code_170>:

@ -----------------------------------------------------------------------------
  Wortbirne Flag_foldable_2, ">=" @ ( x1 x2 -- ? )
@ -----------------------------------------------------------------------------
  ldm psp!, {r0}      @ Get x1 into a register.
 8000aaa:	cf01      	ldmia	r7!, {r0}
  cmp r0, tos         @ Is x2 less or equal ?
 8000aac:	42b0      	cmp	r0, r6
  bge.n generate_true
 8000aae:	daea      	bge.n	8000a86 <generate_true>
  movs tos, #0
 8000ab0:	2600      	movs	r6, #0
  bx lr
 8000ab2:	4770      	bx	lr

08000ab4 <Dictionary_171>:
 8000ab4:	08000ac8 	.word	0x08000ac8
 8000ab8:	3c020042 	.word	0x3c020042
 8000abc:	3d          	.byte	0x3d
	...

08000abe <Code_171>:

@ -----------------------------------------------------------------------------
  Wortbirne Flag_foldable_2, "<=" @ ( x1 x2 -- ? )          
@ -----------------------------------------------------------------------------
  ldm psp!, {r0}     @ Get x1 into a register.
 8000abe:	cf01      	ldmia	r7!, {r0}
  cmp r0, tos        @ Is x2 greater or equal ?
 8000ac0:	42b0      	cmp	r0, r6
  ble.n generate_true
 8000ac2:	dde0      	ble.n	8000a86 <generate_true>
  movs tos, #0
 8000ac4:	2600      	movs	r6, #0
  bx lr
 8000ac6:	4770      	bx	lr

08000ac8 <Dictionary_172>:
 8000ac8:	08000ada 	.word	0x08000ada
 8000acc:	3c010042 	.word	0x3c010042

08000ad0 <Code_172>:

@ -----------------------------------------------------------------------------
  Wortbirne Flag_foldable_2, "<" @ ( x1 x2 -- ? )
                      @ Checks if x2 is less than x1.
@ -----------------------------------------------------------------------------
  ldm psp!, {r0}     @ Get x1 into a register.
 8000ad0:	cf01      	ldmia	r7!, {r0}
  cmp r0, tos        @ Is x2 less?
 8000ad2:	42b0      	cmp	r0, r6
  blt.n generate_true
 8000ad4:	dbd7      	blt.n	8000a86 <generate_true>
  movs tos, #0
 8000ad6:	2600      	movs	r6, #0
  bx lr
 8000ad8:	4770      	bx	lr

08000ada <Dictionary_173>:
 8000ada:	0aec      	.short	0x0aec
 8000adc:	00420800 	.word	0x00420800
 8000ae0:	3e01      	.short	0x3e01

08000ae2 <Code_173>:

@ -----------------------------------------------------------------------------
  Wortbirne Flag_foldable_2, ">" @ ( x1 x2 -- ? )
                      @ Checks if x2 is greater than x1.
@ -----------------------------------------------------------------------------
  ldm psp!, {r0}     @ Get x1 into a register.
 8000ae2:	cf01      	ldmia	r7!, {r0}
  cmp r0, tos        @ Is x2 greater?
 8000ae4:	42b0      	cmp	r0, r6
  bgt.n generate_true
 8000ae6:	dcce      	bgt.n	8000a86 <generate_true>
  movs tos, #0
 8000ae8:	2600      	movs	r6, #0
  bx lr
 8000aea:	4770      	bx	lr

08000aec <Dictionary_174>:
 8000aec:	08000b00 	.word	0x08000b00
 8000af0:	75030062 	.word	0x75030062
 8000af4:	3d3e      	.short	0x3d3e

08000af6 <Code_174>:

@ -----------------------------------------------------------------------------
  Wortbirne Flag_foldable_2|Flag_inline, "u>=" @ ( u1 u2 -- ? )
@ -----------------------------------------------------------------------------
  ldm psp!, {r0}      @ Get u1 into a register.
 8000af6:	cf01      	ldmia	r7!, {r0}
  subs tos, r0, tos   @ subs tos, w, tos   @ TOS = a-b  -- carry set if a is less than b
 8000af8:	1b86      	subs	r6, r0, r6
  sbcs tos, tos
 8000afa:	41b6      	sbcs	r6, r6
  mvns tos, tos
 8000afc:	43f6      	mvns	r6, r6
  bx lr
 8000afe:	4770      	bx	lr

08000b00 <Dictionary_175>:
 8000b00:	08000b14 	.word	0x08000b14
 8000b04:	75030062 	.word	0x75030062
 8000b08:	3d3c      	.short	0x3d3c

08000b0a <Code_175>:

@ -----------------------------------------------------------------------------
  Wortbirne Flag_foldable_2|Flag_inline, "u<=" @ ( u1 u2 -- ? )
@ -----------------------------------------------------------------------------
  ldm psp!, {r0}
 8000b0a:	cf01      	ldmia	r7!, {r0}
  subs tos, r0
 8000b0c:	1a36      	subs	r6, r6, r0
  sbcs tos, tos
 8000b0e:	41b6      	sbcs	r6, r6
  mvns tos, tos
 8000b10:	43f6      	mvns	r6, r6
  bx lr
 8000b12:	4770      	bx	lr

08000b14 <Dictionary_176>:
 8000b14:	08000b26 	.word	0x08000b26
 8000b18:	75020062 	.word	0x75020062
 8000b1c:	3c          	.byte	0x3c
	...

08000b1e <Code_176>:

@ -----------------------------------------------------------------------------
  Wortbirne Flag_foldable_2|Flag_inline, "u<" @ ( u1 u2 -- ? )
@ -----------------------------------------------------------------------------
  ldm psp!, {r0}      @ Get u1 into a register.
 8000b1e:	cf01      	ldmia	r7!, {r0}
  subs tos, r0, tos   @ subs tos, w, tos   @ TOS = a-b  -- carry set if a is less than b
 8000b20:	1b86      	subs	r6, r0, r6
  sbcs tos, tos
 8000b22:	41b6      	sbcs	r6, r6
  bx lr
 8000b24:	4770      	bx	lr

08000b26 <Dictionary_177>:
 8000b26:	0b38      	.short	0x0b38
 8000b28:	00620800 	.word	0x00620800
 8000b2c:	7502      	.short	0x7502
 8000b2e:	3e          	.byte	0x3e
	...

08000b30 <Code_177>:

@ -----------------------------------------------------------------------------
  Wortbirne Flag_foldable_2|Flag_inline, "u>" @ ( u1 u2 -- ? )
@ -----------------------------------------------------------------------------
  ldm psp!, {r0}
 8000b30:	cf01      	ldmia	r7!, {r0}
  subs tos, r0
 8000b32:	1a36      	subs	r6, r6, r0
  sbcs tos, tos
 8000b34:	41b6      	sbcs	r6, r6
  bx lr
 8000b36:	4770      	bx	lr

08000b38 <Dictionary_178>:
 8000b38:	08000b4e 	.word	0x08000b4e
 8000b3c:	3c02006b 	.word	0x3c02006b
 8000b40:	3e          	.byte	0x3e
	...

08000b42 <Code_178>:

@ -----------------------------------------------------------------------------
  Wortbirne Flag_inline|Flag_opcodierbar_GleichUngleich, "<>" @ ( x1 x2 -- ? )
                       @ Compares the top two stack elements for inequality.
@ -----------------------------------------------------------------------------
  ldm psp!, {r0}      @ Get the next elt into a register.
 8000b42:	cf01      	ldmia	r7!, {r0}
  subs tos, r0        @ Z=equality; if equal, TOS=0
 8000b44:	1a36      	subs	r6, r6, r0

  subs tos, #1
 8000b46:	3e01      	subs	r6, #1
  sbcs tos, tos
 8000b48:	41b6      	sbcs	r6, r6
  mvns tos, tos
 8000b4a:	43f6      	mvns	r6, r6
  bx lr
 8000b4c:	4770      	bx	lr

08000b4e <Dictionary_179>:
 8000b4e:	0b60      	.short	0x0b60
 8000b50:	006b0800 	.word	0x006b0800
 8000b54:	3d01      	.short	0x3d01

08000b56 <Code_179>:

@ -----------------------------------------------------------------------------
  Wortbirne Flag_inline|Flag_opcodierbar_GleichUngleich, "=" @ ( x1 x2 -- ? )
                      @ Compares the top two stack elements for equality.
@ -----------------------------------------------------------------------------
  ldm psp!, {r0}     @ Get the next elt into a register.
 8000b56:	cf01      	ldmia	r7!, {r0}
  subs tos, r0       @ Z=equality; if equal, TOS=0
 8000b58:	1a36      	subs	r6, r6, r0

  subs tos, #1       @ Wenn es Null war, gibt es jetzt einen Überlauf
 8000b5a:	3e01      	subs	r6, #1
  sbcs tos, tos
 8000b5c:	41b6      	sbcs	r6, r6
  bx lr
 8000b5e:	4770      	bx	lr

08000b60 <Dictionary_180>:
 8000b60:	08000b74 	.word	0x08000b74
 8000b64:	6d030062 	.word	0x6d030062
 8000b68:	6e69      	.short	0x6e69

08000b6a <Code_180>:

@ -----------------------------------------------------------------------------
  Wortbirne Flag_foldable_2|Flag_inline, "min" @ ( x1 x2 -- x3 )
                        @ x3 is the lesser of x1 and x2.
@ -----------------------------------------------------------------------------
  ldm psp!, {r0}
 8000b6a:	cf01      	ldmia	r7!, {r0}
  cmp r0, tos
 8000b6c:	42b0      	cmp	r0, r6
  bgt 1f
 8000b6e:	dc00      	bgt.n	8000b72 <Code_180+0x8>
  movs tos, r0
 8000b70:	0006      	movs	r6, r0
1:bx lr
 8000b72:	4770      	bx	lr

08000b74 <Dictionary_181>:
 8000b74:	08000b88 	.word	0x08000b88
 8000b78:	6d030062 	.word	0x6d030062
 8000b7c:	7861      	.short	0x7861

08000b7e <Code_181>:

@ -----------------------------------------------------------------------------
  Wortbirne Flag_foldable_2|Flag_inline, "max" @ ( x1 x2 -- x3 )
                        @ x3 is the greater of x1 and x2.
@ -----------------------------------------------------------------------------
  ldm psp!, {r0}
 8000b7e:	cf01      	ldmia	r7!, {r0}
  cmp r0, tos
 8000b80:	42b0      	cmp	r0, r6
  blt 1f
 8000b82:	db00      	blt.n	8000b86 <Code_181+0x8>
  movs tos, r0
 8000b84:	0006      	movs	r6, r0
1:bx lr
 8000b86:	4770      	bx	lr

08000b88 <Dictionary_182>:
 8000b88:	08000b9e 	.word	0x08000b9e
 8000b8c:	75040062 	.word	0x75040062
 8000b90:	616d      	.short	0x616d
 8000b92:	78          	.byte	0x78
	...

08000b94 <Code_182>:

@ -----------------------------------------------------------------------------
  Wortbirne Flag_foldable_2|Flag_inline, "umax" @ ( u1 u2 -- u1|u2 )
@ -----------------------------------------------------------------------------
  ldm psp!, {r0}
 8000b94:	cf01      	ldmia	r7!, {r0}
  cmp r0, tos
 8000b96:	42b0      	cmp	r0, r6
  blo 1f
 8000b98:	d300      	bcc.n	8000b9c <Code_182+0x8>
  movs tos, r0
 8000b9a:	0006      	movs	r6, r0
1:bx lr
 8000b9c:	4770      	bx	lr

08000b9e <Dictionary_183>:
 8000b9e:	0bbc      	.short	0x0bbc
 8000ba0:	00620800 	.word	0x00620800
 8000ba4:	696d7504 	.word	0x696d7504
 8000ba8:	6e          	.byte	0x6e
	...

08000baa <Code_183>:

@ -----------------------------------------------------------------------------
  Wortbirne Flag_foldable_2|Flag_inline, "umin" @ ( u1 u2 -- u1|u2 )
@ -----------------------------------------------------------------------------
  ldm psp!, {r0}
 8000baa:	cf01      	ldmia	r7!, {r0}
  cmp r0, tos
 8000bac:	42b0      	cmp	r0, r6
  bhi 1f
 8000bae:	d800      	bhi.n	8000bb2 <Code_183+0x8>
  movs tos, r0
 8000bb0:	0006      	movs	r6, r0
1:bx lr
 8000bb2:	4770      	bx	lr
  ldr r1, =datenstackanfang @ Anfang laden  Calculate stack fill gauge
 8000bb4:	20001330 	.word	0x20001330
  ldr r1, =returnstackanfang @ Anfang laden  Calculate stack fill gauge
 8000bb8:	20001430 	.word	0x20001430

08000bbc <Dictionary_184>:
 8000bbc:	08000bfa 	.word	0x08000bfa
 8000bc0:	6d040000 	.word	0x6d040000
 8000bc4:	766f      	.short	0x766f
 8000bc6:	65          	.byte	0x65
	...

08000bc8 <Code_184>:
@------------------------------------------------------------------------------
  Wortbirne Flag_visible, "move"  @ Move some bytes around. This can cope with overlapping memory areas.
move:  @ ( Quelladdr Zieladdr Byteanzahl -- ) ( Source Destination Count -- )
@------------------------------------------------------------------------------

  push {r0, r1, r2, lr}
 8000bc8:	b507      	push	{r0, r1, r2, lr}

  popda r1 @ Count
 8000bca:	0031      	movs	r1, r6
 8000bcc:	cf40      	ldmia	r7!, {r6}
  popda r2 @ Destination address
 8000bce:	0032      	movs	r2, r6
 8000bd0:	cf40      	ldmia	r7!, {r6}
  @ TOS:     Source address

  @ Count > 0 ?
  cmp r1, #0
 8000bd2:	2900      	cmp	r1, #0
  beq 3f @ Nothing to do if count is zero.
 8000bd4:	d00f      	beq.n	8000bf6 <Code_184+0x2e>

  @ Compare source and destination address to find out which direction to copy.
  cmp r2, tos
 8000bd6:	42b2      	cmp	r2, r6
  beq 3f @ If source and destionation are the same, nothing to do.
 8000bd8:	d00d      	beq.n	8000bf6 <Code_184+0x2e>
  blo 2f
 8000bda:	d306      	bcc.n	8000bea <Code_184+0x22>

  subs tos, #1
 8000bdc:	3e01      	subs	r6, #1
  subs r2, #1
 8000bde:	3a01      	subs	r2, #1

1:@ Source > Destination --> Backward move
  ldrb r0, [tos, r1]
 8000be0:	5c70      	ldrb	r0, [r6, r1]
  strb r0, [r2, r1]
 8000be2:	5450      	strb	r0, [r2, r1]
  subs r1, #1
 8000be4:	3901      	subs	r1, #1
  bne 1b
 8000be6:	d1fb      	bne.n	8000be0 <Code_184+0x18>
  b 3f
 8000be8:	e005      	b.n	8000bf6 <Code_184+0x2e>

2:@ Source < Destination --> Forward move
  ldrb r0, [tos]
 8000bea:	7830      	ldrb	r0, [r6, #0]
  strb r0, [r2]
 8000bec:	7010      	strb	r0, [r2, #0]
  adds tos, #1
 8000bee:	3601      	adds	r6, #1
  adds r2, #1
 8000bf0:	3201      	adds	r2, #1
  subs r1, #1
 8000bf2:	3901      	subs	r1, #1
  bne 2b
 8000bf4:	d1f9      	bne.n	8000bea <Code_184+0x22>

3:drop
 8000bf6:	cf40      	ldmia	r7!, {r6}
  pop {r0, r1, r2, pc}
 8000bf8:	bd07      	pop	{r0, r1, r2, pc}

08000bfa <Dictionary_188>:
 8000bfa:	0c1c      	.short	0x0c1c
 8000bfc:	00000800 	.word	0x00000800
 8000c00:	6c696604 	.word	0x6c696604
 8000c04:	6c          	.byte	0x6c
	...

08000c06 <Code_188>:
  Wortbirne Flag_visible, "fill"  @ Fill memory with given byte.
  @ ( Destination Count Filling -- )
@------------------------------------------------------------------------------
  @ 6.1.1540 FILL CORE ( c-addr u char -- ) If u is greater than zero, store char in each of u consecutive characters of memory beginning at c-addr. 

  popda r0 @ Filling byte
 8000c06:	0030      	movs	r0, r6
 8000c08:	cf40      	ldmia	r7!, {r6}
  popda r1 @ Count
 8000c0a:	0031      	movs	r1, r6
 8000c0c:	cf40      	ldmia	r7!, {r6}
  @ TOS      Destination

  cmp r1, #0
 8000c0e:	2900      	cmp	r1, #0
  beq 2f
 8000c10:	d002      	beq.n	8000c18 <Code_188+0x12>

1:subs r1, #1
 8000c12:	3901      	subs	r1, #1
  strb r0, [tos, r1]
 8000c14:	5470      	strb	r0, [r6, r1]
  bne 1b
 8000c16:	d1fc      	bne.n	8000c12 <Code_188+0xc>

2:drop
 8000c18:	cf40      	ldmia	r7!, {r6}
  bx lr
 8000c1a:	4770      	bx	lr

08000c1c <Dictionary_192>:
 8000c1c:	08000c28 	.word	0x08000c28
 8000c20:	40010020 	.word	0x40010020

08000c24 <Code_192>:

@ -----------------------------------------------------------------------------
  Wortbirne Flag_inline, "@" @ ( 32-addr -- x )
                              @ Loads the cell at 'addr'.
@ -----------------------------------------------------------------------------
  ldr tos, [tos]
 8000c24:	6836      	ldr	r6, [r6, #0]
  bx lr
 8000c26:	4770      	bx	lr

08000c28 <Dictionary_193>:
 8000c28:	08000c40 	.word	0x08000c40
 8000c2c:	2101006d 	.word	0x2101006d

08000c30 <Code_193>:

@ -----------------------------------------------------------------------------
  Wortbirne Flag_inline|Flag_opcodierbar_Speicherschreiben, "!" @ ( x 32-addr -- )
@ Given a value 'x' and a cell-aligned address 'addr', stores 'x' to memory at 'addr', consuming both.
@ -----------------------------------------------------------------------------
  ldm psp!, {r0, r1} @ X is the new TOS after the store completes.
 8000c30:	cf03      	ldmia	r7!, {r0, r1}
  str r0, [tos]      @ Popping both saves a cycle.
 8000c32:	6030      	str	r0, [r6, #0]
  movs tos, r1
 8000c34:	000e      	movs	r6, r1
  bx lr
 8000c36:	4770      	bx	lr

  @ For opcoding with one constant
  str tos, [r0]
 8000c38:	6006      	str	r6, [r0, #0]
  bx lr
 8000c3a:	4770      	bx	lr

  @ For opcoding with two constants
  str r1, [r0]
 8000c3c:	6001      	str	r1, [r0, #0]
  bx lr
 8000c3e:	4770      	bx	lr

08000c40 <Dictionary_194>:
 8000c40:	08000c66 	.word	0x08000c66
 8000c44:	2b02006d 	.word	0x2b02006d
 8000c48:	21          	.byte	0x21
	...

08000c4a <Code_194>:

@ -----------------------------------------------------------------------------
  Wortbirne Flag_inline|Flag_opcodierbar_Speicherschreiben, "+!" @ ( x 32-addr -- )
                               @ Adds 'x' to the memory cell at 'addr'.
@ -----------------------------------------------------------------------------
  ldm psp!, {r0, r1} @ X is the new TOS after the store completes.
 8000c4a:	cf03      	ldmia	r7!, {r0, r1}
  ldr  r2, [tos]     @ Load the current cell value
 8000c4c:	6832      	ldr	r2, [r6, #0]
  adds r2, r0        @ Do the add
 8000c4e:	1812      	adds	r2, r2, r0
  str  r2, [tos]     @ Store it back
 8000c50:	6032      	str	r2, [r6, #0]
  movs tos, r1
 8000c52:	000e      	movs	r6, r1
  bx lr
 8000c54:	4770      	bx	lr

  @ For opcoding with one constant
  ldr r2, [r0]
 8000c56:	6802      	ldr	r2, [r0, #0]
  adds r2, tos
 8000c58:	1992      	adds	r2, r2, r6
  str r2, [r0]
 8000c5a:	6002      	str	r2, [r0, #0]
  bx lr
 8000c5c:	4770      	bx	lr

  @ For opcoding with two constants
  ldr r2, [r0]
 8000c5e:	6802      	ldr	r2, [r0, #0]
  adds r2, r1
 8000c60:	1852      	adds	r2, r2, r1
  str r2, [r0]
 8000c62:	6002      	str	r2, [r0, #0]
  bx lr
 8000c64:	4770      	bx	lr

08000c66 <Dictionary_195>:
 8000c66:	0c74      	.short	0x0c74
 8000c68:	00200800 	.word	0x00200800
 8000c6c:	6802      	.short	0x6802
 8000c6e:	40          	.byte	0x40
	...

08000c70 <Code_195>:

@ -----------------------------------------------------------------------------
  Wortbirne Flag_inline, "h@" @ ( 16-addr -- x )
                              @ Loads the half-word at 'addr'.
@ -----------------------------------------------------------------------------
  ldrh tos, [tos]
 8000c70:	8836      	ldrh	r6, [r6, #0]
  bx lr
 8000c72:	4770      	bx	lr

08000c74 <Dictionary_196>:
 8000c74:	08000c8e 	.word	0x08000c8e
 8000c78:	6802006d 	.word	0x6802006d
 8000c7c:	21          	.byte	0x21
	...

08000c7e <Code_196>:

@ -----------------------------------------------------------------------------
  Wortbirne Flag_inline|Flag_opcodierbar_Speicherschreiben, "h!" @ ( x 16-addr -- )
@ Given a value 'x' and an 16-bit-aligned address 'addr', stores 'x' to memory at 'addr', consuming both.
@ -----------------------------------------------------------------------------
  ldm psp!, {r0, r1} @ X is the new TOS after the store completes.
 8000c7e:	cf03      	ldmia	r7!, {r0, r1}
  strh r0, [tos]     @ Popping both saves a cycle.
 8000c80:	8030      	strh	r0, [r6, #0]
  movs tos, r1
 8000c82:	000e      	movs	r6, r1
  bx lr
 8000c84:	4770      	bx	lr

  @ For opcoding with one constant
  strh tos, [r0]
 8000c86:	8006      	strh	r6, [r0, #0]
  bx lr
 8000c88:	4770      	bx	lr

  @ For opcoding with two constants
  strh r1, [r0]
 8000c8a:	8001      	strh	r1, [r0, #0]
  bx lr
 8000c8c:	4770      	bx	lr

08000c8e <Dictionary_197>:
 8000c8e:	0cb4      	.short	0x0cb4
 8000c90:	006d0800 	.word	0x006d0800
 8000c94:	212b6803 	.word	0x212b6803

08000c98 <Code_197>:

@ -----------------------------------------------------------------------------
  Wortbirne Flag_inline|Flag_opcodierbar_Speicherschreiben, "h+!" @ ( x 16-addr -- )
                                @ Adds 'x' to the memory cell at 'addr'.
@ -----------------------------------------------------------------------------
  ldm psp!, {r0, r1} @ X is the new TOS after the store completes.
 8000c98:	cf03      	ldmia	r7!, {r0, r1}
  ldrh r2, [tos]     @ Load the current cell value
 8000c9a:	8832      	ldrh	r2, [r6, #0]
  adds r2, r0        @ Do the add
 8000c9c:	1812      	adds	r2, r2, r0
  strh r2, [tos]     @ Store it back
 8000c9e:	8032      	strh	r2, [r6, #0]
  movs tos, r1
 8000ca0:	000e      	movs	r6, r1
  bx lr
 8000ca2:	4770      	bx	lr

  @ For opcoding with one constant
  ldrh r2, [r0]
 8000ca4:	8802      	ldrh	r2, [r0, #0]
  adds r2, tos
 8000ca6:	1992      	adds	r2, r2, r6
  strh r2, [r0]
 8000ca8:	8002      	strh	r2, [r0, #0]
  bx lr
 8000caa:	4770      	bx	lr

  @ For opcoding with two constants
  ldrh r2, [r0]
 8000cac:	8802      	ldrh	r2, [r0, #0]
  adds r2, r1
 8000cae:	1852      	adds	r2, r2, r1
  strh r2, [r0]
 8000cb0:	8002      	strh	r2, [r0, #0]
  bx lr
 8000cb2:	4770      	bx	lr

08000cb4 <Dictionary_198>:
 8000cb4:	08000cc2 	.word	0x08000cc2
 8000cb8:	63020020 	.word	0x63020020
 8000cbc:	40          	.byte	0x40
	...

08000cbe <Code_198>:

@ -----------------------------------------------------------------------------
  Wortbirne Flag_inline, "c@" @ ( 8-addr -- x )
                              @ Loads the byte at 'addr'.
@ -----------------------------------------------------------------------------
  ldrb tos, [tos]
 8000cbe:	7836      	ldrb	r6, [r6, #0]
  bx lr
 8000cc0:	4770      	bx	lr

08000cc2 <Dictionary_199>:
 8000cc2:	0cdc      	.short	0x0cdc
 8000cc4:	006d0800 	.word	0x006d0800
 8000cc8:	6302      	.short	0x6302
 8000cca:	21          	.byte	0x21
	...

08000ccc <Code_199>:

@ -----------------------------------------------------------------------------
  Wortbirne Flag_inline|Flag_opcodierbar_Speicherschreiben, "c!" @ ( x 8-addr -- )
@ Given a value 'x' and an 8-bit-aligned address 'addr', stores 'x' to memory at 'addr', consuming both.
@ -----------------------------------------------------------------------------
  ldm psp!, {r0, r1} @ X is the new TOS after the store completes.
 8000ccc:	cf03      	ldmia	r7!, {r0, r1}
  strb r0, [tos]     @ Popping both saves a cycle.
 8000cce:	7030      	strb	r0, [r6, #0]
  movs tos, r1
 8000cd0:	000e      	movs	r6, r1
  bx lr
 8000cd2:	4770      	bx	lr

  @ For opcoding with one constant
  strb tos, [r0]
 8000cd4:	7006      	strb	r6, [r0, #0]
  bx lr
 8000cd6:	4770      	bx	lr

  @ For opcoding with two constants
  strb r1, [r0]
 8000cd8:	7001      	strb	r1, [r0, #0]
  bx lr
 8000cda:	4770      	bx	lr

08000cdc <Dictionary_200>:
 8000cdc:	08000d02 	.word	0x08000d02
 8000ce0:	6303006d 	.word	0x6303006d
 8000ce4:	212b      	.short	0x212b

08000ce6 <Code_200>:

@ -----------------------------------------------------------------------------
  Wortbirne Flag_inline|Flag_opcodierbar_Speicherschreiben, "c+!" @ ( x 8-addr -- )
                               @ Adds 'x' to the memory cell at 'addr'.
@ -----------------------------------------------------------------------------
  ldm psp!, {r0, r1} @ X is the new TOS after the store completes.
 8000ce6:	cf03      	ldmia	r7!, {r0, r1}
  ldrb r2, [tos]     @ Load the current cell value
 8000ce8:	7832      	ldrb	r2, [r6, #0]
  adds r2, r0        @ Do the add
 8000cea:	1812      	adds	r2, r2, r0
  strb r2, [tos]     @ Store it back
 8000cec:	7032      	strb	r2, [r6, #0]
  movs tos, r1
 8000cee:	000e      	movs	r6, r1
  bx lr
 8000cf0:	4770      	bx	lr

  @ For opcoding with one constant
  ldrb r2, [r0]
 8000cf2:	7802      	ldrb	r2, [r0, #0]
  adds r2, tos
 8000cf4:	1992      	adds	r2, r2, r6
  strb r2, [r0]
 8000cf6:	7002      	strb	r2, [r0, #0]
  bx lr
 8000cf8:	4770      	bx	lr

  @ For opcoding with two constants
  ldrb r2, [r0]
 8000cfa:	7802      	ldrb	r2, [r0, #0]
  adds r2, r1
 8000cfc:	1852      	adds	r2, r2, r1
  strb r2, [r0]
 8000cfe:	7002      	strb	r2, [r0, #0]
  bx lr
 8000d00:	4770      	bx	lr

08000d02 <Dictionary_201>:
 8000d02:	0d2a      	.short	0x0d2a
 8000d04:	006d0800 	.word	0x006d0800
 8000d08:	73696204 	.word	0x73696204
 8000d0c:	21          	.byte	0x21
	...

08000d0e <Code_201>:

@ -----------------------------------------------------------------------------
  Wortbirne Flag_inline|Flag_opcodierbar_Speicherschreiben, "bis!" @ ( x 32-addr -- )  Set bits
  @ Setzt die Bits in der Speicherstelle
@ -----------------------------------------------------------------------------
  ldm psp!, {r0, r1} @ X is the new TOS after the store completes.
 8000d0e:	cf03      	ldmia	r7!, {r0, r1}
  ldr  r2, [tos] @ Alten Inhalt laden
 8000d10:	6832      	ldr	r2, [r6, #0]
  orrs r2, r0    @ Hinzuverodern
 8000d12:	4302      	orrs	r2, r0
  str  r2, [tos] @ Zurückschreiben
 8000d14:	6032      	str	r2, [r6, #0]
  movs tos, r1
 8000d16:	000e      	movs	r6, r1
  bx lr
 8000d18:	4770      	bx	lr

  @ For opcoding with one constant
  ldr  r2, [r0]
 8000d1a:	6802      	ldr	r2, [r0, #0]
  orrs r2, tos
 8000d1c:	4332      	orrs	r2, r6
  str  r2, [r0]
 8000d1e:	6002      	str	r2, [r0, #0]
  bx lr
 8000d20:	4770      	bx	lr

  @ For opcoding with two constants
  ldr  r2, [r0]
 8000d22:	6802      	ldr	r2, [r0, #0]
  orrs r2, r1
 8000d24:	430a      	orrs	r2, r1
  str  r2, [r0]
 8000d26:	6002      	str	r2, [r0, #0]
  bx lr
 8000d28:	4770      	bx	lr

08000d2a <Dictionary_202>:
 8000d2a:	0d52      	.short	0x0d52
 8000d2c:	006d0800 	.word	0x006d0800
 8000d30:	63696204 	.word	0x63696204
 8000d34:	21          	.byte	0x21
	...

08000d36 <Code_202>:

@ -----------------------------------------------------------------------------
  Wortbirne Flag_inline|Flag_opcodierbar_Speicherschreiben, "bic!" @ ( x 32-addr -- )  Clear bits
  @ Löscht die Bits in der Speicherstelle
@ -----------------------------------------------------------------------------
  ldm psp!, {r0, r1} @ X is the new TOS after the store completes.
 8000d36:	cf03      	ldmia	r7!, {r0, r1}
  ldr  r2, [tos] @ Alten Inhalt laden
 8000d38:	6832      	ldr	r2, [r6, #0]
  bics r2, r0    @ Bits löschen
 8000d3a:	4382      	bics	r2, r0
  str  r2, [tos] @ Zurückschreiben
 8000d3c:	6032      	str	r2, [r6, #0]
  movs tos, r1
 8000d3e:	000e      	movs	r6, r1
  bx lr
 8000d40:	4770      	bx	lr

  @ For opcoding with one constant
  ldr  r2, [r0]
 8000d42:	6802      	ldr	r2, [r0, #0]
  bics r2, tos
 8000d44:	43b2      	bics	r2, r6
  str  r2, [r0]
 8000d46:	6002      	str	r2, [r0, #0]
  bx lr
 8000d48:	4770      	bx	lr

  @ For opcoding with two constants
  ldr  r2, [r0]
 8000d4a:	6802      	ldr	r2, [r0, #0]
  bics r2, r1
 8000d4c:	438a      	bics	r2, r1
  str  r2, [r0]
 8000d4e:	6002      	str	r2, [r0, #0]
  bx lr
 8000d50:	4770      	bx	lr

08000d52 <Dictionary_203>:
 8000d52:	0d7a      	.short	0x0d7a
 8000d54:	006d0800 	.word	0x006d0800
 8000d58:	726f7804 	.word	0x726f7804
 8000d5c:	21          	.byte	0x21
	...

08000d5e <Code_203>:

@ -----------------------------------------------------------------------------
  Wortbirne Flag_inline|Flag_opcodierbar_Speicherschreiben, "xor!" @ ( x 32-addr -- )  Toggle bits
  @ Wechselt die Bits in der Speicherstelle
@ -----------------------------------------------------------------------------
  ldm psp!, {r0, r1} @ X is the new TOS after the store completes.
 8000d5e:	cf03      	ldmia	r7!, {r0, r1}
  ldr  r2, [tos] @ Alten Inhalt laden
 8000d60:	6832      	ldr	r2, [r6, #0]
  eors r2, r0    @ Bits umkehren
 8000d62:	4042      	eors	r2, r0
  str  r2, [tos] @ Zurückschreiben
 8000d64:	6032      	str	r2, [r6, #0]
  movs tos, r1
 8000d66:	000e      	movs	r6, r1
  bx lr
 8000d68:	4770      	bx	lr

  @ For opcoding with one constant
  ldr  r2, [r0]
 8000d6a:	6802      	ldr	r2, [r0, #0]
  eors r2, tos
 8000d6c:	4072      	eors	r2, r6
  str  r2, [r0]
 8000d6e:	6002      	str	r2, [r0, #0]
  bx lr
 8000d70:	4770      	bx	lr

  @ For opcoding with two constants
  ldr  r2, [r0]
 8000d72:	6802      	ldr	r2, [r0, #0]
  eors r2, r1
 8000d74:	404a      	eors	r2, r1
  str  r2, [r0]
 8000d76:	6002      	str	r2, [r0, #0]
  bx lr
 8000d78:	4770      	bx	lr

08000d7a <Dictionary_204>:
 8000d7a:	0de4      	.short	0x0de4
 8000d7c:	00680800 	.word	0x00680800
 8000d80:	74696204 	.word	0x74696204
 8000d84:	40          	.byte	0x40
	...

08000d86 <Code_204>:

@ -----------------------------------------------------------------------------
  Wortbirne Flag_inline|Flag_opcodierbar_Spezialfall, "bit@" @ ( x 32-addr -- Flag )  Check bits
  @ Prüft, ob Bits in der Speicherstelle gesetzt sind
@ -----------------------------------------------------------------------------
  ldm psp!, {r0} @ Bitmaske holen
 8000d86:	cf01      	ldmia	r7!, {r0}
  ldr tos, [tos] @ Speicherinhalt holen
 8000d88:	6836      	ldr	r6, [r6, #0]

08000d8a <struktur_bitfetch>:
struktur_bitfetch:
  ands tos, r0   @ Bleibt nach AND etwas über ?
 8000d8a:	4006      	ands	r6, r0
  subs tos, #1
  sbcs tos, tos
  mvns tos, tos
  bx lr
  .else
  it ne
 8000d8c:	bf18      	it	ne
  movne tos, #-1 @ Bleibt etwas über, mache ein ordentliches true-Flag daraus.
 8000d8e:	f04f 36ff 	movne.w	r6, #4294967295	; 0xffffffff
  bx lr
 8000d92:	4770      	bx	lr
  .endif

  @------------------------------------------------------------------------------
  @ Opcodable optimisations enter here.
  ldr r2, =0x6800 @ ldr r0, [r0, #0] Opcode
 8000d94:	f44f 42d0 	mov.w	r2, #26624	; 0x6800

08000d98 <bitfetch_opcoding>:

bitfetch_opcoding:
    push {lr}
 8000d98:	b500      	push	{lr}
    cmp r3, #1
 8000d9a:	2b01      	cmp	r3, #1
    bne 2f
 8000d9c:	d10a      	bne.n	8000db4 <bitfetch_opcoding+0x1c>

    @ Exactly one folding constant available
    @ Encode the address
    pushdaconst 0
 8000d9e:	f847 6d04 	str.w	r6, [r7, #-4]!
 8000da2:	2600      	movs	r6, #0
    bl registerliteralkomma
 8000da4:	f000 ffca 	bl	8001d3c <Code_423>
    @ subs r3, #1 @ Not necessary

    pushda r2 @ ldr... r0, [r0, #0] Opcode
 8000da8:	f847 6d04 	str.w	r6, [r7, #-4]!
 8000dac:	0016      	movs	r6, r2
    bl hkomma
 8000dae:	f001 fb29 	bl	8002404 <Code_544>
    b.n 3f
 8000db2:	e011      	b.n	8000dd8 <bitfetch_opcoding+0x40>

2:  @ Two or more folding constants available
    @ Fetch the Bitmask from the stack and write all folding constants left.
    ldmia psp!, {r1} @ NOS into r1
 8000db4:	cf02      	ldmia	r7!, {r1}
    subs r3, #1 @ One constant less to write
 8000db6:	3b01      	subs	r3, #1
    bl konstantenschreiben @ Write all other constants in dictionary
 8000db8:	f002 fca4 	bl	8003704 <konstantenschreiben>

    @ Address is now already in TOS. Generate fetch opcode:
    pushdaconst 0x0036
 8000dbc:	f847 6d04 	str.w	r6, [r7, #-4]!
 8000dc0:	2636      	movs	r6, #54	; 0x36
    orrs tos, r2 @ ldr... r6 [ r6 #0 ] Opcode
 8000dc2:	4316      	orrs	r6, r2
    bl hkomma
 8000dc4:	f001 fb1e 	bl	8002404 <Code_544>

    @ Encode the bitmask into r0.
    pushda r1
 8000dc8:	f847 6d04 	str.w	r6, [r7, #-4]!
 8000dcc:	000e      	movs	r6, r1
    pushdaconst 0
 8000dce:	f847 6d04 	str.w	r6, [r7, #-4]!
 8000dd2:	2600      	movs	r6, #0
    bl registerliteralkomma
 8000dd4:	f000 ffb2 	bl	8001d3c <Code_423>

3:  pushdatos
 8000dd8:	f847 6d04 	str.w	r6, [r7, #-4]!
    ldr tos, =struktur_bitfetch
 8000ddc:	4e8a      	ldr	r6, [pc, #552]	; (8001008 <Code_227+0x9c>)
    bl inlinekomma
 8000dde:	f001 f8ff 	bl	8001fe0 <Code_469>

    pop {pc}
 8000de2:	bd00      	pop	{pc}

08000de4 <Dictionary_216>:
 8000de4:	08000e0c 	.word	0x08000e0c
 8000de8:	6805006d 	.word	0x6805006d
 8000dec:	21736962 	.word	0x21736962

08000df0 <Code_216>:

@ -----------------------------------------------------------------------------
  Wortbirne Flag_inline|Flag_opcodierbar_Speicherschreiben, "hbis!" @ ( x 16-addr -- )  Set bits
  @ Setzt die Bits in der Speicherstelle
@ -----------------------------------------------------------------------------
  ldm psp!, {r0, r1} @ X is the new TOS after the store completes.
 8000df0:	cf03      	ldmia	r7!, {r0, r1}
  ldrh r2, [tos] @ Alten Inhalt laden
 8000df2:	8832      	ldrh	r2, [r6, #0]
  orrs r2, r0    @ Hinzuverodern
 8000df4:	4302      	orrs	r2, r0
  strh r2, [tos] @ Zurückschreiben
 8000df6:	8032      	strh	r2, [r6, #0]
  movs tos, r1
 8000df8:	000e      	movs	r6, r1
  bx lr
 8000dfa:	4770      	bx	lr

  @ For opcoding with one constant
  ldrh r2, [r0]
 8000dfc:	8802      	ldrh	r2, [r0, #0]
  orrs r2, tos
 8000dfe:	4332      	orrs	r2, r6
  strh r2, [r0]
 8000e00:	8002      	strh	r2, [r0, #0]
  bx lr
 8000e02:	4770      	bx	lr

  @ For opcoding with two constants
  ldrh r2, [r0]
 8000e04:	8802      	ldrh	r2, [r0, #0]
  orrs r2, r1
 8000e06:	430a      	orrs	r2, r1
  strh r2, [r0]
 8000e08:	8002      	strh	r2, [r0, #0]
  bx lr
 8000e0a:	4770      	bx	lr

08000e0c <Dictionary_217>:
 8000e0c:	08000e34 	.word	0x08000e34
 8000e10:	6805006d 	.word	0x6805006d
 8000e14:	21636962 	.word	0x21636962

08000e18 <Code_217>:

@ -----------------------------------------------------------------------------
  Wortbirne Flag_inline|Flag_opcodierbar_Speicherschreiben, "hbic!" @ ( x 16-addr -- )  Clear bits
  @ Setzt die Bits in der Speicherstelle
@ -----------------------------------------------------------------------------
  ldm psp!, {r0, r1} @ X is the new TOS after the store completes.
 8000e18:	cf03      	ldmia	r7!, {r0, r1}
  ldrh r2, [tos] @ Alten Inhalt laden
 8000e1a:	8832      	ldrh	r2, [r6, #0]
  bics r2, r0    @ Hinzuverodern
 8000e1c:	4382      	bics	r2, r0
  strh r2, [tos] @ Zurückschreiben
 8000e1e:	8032      	strh	r2, [r6, #0]
  movs tos, r1
 8000e20:	000e      	movs	r6, r1
  bx lr
 8000e22:	4770      	bx	lr

  @ For opcoding with one constant
  ldrh r2, [r0]
 8000e24:	8802      	ldrh	r2, [r0, #0]
  bics r2, tos
 8000e26:	43b2      	bics	r2, r6
  strh r2, [r0]
 8000e28:	8002      	strh	r2, [r0, #0]
  bx lr
 8000e2a:	4770      	bx	lr

  @ For opcoding with two constants
  ldrh r2, [r0]
 8000e2c:	8802      	ldrh	r2, [r0, #0]
  bics r2, r1
 8000e2e:	438a      	bics	r2, r1
  strh r2, [r0]
 8000e30:	8002      	strh	r2, [r0, #0]
  bx lr
 8000e32:	4770      	bx	lr

08000e34 <Dictionary_218>:
 8000e34:	08000e5c 	.word	0x08000e5c
 8000e38:	6805006d 	.word	0x6805006d
 8000e3c:	21726f78 	.word	0x21726f78

08000e40 <Code_218>:

@ -----------------------------------------------------------------------------
  Wortbirne Flag_inline|Flag_opcodierbar_Speicherschreiben, "hxor!" @ ( x 16-addr -- )  Toggle bits
  @ Setzt die Bits in der Speicherstelle
@ -----------------------------------------------------------------------------
  ldm psp!, {r0, r1} @ X is the new TOS after the store completes.
 8000e40:	cf03      	ldmia	r7!, {r0, r1}
  ldrh r2, [tos] @ Alten Inhalt laden
 8000e42:	8832      	ldrh	r2, [r6, #0]
  eors r2, r0    @ Hinzuverodern
 8000e44:	4042      	eors	r2, r0
  strh r2, [tos] @ Zurückschreiben
 8000e46:	8032      	strh	r2, [r6, #0]
  movs tos, r1
 8000e48:	000e      	movs	r6, r1
  bx lr
 8000e4a:	4770      	bx	lr

  @ For opcoding with one constant
  ldrh r2, [r0]
 8000e4c:	8802      	ldrh	r2, [r0, #0]
  eors r2, tos
 8000e4e:	4072      	eors	r2, r6
  strh r2, [r0]
 8000e50:	8002      	strh	r2, [r0, #0]
  bx lr
 8000e52:	4770      	bx	lr

  @ For opcoding with two constants
  ldrh r2, [r0]
 8000e54:	8802      	ldrh	r2, [r0, #0]
  eors r2, r1
 8000e56:	404a      	eors	r2, r1
  strh r2, [r0]
 8000e58:	8002      	strh	r2, [r0, #0]
  bx lr
 8000e5a:	4770      	bx	lr

08000e5c <Dictionary_219>:
 8000e5c:	08000e7c 	.word	0x08000e7c
 8000e60:	68050068 	.word	0x68050068
 8000e64:	40746962 	.word	0x40746962

08000e68 <Code_219>:

@ -----------------------------------------------------------------------------
  Wortbirne Flag_inline|Flag_opcodierbar_Spezialfall, "hbit@" @ ( x 16-addr -- Flag )  Check bits
  @ Prüft, ob Bits in der Speicherstelle gesetzt sind
@ -----------------------------------------------------------------------------
  ldm psp!, {r0}  @ Bitmaske holen
 8000e68:	cf01      	ldmia	r7!, {r0}
  ldrh tos, [tos] @ Speicherinhalt holen
 8000e6a:	8836      	ldrh	r6, [r6, #0]
  ands tos, r0    @ Bleibt nach AND etwas über ?
 8000e6c:	4006      	ands	r6, r0
  subs tos, #1
  sbcs tos, tos
  mvns tos, tos
  bx lr
  .else
  it ne
 8000e6e:	bf18      	it	ne
  movne tos, #-1 @ Bleibt etwas über, mache ein ordentliches true-Flag daraus.
 8000e70:	f04f 36ff 	movne.w	r6, #4294967295	; 0xffffffff
  bx lr
 8000e74:	4770      	bx	lr
  .endif

  @------------------------------------------------------------------------------
  @ Opcodable optimisations enter here.
  ldr r2, =0x8800 @ ldrh r0, [r0, #0] Opcode
 8000e76:	f44f 4208 	mov.w	r2, #34816	; 0x8800
  b.n bitfetch_opcoding
 8000e7a:	e78d      	b.n	8000d98 <bitfetch_opcoding>

08000e7c <Dictionary_220>:
 8000e7c:	08000ea4 	.word	0x08000ea4
 8000e80:	6305006d 	.word	0x6305006d
 8000e84:	21736962 	.word	0x21736962

08000e88 <Code_220>:

@ -----------------------------------------------------------------------------
  Wortbirne Flag_inline|Flag_opcodierbar_Speicherschreiben, "cbis!" @ ( x 8-addr -- )  Set bits
  @ Setzt die Bits in der Speicherstelle
@ -----------------------------------------------------------------------------
  ldm psp!, {r0, r1} @ X is the new TOS after the store completes.
 8000e88:	cf03      	ldmia	r7!, {r0, r1}
  ldrb r2, [tos] @ Alten Inhalt laden
 8000e8a:	7832      	ldrb	r2, [r6, #0]
  orrs r2, r0    @ Hinzuverodern
 8000e8c:	4302      	orrs	r2, r0
  strb r2, [tos] @ Zurückschreiben
 8000e8e:	7032      	strb	r2, [r6, #0]
  movs tos, r1
 8000e90:	000e      	movs	r6, r1
  bx lr
 8000e92:	4770      	bx	lr

  @ For opcoding with one constant
  ldrb r2, [r0]
 8000e94:	7802      	ldrb	r2, [r0, #0]
  orrs r2, tos
 8000e96:	4332      	orrs	r2, r6
  strb r2, [r0]
 8000e98:	7002      	strb	r2, [r0, #0]
  bx lr
 8000e9a:	4770      	bx	lr

  @ For opcoding with two constants
  ldrb r2, [r0]
 8000e9c:	7802      	ldrb	r2, [r0, #0]
  orrs r2, r1
 8000e9e:	430a      	orrs	r2, r1
  strb r2, [r0]
 8000ea0:	7002      	strb	r2, [r0, #0]
  bx lr
 8000ea2:	4770      	bx	lr

08000ea4 <Dictionary_221>:
 8000ea4:	08000ecc 	.word	0x08000ecc
 8000ea8:	6305006d 	.word	0x6305006d
 8000eac:	21636962 	.word	0x21636962

08000eb0 <Code_221>:

@ -----------------------------------------------------------------------------
  Wortbirne Flag_inline|Flag_opcodierbar_Speicherschreiben, "cbic!" @ ( x 8-addr -- )  Clear bits
  @ Setzt die Bits in der Speicherstelle
@ -----------------------------------------------------------------------------
  ldm psp!, {r0, r1} @ X is the new TOS after the store completes.
 8000eb0:	cf03      	ldmia	r7!, {r0, r1}
  ldrb r2, [tos] @ Alten Inhalt laden
 8000eb2:	7832      	ldrb	r2, [r6, #0]
  bics r2, r0    @ Hinzuverodern
 8000eb4:	4382      	bics	r2, r0
  strb r2, [tos] @ Zurückschreiben
 8000eb6:	7032      	strb	r2, [r6, #0]
  movs tos, r1
 8000eb8:	000e      	movs	r6, r1
  bx lr
 8000eba:	4770      	bx	lr

  @ For opcoding with one constant
  ldrb r2, [r0]
 8000ebc:	7802      	ldrb	r2, [r0, #0]
  bics r2, tos
 8000ebe:	43b2      	bics	r2, r6
  strb r2, [r0]
 8000ec0:	7002      	strb	r2, [r0, #0]
  bx lr
 8000ec2:	4770      	bx	lr

  @ For opcoding with two constants
  ldrb r2, [r0]
 8000ec4:	7802      	ldrb	r2, [r0, #0]
  bics r2, r1
 8000ec6:	438a      	bics	r2, r1
  strb r2, [r0]
 8000ec8:	7002      	strb	r2, [r0, #0]
  bx lr
 8000eca:	4770      	bx	lr

08000ecc <Dictionary_222>:
 8000ecc:	08000ef4 	.word	0x08000ef4
 8000ed0:	6305006d 	.word	0x6305006d
 8000ed4:	21726f78 	.word	0x21726f78

08000ed8 <Code_222>:

@ -----------------------------------------------------------------------------
  Wortbirne Flag_inline|Flag_opcodierbar_Speicherschreiben, "cxor!" @ ( x 8-addr -- )  Toggle bits
  @ Setzt die Bits in der Speicherstelle
@ -----------------------------------------------------------------------------
  ldm psp!, {r0, r1} @ X is the new TOS after the store completes.
 8000ed8:	cf03      	ldmia	r7!, {r0, r1}
  ldrb r2, [tos] @ Alten Inhalt laden
 8000eda:	7832      	ldrb	r2, [r6, #0]
  eors r2, r0     @ Hinzuverodern
 8000edc:	4042      	eors	r2, r0
  strb r2, [tos] @ Zurückschreiben
 8000ede:	7032      	strb	r2, [r6, #0]
  movs tos, r1
 8000ee0:	000e      	movs	r6, r1
  bx lr
 8000ee2:	4770      	bx	lr

  @ For opcoding with one constant
  ldrb r2, [r0]
 8000ee4:	7802      	ldrb	r2, [r0, #0]
  eors r2, tos
 8000ee6:	4072      	eors	r2, r6
  strb r2, [r0]
 8000ee8:	7002      	strb	r2, [r0, #0]
  bx lr
 8000eea:	4770      	bx	lr

  @ For opcoding with two constants
  ldrb r2, [r0]
 8000eec:	7802      	ldrb	r2, [r0, #0]
  eors r2, r1
 8000eee:	404a      	eors	r2, r1
  strb r2, [r0]
 8000ef0:	7002      	strb	r2, [r0, #0]
  bx lr
 8000ef2:	4770      	bx	lr

08000ef4 <Dictionary_223>:
 8000ef4:	08000f14 	.word	0x08000f14
 8000ef8:	63050068 	.word	0x63050068
 8000efc:	40746962 	.word	0x40746962

08000f00 <Code_223>:

@ -----------------------------------------------------------------------------
  Wortbirne Flag_inline|Flag_opcodierbar_Spezialfall, "cbit@" @ ( x 8-addr -- Flag )  Check bits
  @ Prüft, ob Bits in der Speicherstelle gesetzt sind
@ -----------------------------------------------------------------------------
  ldm psp!, {r0}  @ Bitmaske holen
 8000f00:	cf01      	ldmia	r7!, {r0}
  ldrb tos, [tos] @ Speicherinhalt holen
 8000f02:	7836      	ldrb	r6, [r6, #0]
  ands tos, r0    @ Bleibt nach AND etwas über ?
 8000f04:	4006      	ands	r6, r0
  subs tos, #1
  sbcs tos, tos
  mvns tos, tos
  bx lr
  .else
  it ne
 8000f06:	bf18      	it	ne
  movne tos, #-1 @ Bleibt etwas über, mache ein ordentliches true-Flag daraus.
 8000f08:	f04f 36ff 	movne.w	r6, #4294967295	; 0xffffffff
  bx lr
 8000f0c:	4770      	bx	lr
  .endif

  @------------------------------------------------------------------------------
  @ Opcodable optimisations enter here.
  ldr r2, =0x7800 @ ldrb r0, [r0, #0] Opcode
 8000f0e:	f44f 42f0 	mov.w	r2, #30720	; 0x7800
  b.n bitfetch_opcoding
 8000f12:	e741      	b.n	8000d98 <bitfetch_opcoding>

08000f14 <Dictionary_224>:
 8000f14:	08000f24 	.word	0x08000f24
 8000f18:	63050061 	.word	0x63050061
 8000f1c:	2b6c6c65 	.word	0x2b6c6c65

08000f20 <Code_224>:

@ -----------------------------------------------------------------------------
  Wortbirne Flag_inline|Flag_foldable_1, "cell+" @ ( x -- x+4 ) 
@ -----------------------------------------------------------------------------
  adds tos, #4
 8000f20:	3604      	adds	r6, #4
  bx lr
 8000f22:	4770      	bx	lr

08000f24 <Dictionary_225>:
 8000f24:	08000f5c 	.word	0x08000f5c
 8000f28:	63050061 	.word	0x63050061
 8000f2c:	736c6c65 	.word	0x736c6c65

08000f30 <Code_225>:

@ -----------------------------------------------------------------------------
  Wortbirne Flag_inline|Flag_foldable_1, "cells" @ ( x -- 4*x ) 
@ -----------------------------------------------------------------------------
  lsls tos, #2
 8000f30:	00b6      	lsls	r6, r6, #2
  bx lr
 8000f32:	4770      	bx	lr

08000f34 <hexflashstore_fehler>:
@ Porting: Rewrite this ! You need hflash! and - as far as possible - cflash!

@ for stm32wb55 we will never introduce 8 byte mode

hexflashstore_fehler:
	Fehler_Quit "Flash cannot be written twice"
 8000f34:	f000 fcea 	bl	800190c <dotgaensefuesschen>
 8000f38:	616c461e 	.word	0x616c461e
 8000f3c:	63206873 	.word	0x63206873
 8000f40:	6f6e6e61 	.word	0x6f6e6e61
 8000f44:	65622074 	.word	0x65622074
 8000f48:	69727720 	.word	0x69727720
 8000f4c:	6e657474 	.word	0x6e657474
 8000f50:	69777420 	.word	0x69777420
 8000f54:	6563      	.short	0x6563
 8000f56:	0a          	.byte	0x0a
 8000f57:	00          	.byte	0x00
 8000f58:	f002 bbfb 	b.w	8003752 <Code_926>

08000f5c <Dictionary_227>:
 8000f5c:	08001044 	.word	0x08001044
 8000f60:	31080000 	.word	0x31080000
 8000f64:	616c6636 	.word	0x616c6636
 8000f68:	6873      	.short	0x6873
 8000f6a:	21          	.byte	0x21
	...

08000f6c <Code_227>:

@ -----------------------------------------------------------------------------
	Wortbirne Flag_visible, "16flash!" @ Writes 16 Bytes at once into Flash.
hexflashstore: @ ( x1 x2 x3 x4 addr -- ) x1 contains LSB of those 128 bits.
@ -----------------------------------------------------------------------------
	push	{r0, r1, r2, r3, r4, r5, lr}
 8000f6c:	b53f      	push	{r0, r1, r2, r3, r4, r5, lr}
	@ Check if this goes into core - don't allow that ! No need to check for because of the second check.
	@ Perform write only if desired destination is in erased state...

	ldr	r0, =15
 8000f6e:	f04f 000f 	mov.w	r0, #15
	ands	r0, tos
 8000f72:	4030      	ands	r0, r6
	beq	1f
 8000f74:	d015      	beq.n	8000fa2 <Code_227+0x36>
	Fehler_Quit "16flash! needs 16-aligned address"
 8000f76:	f000 fcc9 	bl	800190c <dotgaensefuesschen>
 8000f7a:	3122      	.short	0x3122
 8000f7c:	616c6636 	.word	0x616c6636
 8000f80:	20216873 	.word	0x20216873
 8000f84:	6465656e 	.word	0x6465656e
 8000f88:	36312073 	.word	0x36312073
 8000f8c:	696c612d 	.word	0x696c612d
 8000f90:	64656e67 	.word	0x64656e67
 8000f94:	64646120 	.word	0x64646120
 8000f98:	73736572 	.word	0x73736572
 8000f9c:	0a          	.byte	0x0a
 8000f9d:	00          	.byte	0x00
 8000f9e:	f002 bbd8 	b.w	8003752 <Code_926>

1:	ldr	r0, [tos] 			@ tos contains address to write
 8000fa2:	6830      	ldr	r0, [r6, #0]
	adds	r0, r0, #1			@ quick check if memory contains $ffffffff
 8000fa4:	3001      	adds	r0, #1
	bne 	hexflashstore_fehler
 8000fa6:	d1c5      	bne.n	8000f34 <hexflashstore_fehler>

	ldr	r0, [tos, #4]			@ check next 4 bytes at offset 4
 8000fa8:	6870      	ldr	r0, [r6, #4]
	adds	r0, r0, #1
 8000faa:	3001      	adds	r0, #1
	bne	hexflashstore_fehler
 8000fac:	d1c2      	bne.n	8000f34 <hexflashstore_fehler>

	ldr	r0, [tos, #8]			@ check empty at offset 8 - for stm32wb55
 8000fae:	68b0      	ldr	r0, [r6, #8]
	adds	r0, r0, #1
 8000fb0:	3001      	adds	r0, #1
	bne	hexflashstore_fehler
 8000fb2:	d1bf      	bne.n	8000f34 <hexflashstore_fehler>

	ldr	r0, [tos, #12]
 8000fb4:	68f0      	ldr	r0, [r6, #12]
	adds	r0, r0, #1
 8000fb6:	3001      	adds	r0, #1
	bne	hexflashstore_fehler
 8000fb8:	d1bc      	bne.n	8000f34 <hexflashstore_fehler>
@	adds	tos, r2

	@ Bereit zum Schreiben !

	@ Unlock Flash Control
	ldr	r2, =Flash_KEYR
 8000fba:	4a14      	ldr	r2, [pc, #80]	; (800100c <Code_227+0xa0>)
	ldr	r3, =0x45670123
 8000fbc:	4b14      	ldr	r3, [pc, #80]	; (8001010 <Code_227+0xa4>)
	str	r3, [r2]
 8000fbe:	6013      	str	r3, [r2, #0]
	ldr	r3, =0xCDEF89AB
 8000fc0:	4b14      	ldr	r3, [pc, #80]	; (8001014 <Code_227+0xa8>)
	str 	r3, [r2]
 8000fc2:	6013      	str	r3, [r2, #0]

	@ erase previous errors
	ldr	r2, =Flash_SR
 8000fc4:	4a14      	ldr	r2, [pc, #80]	; (8001018 <Code_227+0xac>)
	ldr	r3, =1<<Flash_OPERR_Shift+1<<Flash_PROGERR_Shift+1<<Flash_WRPERR_Shift+1<<Flash_PGAERR_Shift+1<<Flash_SIZERR_Shift+1<<Flash_PGSERR_Shift+1<<Flash_MISERR_Shift+1<<Flash_FASTERR_Shift+1<<Flash_RDERR_Shift+1<<Flash_OPTVERR_Shift
 8000fc6:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
	str	r3, [r2]
 8000fca:	6013      	str	r3, [r2, #0]

	@ Enable write
	ldr	r2, =Flash_CR
 8000fcc:	4a13      	ldr	r2, [pc, #76]	; (800101c <Code_227+0xb0>)
	ldr	r3, =1<<Flash_PG_Shift+1<<Flash_EOPIE_Shift		@ Select Flash programming
 8000fce:	4b14      	ldr	r3, [pc, #80]	; (8001020 <Code_227+0xb4>)
	str	r3, [r2]
 8000fd0:	6013      	str	r3, [r2, #0]


	ldmia	psp!, {r3}			@ Fetch data to be written
 8000fd2:	cf08      	ldmia	r7!, {r3}
	ldmia	psp!, {r2}
 8000fd4:	cf04      	ldmia	r7!, {r2}
	ldmia	psp!, {r1}
 8000fd6:	cf02      	ldmia	r7!, {r1}
	ldmia	psp!, {r0}
 8000fd8:	cf01      	ldmia	r7!, {r0}

	stmia	tos!, {r0}
 8000fda:	c601      	stmia	r6!, {r0}
	stmia	tos!, {r1}
 8000fdc:	c602      	stmia	r6!, {r1}

	@ Wait for Flash BUSY Flag to be cleared
	bl	waitflashopcomplete
 8000fde:	f000 f821 	bl	8001024 <waitflashopcomplete>

	stmia	tos!, {r2}			@ program next 2 words
 8000fe2:	c604      	stmia	r6!, {r2}
	stmia	tos!, {r3}
 8000fe4:	c608      	stmia	r6!, {r3}
	@ wait again for flash op complete
	bl	waitflashopcomplete
 8000fe6:	f000 f81d 	bl	8001024 <waitflashopcomplete>

	@ turn off programming mode
	ldr	r2, =Flash_CR
 8000fea:	4a0c      	ldr	r2, [pc, #48]	; (800101c <Code_227+0xb0>)
	ldr	r0, [r2]
 8000fec:	6810      	ldr	r0, [r2, #0]
	ldr	r1, =1<<Flash_PG_Shift
 8000fee:	f04f 0101 	mov.w	r1, #1
	bics	r0, r0, r1
 8000ff2:	4388      	bics	r0, r1
	str	r0, [r2]
 8000ff4:	6010      	str	r0, [r2, #0]

	@ lock flash again
	ldr	r2, =Flash_CR
 8000ff6:	4a09      	ldr	r2, [pc, #36]	; (800101c <Code_227+0xb0>)
	ldr	r0, [r2]
 8000ff8:	6810      	ldr	r0, [r2, #0]
	ldr	r1, =1<<Flash_LOCK_Shift
 8000ffa:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
	orrs	r0, r0, r1
 8000ffe:	4308      	orrs	r0, r1
	str	r0, [r2]
 8001000:	6010      	str	r0, [r2, #0]

	drop					@ Forget destination address
 8001002:	cf40      	ldmia	r7!, {r6}
	pop	{r0, r1, r2, r3, r4, r5, pc}
 8001004:	bd3f      	pop	{r0, r1, r2, r3, r4, r5, pc}
 8001006:	0000      	.short	0x0000
    ldr tos, =struktur_bitfetch
 8001008:	08000d8a 	.word	0x08000d8a
	ldr	r2, =Flash_KEYR
 800100c:	58004008 	.word	0x58004008
	ldr	r3, =0x45670123
 8001010:	45670123 	.word	0x45670123
	ldr	r3, =0xCDEF89AB
 8001014:	cdef89ab 	.word	0xcdef89ab
	ldr	r2, =Flash_SR
 8001018:	58004010 	.word	0x58004010
	ldr	r2, =Flash_CR
 800101c:	58004014 	.word	0x58004014
	ldr	r3, =1<<Flash_PG_Shift+1<<Flash_EOPIE_Shift		@ Select Flash programming
 8001020:	01000001 	.word	0x01000001

08001024 <waitflashopcomplete>:

.ltorg

waitflashopcomplete:
	push	{r0, r1, r2}
 8001024:	b407      	push	{r0, r1, r2}
  	ldr	r2, =Flash_SR
 8001026:	4a28      	ldr	r2, [pc, #160]	; (80010c8 <Code_230+0x6e>)
	ldr	r1, =1<<Flash_BSY_Shift
 8001028:	f44f 3180 	mov.w	r1, #65536	; 0x10000
1:	ldr	r0, [r2]
 800102c:	6810      	ldr	r0, [r2, #0]
	tst	r0, r1
 800102e:	4208      	tst	r0, r1
	bne	1b				@ Wait for Flash BUSY Flag to be cleared
 8001030:	d1fc      	bne.n	800102c <waitflashopcomplete+0x8>
	ldr	r1, =1<<Flash_EOP_Shift
 8001032:	f04f 0101 	mov.w	r1, #1
2:	ldr	r0, [r2]
 8001036:	6810      	ldr	r0, [r2, #0]
	tst	r0, r1
 8001038:	4208      	tst	r0, r1
	beq	2b				@ Wait for EOP Flag to be Set
 800103a:	d0fc      	beq.n	8001036 <waitflashopcomplete+0x12>
	bics	r0, r0, r1
 800103c:	4388      	bics	r0, r1
	str	r0, [r2]			@ clear EOP
 800103e:	6010      	str	r0, [r2, #0]
	pop	{r0, r1, r2}
 8001040:	bc07      	pop	{r0, r1, r2}
	bx	LR
 8001042:	4770      	bx	lr

08001044 <Dictionary_230>:
 8001044:	080010e4 	.word	0x080010e4
 8001048:	660e0000 	.word	0x660e0000
 800104c:	6873616c 	.word	0x6873616c
 8001050:	65676170 	.word	0x65676170
 8001054:	73617265 	.word	0x73617265
 8001058:	65          	.byte	0x65
	...

0800105a <Code_230>:
@ -----------------------------------------------------------------------------
	Wortbirne Flag_visible, "flashpageerase" @ ( Addr -- )
	@ Löscht einen 4 KiB großen Flashblock  Deletes one 4 KiB Flash page
flashpageerase:
@ -----------------------------------------------------------------------------
	push	{r0, r1, r2, r3, lr}
 800105a:	b50f      	push	{r0, r1, r2, r3, lr}
	popda	r0				@ Adresse zum Löschen holen Fetch address to erase.
 800105c:	0030      	movs	r0, r6
 800105e:	cf40      	ldmia	r7!, {r6}

	@ Ist die gewünschte Stelle im Flash-Dictionary ? Außerhalb des Forth-Kerns ? Don't erase Forth core.
	ldr	r3, =Kernschutzadresse
 8001060:	4b1a      	ldr	r3, [pc, #104]	; (80010cc <Code_230+0x72>)
	cmp	r0, r3
 8001062:	4298      	cmp	r0, r3
	blo	2f
 8001064:	d32f      	bcc.n	80010c6 <Code_230+0x6c>

	@ Flash key register
	ldr	r2, =Flash_KEYR
 8001066:	4a1a      	ldr	r2, [pc, #104]	; (80010d0 <Code_230+0x76>)
	ldr	r3, =0x45670123
 8001068:	4b1a      	ldr	r3, [pc, #104]	; (80010d4 <Code_230+0x7a>)
	str	r3, [r2]
 800106a:	6013      	str	r3, [r2, #0]
	ldr	r3, =0xCDEF89AB
 800106c:	4b1a      	ldr	r3, [pc, #104]	; (80010d8 <Code_230+0x7e>)
	str	r3, [r2]
 800106e:	6013      	str	r3, [r2, #0]

	@ STM32WB55 has 4 KiB pages and 1 MiB Flash, but only one bank -> 256 pages, 8 bits
	@ page size 4096 byte, 12 bits

	@ Set page to erase
	ldr	r1, =12				@ page size 12 bits
 8001070:	f04f 010c 	mov.w	r1, #12
	lsrs	r0, r0, r1			@ shift down page size
 8001074:	40c8      	lsrs	r0, r1
	ldr	r1, =0xFF			@ bitWidth 8
 8001076:	f04f 01ff 	mov.w	r1, #255	; 0xff
	ands	r0, r0, r1			@ mask page number
 800107a:	4008      	ands	r0, r1
	ldr	r1, =Flash_PNB_Shift
 800107c:	f04f 0103 	mov.w	r1, #3
	lsls	r0, r0, r1			@ Page number selection
 8001080:	4088      	lsls	r0, r1
	ldr	r1, =1<<Flash_PER_Shift 	@ Set Page erase
 8001082:	f04f 0102 	mov.w	r1, #2
	orrs	r0, r0, r1
 8001086:	4308      	orrs	r0, r1
	ldr	r2, =Flash_CR
 8001088:	4a14      	ldr	r2, [pc, #80]	; (80010dc <Code_230+0x82>)
	str	r0, [r2]
 800108a:	6010      	str	r0, [r2, #0]

	@ start erasing
	ldr	r1, =1<<Flash_STRT_Shift	@ Set start bit
 800108c:	f44f 3180 	mov.w	r1, #65536	; 0x10000
	orrs	r0, r0, r1
 8001090:	4308      	orrs	r0, r1
	str	r0, [r2]			@ erase page
 8001092:	6010      	str	r0, [r2, #0]

	@ Wait for Flash BUSY Flag to be cleared
	ldr	r2, =Flash_SR
 8001094:	4a0c      	ldr	r2, [pc, #48]	; (80010c8 <Code_230+0x6e>)
1:    	ldr	r3, [r2]
 8001096:	6813      	ldr	r3, [r2, #0]
	ldr	r0, =1<<Flash_BSY_Shift
 8001098:	f44f 3080 	mov.w	r0, #65536	; 0x10000
	ands	r0, r0, r3
 800109c:	4018      	ands	r0, r3
	bne	1b
 800109e:	d1fa      	bne.n	8001096 <Code_230+0x3c>

	@ Lock Flash after finishing this
	ldr	r2, =Flash_CR
 80010a0:	4a0e      	ldr	r2, [pc, #56]	; (80010dc <Code_230+0x82>)
	ldr	r0, [r2]
 80010a2:	6810      	ldr	r0, [r2, #0]
	ldr	r1, =1<<Flash_LOCK_Shift
 80010a4:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
	orrs	r0, r0, r1
 80010a8:	4308      	orrs	r0, r1
	str	r0, [r2]
 80010aa:	6010      	str	r0, [r2, #0]

	@ clear cache
	@ save old cache settings
	ldr	r2, =Flash_ACR
 80010ac:	4a0c      	ldr	r2, [pc, #48]	; (80010e0 <Code_230+0x86>)
	ldr	r1, [r2]
 80010ae:	6811      	ldr	r1, [r2, #0]
	push	{r1}
 80010b0:	b402      	push	{r1}

	@ turn cache off
	ldr	r0, =(1<<Flash_ICEN_Shift) | (1<<Flash_DCEN_Shift)
 80010b2:	f44f 60c0 	mov.w	r0, #1536	; 0x600
	bics	r1, r1, r0
 80010b6:	4381      	bics	r1, r0
	str	r1, [r2]
 80010b8:	6011      	str	r1, [r2, #0]

	@ reset cache
	ldr	r0, =(1<<Flash_ICRST_Shift) | (1<<Flash_DCRST_Shift)
 80010ba:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
	orrs	r1, r1, r0
 80010be:	4301      	orrs	r1, r0
	str	r1, [r2]
 80010c0:	6011      	str	r1, [r2, #0]

	@ restore flash settings
	pop	{r1}
 80010c2:	bc02      	pop	{r1}
	str	r1, [r2]
 80010c4:	6011      	str	r1, [r2, #0]

2:	pop	{r0, r1, r2, r3, pc}
 80010c6:	bd0f      	pop	{r0, r1, r2, r3, pc}
  	ldr	r2, =Flash_SR
 80010c8:	58004010 	.word	0x58004010
	ldr	r3, =Kernschutzadresse
 80010cc:	08010000 	.word	0x08010000
	ldr	r2, =Flash_KEYR
 80010d0:	58004008 	.word	0x58004008
	ldr	r3, =0x45670123
 80010d4:	45670123 	.word	0x45670123
	ldr	r3, =0xCDEF89AB
 80010d8:	cdef89ab 	.word	0xcdef89ab
	ldr	r2, =Flash_CR
 80010dc:	58004014 	.word	0x58004014
	ldr	r2, =Flash_ACR
 80010e0:	58004000 	.word	0x58004000

080010e4 <Dictionary_232>:
 80010e4:	08001162 	.word	0x08001162
 80010e8:	650a0000 	.word	0x650a0000
 80010ec:	65736172 	.word	0x65736172
 80010f0:	73616c66 	.word	0x73616c66
 80010f4:	68          	.byte	0x68
	...

080010f6 <Code_232>:

@ -----------------------------------------------------------------------------
	Wortbirne Flag_visible, "eraseflash" @ ( -- )
	@ Löscht den gesamten Inhalt des Flashdictionaries.
@ -----------------------------------------------------------------------------
        ldr	r0, =FlashDictionaryAnfang
 80010f6:	4822      	ldr	r0, [pc, #136]	; (8001180 <Code_240+0x8>)

080010f8 <eraseflash_intern>:
eraseflash_intern:
	cpsid	i
 80010f8:	b672      	cpsid	i
	ldr	r1, =FlashDictionaryEnde
 80010fa:	4922      	ldr	r1, [pc, #136]	; (8001184 <Code_240+0xc>)
	ldr	r2, =0xFFFF
 80010fc:	f64f 72ff 	movw	r2, #65535	; 0xffff

1:      ldrh	r3, [r0]
 8001100:	8803      	ldrh	r3, [r0, #0]
	cmp	r3, r2
 8001102:	4293      	cmp	r3, r2
	beq	2f
 8001104:	d01c      	beq.n	8001140 <eraseflash_intern+0x48>
	pushda	r0
 8001106:	f847 6d04 	str.w	r6, [r7, #-4]!
 800110a:	0006      	movs	r6, r0
	dup
 800110c:	f847 6d04 	str.w	r6, [r7, #-4]!
	write	"Erase block at  "
 8001110:	f000 fbfc 	bl	800190c <dotgaensefuesschen>
 8001114:	61724510 	.word	0x61724510
 8001118:	62206573 	.word	0x62206573
 800111c:	6b636f6c 	.word	0x6b636f6c
 8001120:	20746120 	.word	0x20746120
 8001124:	20          	.byte	0x20
 8001125:	00          	.byte	0x00
	bl	hexdot
 8001126:	f000 fc59 	bl	80019dc <Code_377>
	writeln " from Flash"
 800112a:	f000 fbef 	bl	800190c <dotgaensefuesschen>
 800112e:	200c      	.short	0x200c
 8001130:	6d6f7266 	.word	0x6d6f7266
 8001134:	616c4620 	.word	0x616c4620
 8001138:	6873      	.short	0x6873
 800113a:	0a          	.byte	0x0a
 800113b:	00          	.byte	0x00
	bl	flashpageerase
 800113c:	f7ff ff8d 	bl	800105a <Code_230>
2:      adds	r0, r0, #2
 8001140:	3002      	adds	r0, #2
	cmp	r0, r1
 8001142:	4288      	cmp	r0, r1
	bne	1b
 8001144:	d1dc      	bne.n	8001100 <eraseflash_intern+0x8>
	writeln	"Finished. Reset !"
 8001146:	f000 fbe1 	bl	800190c <dotgaensefuesschen>
 800114a:	4612      	.short	0x4612
 800114c:	73696e69 	.word	0x73696e69
 8001150:	2e646568 	.word	0x2e646568
 8001154:	73655220 	.word	0x73655220
 8001158:	21207465 	.word	0x21207465
 800115c:	0a          	.byte	0x0a
 800115d:	00          	.byte	0x00
	bl	Restart
 800115e:	f002 fb84 	bl	800386a <Code_939>

08001162 <Dictionary_240>:
 8001162:	1188      	.short	0x1188
 8001164:	00000800 	.word	0x00000800
 8001168:	6172650e 	.word	0x6172650e
 800116c:	6c666573 	.word	0x6c666573
 8001170:	66687361 	.word	0x66687361
 8001174:	6f72      	.short	0x6f72
 8001176:	6d          	.byte	0x6d
	...

08001178 <Code_240>:

@ -----------------------------------------------------------------------------
	Wortbirne Flag_visible, "eraseflashfrom" @ ( Addr -- )
	@ Beginnt an der angegebenen Adresse mit dem Löschen des Dictionaries.
@ -----------------------------------------------------------------------------
	popda	r0
 8001178:	0030      	movs	r0, r6
 800117a:	cf40      	ldmia	r7!, {r6}
	b.n	eraseflash_intern
 800117c:	e7bc      	b.n	80010f8 <eraseflash_intern>
 800117e:	0000      	.short	0x0000
        ldr	r0, =FlashDictionaryAnfang
 8001180:	08010000 	.word	0x08010000
	ldr	r1, =FlashDictionaryEnde
 8001184:	080c0000 	.word	0x080c0000

08001188 <Dictionary_242>:
 8001188:	080011aa 	.word	0x080011aa
 800118c:	69090000 	.word	0x69090000
 8001190:	6674696e 	.word	0x6674696e
 8001194:	6873616c 	.word	0x6873616c

08001198 <Code_242>:
@ -----------------------------------------------------------------------------
  Wortbirne Flag_visible, "initflash" @ Zu Beginn und in Quit !
initflash: @ ( -- ) Löscht alle Einträge in der Sammeldatei
                     @ Clear the table at the beginning and in quit
@ -----------------------------------------------------------------------------
  ldr r0, =Sammeltabelle
 8001198:	4853      	ldr	r0, [pc, #332]	; (80012e8 <flushblock+0x2a>)
  ldr r1, =20 * Sammelstellen
 800119a:	f44f 7120 	mov.w	r1, #640	; 0x280
  movs r2, #0
 800119e:	2200      	movs	r2, #0

1:strb r2, [r0]
 80011a0:	7002      	strb	r2, [r0, #0]
  adds r0, #1
 80011a2:	3001      	adds	r0, #1
  subs r1, #1
 80011a4:	3901      	subs	r1, #1
  bne 1b
 80011a6:	d1fb      	bne.n	80011a0 <Code_242+0x8>

  bx lr
 80011a8:	4770      	bx	lr

080011aa <Dictionary_243>:
 80011aa:	1290      	.short	0x1290
 80011ac:	00000800 	.word	0x00000800
 80011b0:	6c666807 	.word	0x6c666807
 80011b4:	21687361 	.word	0x21687361

080011b8 <Code_243>:

  @ Tabellenaufbau:
  @ Adresse, auf 16 gerade, mit der Zahl der bereits geschriebenen Stellen in den Low-Bits.
  @ 16 Bytes $FF bzw. die geschriebenen Stellen.

  push {r4, r5, lr}
 80011b8:	b530      	push	{r4, r5, lr}

  @ r0:    @ Tabelleneintragsstartadresse
  @ r1:    @ Manchmal Zähler fürs durchgucken der Tabelle
  popda r2 @ Adresse
 80011ba:	0032      	movs	r2, r6
 80011bc:	cf40      	ldmia	r7!, {r6}
  @ TOS:   @ Inhalt

  @ Prüfe, ob die Adresse gerade ist
  lsrs r0, r2, #1
 80011be:	0850      	lsrs	r0, r2, #1
  bcc 1f
 80011c0:	d313      	bcc.n	80011ea <Code_243+0x32>
    Fehler_Quit "hflash! needs even addresses."
 80011c2:	f000 fba3 	bl	800190c <dotgaensefuesschen>
 80011c6:	681e      	.short	0x681e
 80011c8:	73616c66 	.word	0x73616c66
 80011cc:	6e202168 	.word	0x6e202168
 80011d0:	73646565 	.word	0x73646565
 80011d4:	65766520 	.word	0x65766520
 80011d8:	6461206e 	.word	0x6461206e
 80011dc:	73657264 	.word	0x73657264
 80011e0:	2e736573 	.word	0x2e736573
 80011e4:	0a          	.byte	0x0a
 80011e5:	00          	.byte	0x00
 80011e6:	f002 bab4 	b.w	8003752 <Code_926>
1:

  @ Check if address is outside of Forth core
  ldr r3, =Kernschutzadresse
 80011ea:	4b40      	ldr	r3, [pc, #256]	; (80012ec <flushblock+0x2e>)
  cmp r2, r3
 80011ec:	429a      	cmp	r2, r3
  bhs 2f
 80011ee:	d210      	bcs.n	8001212 <Code_243+0x5a>

  Fehler_Quit "Cannot write into core !"
 80011f0:	f000 fb8c 	bl	800190c <dotgaensefuesschen>
 80011f4:	6e614319 	.word	0x6e614319
 80011f8:	20746f6e 	.word	0x20746f6e
 80011fc:	74697277 	.word	0x74697277
 8001200:	6e692065 	.word	0x6e692065
 8001204:	63206f74 	.word	0x63206f74
 8001208:	2065726f 	.word	0x2065726f
 800120c:	0a21      	.short	0x0a21
 800120e:	f002 baa0 	b.w	8003752 <Code_926>
2:

  @ Suche nach einem Eintrag, der die Adresse ohne $F trägt !
  @ Search if the 16-Byte truncated address is already buffered in the table !

  lsrs r3, r2, #4 @ Prepare address for crawling by removing low bits
 8001212:	0913      	lsrs	r3, r2, #4

  ldr r0, =Sammeltabelle
 8001214:	4834      	ldr	r0, [pc, #208]	; (80012e8 <flushblock+0x2a>)
  movs r1, #Sammelstellen
 8001216:	2120      	movs	r1, #32

2:ldr r4, [r0]
 8001218:	6804      	ldr	r4, [r0, #0]
  lsrs r4, #4 @ Prepare address by removing low bits
 800121a:	0924      	lsrs	r4, r4, #4

  cmp r4, r3 @ Ist das passende Päärchen gefunden ?
 800121c:	429c      	cmp	r4, r3
  beq.n hflashstoreemulation_gefunden @ Found the pair ?
 800121e:	d026      	beq.n	800126e <hflashstoreemulation_gefunden>

  @ Ansonsten weitersuchen:
  @ Continue searching the table
  adds r0, #20
 8001220:	3014      	adds	r0, #20
  subs r1, #1
 8001222:	3901      	subs	r1, #1
  bne 2b
 8001224:	d1f8      	bne.n	8001218 <Code_243+0x60>

  @ Nicht gefunden: Suche eine leere Stelle in der Tabelle !
  @ Not found. Search for an empty place in table to fill this request in

  ldr r0, =Sammeltabelle
 8001226:	4830      	ldr	r0, [pc, #192]	; (80012e8 <flushblock+0x2a>)
  movs r1, #Sammelstellen
 8001228:	2120      	movs	r1, #32

3:ldr r4, [r0]
 800122a:	6804      	ldr	r4, [r0, #0]
  cmp r4, #0
 800122c:	2c00      	cmp	r4, #0
  @ Ist eine leere Stelle aufgetaucht ? Is this table place empty ?
  beq.n hflashstoreemulation_leerestelle
 800122e:	d017      	beq.n	8001260 <hflashstoreemulation_leerestelle>

  @ Ansonsten weitersuchen:
  @ Continue searching the table
  adds r0, #20
 8001230:	3014      	adds	r0, #20
  subs r1, #1
 8001232:	3901      	subs	r1, #1
  bne 3b
 8001234:	d1f9      	bne.n	800122a <Code_243+0x72>

  Fehler_Quit "Too many scattered Flash writes."
 8001236:	f000 fb69 	bl	800190c <dotgaensefuesschen>
 800123a:	5421      	.short	0x5421
 800123c:	6d206f6f 	.word	0x6d206f6f
 8001240:	20796e61 	.word	0x20796e61
 8001244:	74616373 	.word	0x74616373
 8001248:	65726574 	.word	0x65726574
 800124c:	6c462064 	.word	0x6c462064
 8001250:	20687361 	.word	0x20687361
 8001254:	74697277 	.word	0x74697277
 8001258:	0a2e7365 	.word	0x0a2e7365
 800125c:	f002 ba79 	b.w	8003752 <Code_926>

08001260 <hflashstoreemulation_leerestelle>:
  @writeln "Leerstelle präparieren"
  @ r0 zeigt gerade auf die Stelle, wo ich meinen Wunsch einfügen kann:
  @ r0 is pointer into an empty table place to fill in now:

  @ Set table entry properly
  lsls r3, #4  @ Address has just been shifted right before
 8001260:	011b      	lsls	r3, r3, #4
  str r3, [r0] @ Address of new block
 8001262:	6003      	str	r3, [r0, #0]

  subs r1, r1, #1 @ Prepare constant -1
 8001264:	3901      	subs	r1, #1
  str r1, [r0, #4]
 8001266:	6041      	str	r1, [r0, #4]
  str r1, [r0, #8]
 8001268:	6081      	str	r1, [r0, #8]
  str r1, [r0, #12]
 800126a:	60c1      	str	r1, [r0, #12]
  str r1, [r0, #16]
 800126c:	6101      	str	r1, [r0, #16]

0800126e <hflashstoreemulation_gefunden>:
  @ Zieladresse in r2, Inhalt in TOS.
  @ r1 wird nicht mehr benötigt.

  @ Insert the new entry into the table
  @ Prepare low bits of address as offset into table:
  movs r1, #15
 800126e:	210f      	movs	r1, #15
  ands r1, r2
 8001270:	4011      	ands	r1, r2
  adds r1, #4 @ So skip table entry header
 8001272:	3104      	adds	r1, #4
  strh tos, [r0, r1]  @ Store desired value into table
 8001274:	5246      	strh	r6, [r0, r1]
  drop
 8001276:	cf40      	ldmia	r7!, {r6}

  @ Increment number of stores to this table
  ldr r1, [r0] @ Fetch old count
 8001278:	6801      	ldr	r1, [r0, #0]
  adds r1, #1  @ Increment count of writes
 800127a:	3101      	adds	r1, #1
  str r1, [r0] @ Store new count
 800127c:	6001      	str	r1, [r0, #0]

  @ Enough writes to fill a 16 byte block ?
  movs r2, #15
 800127e:	220f      	movs	r2, #15
  ands r1, r2
 8001280:	4011      	ands	r1, r2

@  pushda r1
@  bl hexdot  

  cmp r1, #8 @ Is this the eigth write to this table ?
 8001282:	2908      	cmp	r1, #8
  bne.n hflashstoreemulation_fertig
 8001284:	d103      	bne.n	800128e <hflashstoreemulation_fertig>

    @ A 16 Byte block is finished ! Let's write !
    bl flushblock
 8001286:	f000 f81a 	bl	80012be <flushblock>
    bl hexflashstore
 800128a:	f7ff fe6f 	bl	8000f6c <Code_227>

0800128e <hflashstoreemulation_fertig>:

hflashstoreemulation_fertig:
  pop {r4, r5, pc}
 800128e:	bd30      	pop	{r4, r5, pc}

08001290 <Dictionary_249>:
 8001290:	080012f0 	.word	0x080012f0
 8001294:	660a0000 	.word	0x660a0000
 8001298:	6873756c 	.word	0x6873756c
 800129c:	73616c66 	.word	0x73616c66
 80012a0:	68          	.byte	0x68
	...

080012a2 <Code_249>:

@ -----------------------------------------------------------------------------
  Wortbirne Flag_visible, "flushflash" @ Flushes all remaining table entries
flushflash:
@ -----------------------------------------------------------------------------
  push {lr}
 80012a2:	b500      	push	{lr}

  ldr r0, =Sammeltabelle
 80012a4:	4810      	ldr	r0, [pc, #64]	; (80012e8 <flushblock+0x2a>)
  movs r1, #Sammelstellen
 80012a6:	2120      	movs	r1, #32

2:ldr r2, [r0] @ Does this table entry contain something ?
 80012a8:	6802      	ldr	r2, [r0, #0]
  cmp r2, #0
 80012aa:	2a00      	cmp	r2, #0
  beq 3f
 80012ac:	d003      	beq.n	80012b6 <Code_249+0x14>
    bl flushblock
 80012ae:	f000 f806 	bl	80012be <flushblock>
    bl hexflashstore
 80012b2:	f7ff fe5b 	bl	8000f6c <Code_227>

3:adds r0, #20
 80012b6:	3014      	adds	r0, #20
  subs r1, #1
 80012b8:	3901      	subs	r1, #1
  bne 2b
 80012ba:	d1f5      	bne.n	80012a8 <Code_249+0x6>

  pop {pc}
 80012bc:	bd00      	pop	{pc}

080012be <flushblock>:

@ -----------------------------------------------------------------------------
flushblock: @ Put a table entry which address is in r0 on data stack for later 16flash!
@ -----------------------------------------------------------------------------
  pushdatos
 80012be:	f847 6d04 	str.w	r6, [r7, #-4]!
  ldr tos, [r0, #4]
 80012c2:	6846      	ldr	r6, [r0, #4]
  pushdatos
 80012c4:	f847 6d04 	str.w	r6, [r7, #-4]!
  ldr tos, [r0, #8]
 80012c8:	6886      	ldr	r6, [r0, #8]
  pushdatos
 80012ca:	f847 6d04 	str.w	r6, [r7, #-4]!
  ldr tos, [r0, #12]
 80012ce:	68c6      	ldr	r6, [r0, #12]
  pushdatos
 80012d0:	f847 6d04 	str.w	r6, [r7, #-4]!
  ldr tos, [r0, #16]
 80012d4:	6906      	ldr	r6, [r0, #16]

  pushdatos             @ Place address on stack
 80012d6:	f847 6d04 	str.w	r6, [r7, #-4]!
  movs tos, #15
 80012da:	260f      	movs	r6, #15
  mvns tos, tos
 80012dc:	43f6      	mvns	r6, r6
  ldr r2, [r0] @ Load the address of the table entry
 80012de:	6802      	ldr	r2, [r0, #0]
  ands tos, r2 @ Cut off the lowest four bits that contain the write count
 80012e0:	4016      	ands	r6, r2

  movs r2, #0  @ Clear table entry
 80012e2:	2200      	movs	r2, #0
  str r2, [r0] 
 80012e4:	6002      	str	r2, [r0, #0]
  bx lr
 80012e6:	4770      	bx	lr
  ldr r0, =Sammeltabelle
 80012e8:	20001430 	.word	0x20001430
  ldr r3, =Kernschutzadresse
 80012ec:	08010000 	.word	0x08010000

080012f0 <Dictionary_255>:
 80012f0:	08001306 	.word	0x08001306
 80012f4:	2b010069 	.word	0x2b010069

080012f8 <Code_255>:

@ -----------------------------------------------------------------------------
  Wortbirne Flag_inline|Flag_opcodierbar_Plusminus, "+" @ ( x1 x2 -- x1+x2 )
                      @ Adds x1 and x2.
@ -----------------------------------------------------------------------------
  ldm psp!, {r0}
 80012f8:	cf01      	ldmia	r7!, {r0}
  adds tos, r0
 80012fa:	1836      	adds	r6, r6, r0
  bx lr
 80012fc:	4770      	bx	lr
  adds tos, r0 @ Opcode for use with literal in register
 80012fe:	1836      	adds	r6, r6, r0
  adds tos, #0 @ Opcode for use with byte literal
 8001300:	3600      	adds	r6, #0
 8001302:	0600      	.short	0x0600
 8001304:	f116      	.short	0xf116

08001306 <Dictionary_256>:
 8001306:	131c      	.short	0x131c
 8001308:	00690800 	.word	0x00690800
 800130c:	2d01      	.short	0x2d01

0800130e <Code_256>:

@ -----------------------------------------------------------------------------
  Wortbirne Flag_inline|Flag_opcodierbar_Plusminus, "-" @ ( x1 x2 -- x1-x2 )
                      @ Subtracts x2 from x1.
@ -----------------------------------------------------------------------------
  ldm psp!, {r0}
 800130e:	cf01      	ldmia	r7!, {r0}
  subs tos, r0, tos
 8001310:	1b86      	subs	r6, r0, r6
  bx lr
 8001312:	4770      	bx	lr
  subs tos, r0 @ Opcode for use with literal in register
 8001314:	1a36      	subs	r6, r6, r0
  subs tos, #0 @ Opcode for use with byte literal
 8001316:	3e00      	subs	r6, #0
 8001318:	f1b60600 	.word	0xf1b60600

0800131c <Dictionary_257>:
 800131c:	0800132a 	.word	0x0800132a
 8001320:	31020061 	.word	0x31020061
 8001324:	2d          	.byte	0x2d
	...

08001326 <Code_257>:

@ -----------------------------------------------------------------------------
  Wortbirne Flag_foldable_1|Flag_inline, "1-" @ ( u -- u-1 )
                      @ Subtracts one from the cell on top of the stack.
@ -----------------------------------------------------------------------------
  subs tos, #1
 8001326:	3e01      	subs	r6, #1
  bx lr
 8001328:	4770      	bx	lr

0800132a <Dictionary_258>:
 800132a:	1338      	.short	0x1338
 800132c:	00610800 	.word	0x00610800
 8001330:	3102      	.short	0x3102
 8001332:	2b          	.byte	0x2b
	...

08001334 <Code_258>:

@ -----------------------------------------------------------------------------
  Wortbirne Flag_foldable_1|Flag_inline, "1+" @ ( u -- u+1 )
                       @ Adds one to the cell on top of the stack.
@ -----------------------------------------------------------------------------
  adds tos, #1
 8001334:	3601      	adds	r6, #1
  bx lr
 8001336:	4770      	bx	lr

08001338 <Dictionary_259>:
 8001338:	08001346 	.word	0x08001346
 800133c:	32020061 	.word	0x32020061
 8001340:	2d          	.byte	0x2d
	...

08001342 <Code_259>:

@ -----------------------------------------------------------------------------
  Wortbirne Flag_foldable_1|Flag_inline, "2-" @ ( u -- u-1 )
                      @ Subtracts two from the cell on top of the stack.
@ -----------------------------------------------------------------------------
  subs tos, #2
 8001342:	3e02      	subs	r6, #2
  bx lr
 8001344:	4770      	bx	lr

08001346 <Dictionary_260>:
 8001346:	1354      	.short	0x1354
 8001348:	00610800 	.word	0x00610800
 800134c:	3202      	.short	0x3202
 800134e:	2b          	.byte	0x2b
	...

08001350 <Code_260>:

@ -----------------------------------------------------------------------------
  Wortbirne Flag_foldable_1|Flag_inline, "2+" @ ( u -- u+1 )
                       @ Adds two to the cell on top of the stack.
@ -----------------------------------------------------------------------------
  adds tos, #2
 8001350:	3602      	adds	r6, #2
  bx lr
 8001352:	4770      	bx	lr

08001354 <Dictionary_261>:
 8001354:	08001366 	.word	0x08001366
 8001358:	6e060061 	.word	0x6e060061
 800135c:	74616765 	.word	0x74616765
 8001360:	65          	.byte	0x65
	...

08001362 <Code_261>:

@ -----------------------------------------------------------------------------
  Wortbirne Flag_foldable_1|Flag_inline, "negate" @ ( n1 -- -n1 )
@ -----------------------------------------------------------------------------
  rsbs tos, tos, #0
 8001362:	4276      	negs	r6, r6
  bx lr
 8001364:	4770      	bx	lr

08001366 <Dictionary_262>:
 8001366:	1378      	.short	0x1378
 8001368:	00610800 	.word	0x00610800
 800136c:	73626103 	.word	0x73626103

08001370 <Code_262>:

@ -----------------------------------------------------------------------------
  Wortbirne Flag_foldable_1|Flag_inline, "abs" @ ( n1 -- |n1| )
@ -----------------------------------------------------------------------------
  asrs r0, tos, #31 @ Turn MSB into 0xffffffff or 0x00000000
 8001370:	17f0      	asrs	r0, r6, #31
  adds tos, r0
 8001372:	1836      	adds	r6, r6, r0
  eors tos, r0
 8001374:	4046      	eors	r6, r0
  bx lr
 8001376:	4770      	bx	lr

08001378 <Dictionary_263>:
 8001378:	08001396 	.word	0x08001396
 800137c:	75050042 	.word	0x75050042
 8001380:	646f6d2f 	.word	0x646f6d2f

08001384 <Code_263>:
  pushda r3
  bx lr

  .else

  ldm psp!, {r0}       @ Get u1 into a register
 8001384:	cf01      	ldmia	r7!, {r0}
  movs r1, tos        @ Back up the divisor in X.
 8001386:	0031      	movs	r1, r6
  udiv tos, r0, tos  @ Divide: quotient in TOS.
 8001388:	fbb0 f6f6 	udiv	r6, r0, r6
  muls r1, tos, r1    @ Un-divide to compute remainder.
 800138c:	4371      	muls	r1, r6
  subs r0, r1          @ Compute remainder.
 800138e:	1a40      	subs	r0, r0, r1
  subs psp, #4
 8001390:	3f04      	subs	r7, #4
  str r0, [psp]
 8001392:	6038      	str	r0, [r7, #0]
  bx lr
 8001394:	4770      	bx	lr

08001396 <Dictionary_264>:
 8001396:	13b4      	.short	0x13b4
 8001398:	00420800 	.word	0x00420800
 800139c:	6f6d2f04 	.word	0x6f6d2f04
 80013a0:	64          	.byte	0x64
	...

080013a2 <Code_264>:
      bl u_divmod
      pop {pc}

  .else

  ldm psp!, {r0}       @ Get u1 into a register
 80013a2:	cf01      	ldmia	r7!, {r0}
  movs r1, tos       @ Back up the divisor in X.
 80013a4:	0031      	movs	r1, r6
  sdiv tos, r0, tos @ Divide: quotient in TOS.
 80013a6:	fb90 f6f6 	sdiv	r6, r0, r6
  muls r1, tos, r1   @ Un-divide to compute remainder.
 80013aa:	4371      	muls	r1, r6
  subs r0, r1         @ Compute remainder.
 80013ac:	1a40      	subs	r0, r0, r1
  subs psp, #4
 80013ae:	3f04      	subs	r7, #4
  str r0, [psp]
 80013b0:	6038      	str	r0, [r7, #0]
  bx lr
 80013b2:	4770      	bx	lr

080013b4 <Dictionary_265>:
 80013b4:	080013c8 	.word	0x080013c8
 80013b8:	6d030042 	.word	0x6d030042
 80013bc:	646f      	.short	0x646f

080013be <Code_265>:
  .endif

@ -----------------------------------------------------------------------------
  Wortbirne Flag_foldable_2, "mod" @ ( n1 n2 -- rem )
@ -----------------------------------------------------------------------------
  push {lr}
 80013be:	b500      	push	{lr}
  bl divmod
 80013c0:	f7ff ffef 	bl	80013a2 <Code_264>
  drop
 80013c4:	cf40      	ldmia	r7!, {r6}
  pop {pc}
 80013c6:	bd00      	pop	{pc}

080013c8 <Dictionary_267>:
 80013c8:	080013d8 	.word	0x080013d8
 80013cc:	2f010062 	.word	0x2f010062

080013d0 <Code_267>:

  .else
@ -----------------------------------------------------------------------------
  Wortbirne Flag_foldable_2|Flag_inline, "/" @ ( n1 n2 -- n1/n2 )
@ -----------------------------------------------------------------------------
  ldm psp!, {r0}       @ Get n1 into a register
 80013d0:	cf01      	ldmia	r7!, {r0}
  sdiv tos, r0, tos    @ Divide !
 80013d2:	fb90 f6f6 	sdiv	r6, r0, r6
  bx lr
 80013d6:	4770      	bx	lr

080013d8 <Dictionary_268>:
 80013d8:	080013e8 	.word	0x080013e8
 80013dc:	2a01006a 	.word	0x2a01006a

080013e0 <Code_268>:
  .endif

@ -----------------------------------------------------------------------------
  Wortbirne Flag_inline|Flag_opcodierbar_Rechenlogik, "*" @ ( u1|n1 u2|n2 -- u3|n3 )
@ -----------------------------------------------------------------------------
  ldm psp!, {r0}    @ Get u1|n1 into a register.
 80013e0:	cf01      	ldmia	r7!, {r0}
  muls tos, r0      @ Multiply!
 80013e2:	4346      	muls	r6, r0
  bx lr
 80013e4:	4770      	bx	lr
  muls tos, r0      @ Opcode for use with literal in register
 80013e6:	4346      	muls	r6, r0

080013e8 <Dictionary_269>:
 80013e8:	080013f6 	.word	0x080013f6
 80013ec:	32020061 	.word	0x32020061
 80013f0:	2a          	.byte	0x2a
	...

080013f2 <Code_269>:

@ -----------------------------------------------------------------------------
  Wortbirne Flag_foldable_1|Flag_inline, "2*" @ ( n -- n*2 )
@ -----------------------------------------------------------------------------
  lsls tos, #1
 80013f2:	0076      	lsls	r6, r6, #1
  bx lr
 80013f4:	4770      	bx	lr

080013f6 <Dictionary_270>:
 80013f6:	1404      	.short	0x1404
 80013f8:	00610800 	.word	0x00610800
 80013fc:	3202      	.short	0x3202
 80013fe:	2f          	.byte	0x2f
	...

08001400 <Code_270>:

@ -----------------------------------------------------------------------------
  Wortbirne Flag_foldable_1|Flag_inline, "2/" @ ( n -- n/2 )
@ -----------------------------------------------------------------------------
  asrs tos, #1
 8001400:	1076      	asrs	r6, r6, #1
  bx lr
 8001402:	4770      	bx	lr

08001404 <Dictionary_271>:
 8001404:	08001418 	.word	0x08001418
 8001408:	65040061 	.word	0x65040061
 800140c:	6576      	.short	0x6576
 800140e:	6e          	.byte	0x6e
	...

08001410 <Code_271>:

@ -----------------------------------------------------------------------------
  Wortbirne Flag_foldable_1|Flag_inline, "even" @ ( x -- x' )
@ -----------------------------------------------------------------------------
  movs r0, #1
 8001410:	2001      	movs	r0, #1
  ands r0, tos
 8001412:	4030      	ands	r0, r6
  adds tos, r0
 8001414:	1836      	adds	r6, r6, r0
  bx lr
 8001416:	4770      	bx	lr

08001418 <Dictionary_272>:
 8001418:	08001430 	.word	0x08001430
 800141c:	62040081 	.word	0x62040081
 8001420:	7361      	.short	0x7361
 8001422:	65          	.byte	0x65
	...

08001424 <Code_272>:

@ -----------------------------------------------------------------------------
  Wortbirne Flag_visible|Flag_variable, "base" @ ( -- addr )
  CoreVariable base
@ -----------------------------------------------------------------------------
  pushdatos
 8001424:	f847 6d04 	str.w	r6, [r7, #-4]!
  ldr tos, =base
 8001428:	4e89      	ldr	r6, [pc, #548]	; (8001650 <Code_307+0x1c>)
  bx lr
 800142a:	4770      	bx	lr
 800142c:	0000000a 	.word	0x0000000a

08001430 <Dictionary_275>:
 8001430:	08001446 	.word	0x08001446
 8001434:	62060000 	.word	0x62060000
 8001438:	72616e69 	.word	0x72616e69
 800143c:	79          	.byte	0x79
	...

0800143e <Code_275>:
  .word 10

@ -----------------------------------------------------------------------------
  Wortbirne Flag_visible, "binary" @ ( -- )
@ -----------------------------------------------------------------------------
  ldr r0, =base
 800143e:	4884      	ldr	r0, [pc, #528]	; (8001650 <Code_307+0x1c>)
  movs r1, #2
 8001440:	2102      	movs	r1, #2
  str r1, [r0]
 8001442:	6001      	str	r1, [r0, #0]
  bx lr
 8001444:	4770      	bx	lr

08001446 <Dictionary_276>:
 8001446:	145c      	.short	0x145c
 8001448:	00000800 	.word	0x00000800
 800144c:	63656407 	.word	0x63656407
 8001450:	6c616d69 	.word	0x6c616d69

08001454 <Code_276>:

@ -----------------------------------------------------------------------------
  Wortbirne Flag_visible, "decimal" @ ( -- )
@ -----------------------------------------------------------------------------
  ldr r0, =base
 8001454:	487e      	ldr	r0, [pc, #504]	; (8001650 <Code_307+0x1c>)
  movs r1, #10
 8001456:	210a      	movs	r1, #10
  str r1, [r0]
 8001458:	6001      	str	r1, [r0, #0]
  bx lr
 800145a:	4770      	bx	lr

0800145c <Dictionary_277>:
 800145c:	080014b0 	.word	0x080014b0
 8001460:	68030000 	.word	0x68030000
 8001464:	7865      	.short	0x7865

08001466 <Code_277>:

@ -----------------------------------------------------------------------------
  Wortbirne Flag_visible, "hex" @ ( -- )
@ -----------------------------------------------------------------------------
  ldr r0, =base
 8001466:	487a      	ldr	r0, [pc, #488]	; (8001650 <Code_307+0x1c>)
  movs r1, #16
 8001468:	2110      	movs	r1, #16
  str r1, [r0]
 800146a:	6001      	str	r1, [r0, #0]
  bx lr
 800146c:	4770      	bx	lr

0800146e <uart_init>:
uart_init:
        @ ( -- ) A few bits are different
@ -----------------------------------------------------------------------------

	@ Enable all GPIO peripheral clock
	ldr	r1, =RCC_AHB2ENR
 800146e:	4979      	ldr	r1, [pc, #484]	; (8001654 <Code_307+0x20>)
	ldr	r0, =BIT7+BIT6+BIT5+BIT4+BIT3+BIT2+BIT1+BIT0 @ $0 is Reset value
 8001470:	f04f 00ff 	mov.w	r0, #255	; 0xff
	str	r0, [r1]
 8001474:	6008      	str	r0, [r1, #0]

	@ Enable the USART1 peripheral clock
	ldr	r1, =RCC_APB2ENR
 8001476:	4978      	ldr	r1, [pc, #480]	; (8001658 <Code_307+0x24>)
	ldr	r0, =1<<RCC_USART1EN_Shift
 8001478:	f44f 4080 	mov.w	r0, #16384	; 0x4000
	str	r0, [r1]
 800147c:	6008      	str	r0, [r1, #0]

	@ Set PORTB pins 6 and 7 in alternate function mode 2
	@ green LED2 PB0 and red LED3 PB1 output mode 1
	@ other pins are input mode 0
	ldr	r1, =GPIOB_MODER
 800147e:	4977      	ldr	r1, [pc, #476]	; (800165c <Code_307+0x28>)
	ldr	r0, =2<<GPIOB_MODER7_Shift + 2<<GPIOB_MODER6_Shift + 1<<GPIOB_MODER1_Shift +  1<<GPIOB_MODER0_Shift 
 8001480:	f24a 0005 	movw	r0, #40965	; 0xa005
	str	r0, [r1]
 8001484:	6008      	str	r0, [r1, #0]

	@ set green LED PB0
	ldr	r1, =GPIOB_BSRR
 8001486:	4976      	ldr	r1, [pc, #472]	; (8001660 <Code_307+0x2c>)
	ldr	r0, =1<<GPIOB_BS0_Shift
 8001488:	f04f 0001 	mov.w	r0, #1
	str	r0, [r1]
 800148c:	6008      	str	r0, [r1, #0]

	@ Set alternate function 7 to enable USART 1 pins on Port B6 and B7
	ldr	r1, =GPIOB_AFRL
 800148e:	4975      	ldr	r1, [pc, #468]	; (8001664 <Code_307+0x30>)
	ldr	r0, =7<<GPIOB_AFSEL7_Shift + 7<<GPIOB_AFSEL6_Shift
 8001490:	f04f 40ee 	mov.w	r0, #1996488704	; 0x77000000
	str	r0, [r1]
 8001494:	6008      	str	r0, [r1, #0]

	@ Configure BRR by deviding the 32 MHz bus clock with the baud rate
	ldr	r1, =USART1_BRR
 8001496:	4974      	ldr	r1, [pc, #464]	; (8001668 <Code_307+0x34>)
	ldr	r0, =(32000000 + (115200/2)) / 115200  @ 115200 bps, ein ganz kleines bisschen langsamer...
 8001498:	f44f 708b 	mov.w	r0, #278	; 0x116
	str	r0, [r1]
 800149c:	6008      	str	r0, [r1, #0]

	@ disable overrun detection before UE to avoid USART blocking on overflow
	ldr	r1, =USART1_CR3
 800149e:	4973      	ldr	r1, [pc, #460]	; (800166c <Code_307+0x38>)
	ldr	r0, =1<<USART1_OVRDIS_Shift
 80014a0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
	str	r0, [r1]
 80014a4:	6008      	str	r0, [r1, #0]

	@ Enable the USART, TX, and RX circuit
	ldr	r1, =USART1_CR1
 80014a6:	4972      	ldr	r1, [pc, #456]	; (8001670 <Code_307+0x3c>)
	ldr	r0, =1<<USART1_UE_Shift + 1<<USART1_TE_Shift + 1<<USART1_RE_Shift
 80014a8:	f04f 000d 	mov.w	r0, #13
	str	r0, [r1]
 80014ac:	6008      	str	r0, [r1, #0]

	bx	lr
 80014ae:	4770      	bx	lr

080014b0 <Dictionary_278>:
 80014b0:	080014cc 	.word	0x080014cc
 80014b4:	68090081 	.word	0x68090081
 80014b8:	2d6b6f6f 	.word	0x2d6b6f6f
 80014bc:	74696d65 	.word	0x74696d65

080014c0 <Code_278>:

@------------------------------------------------------------------------------
  Wortbirne Flag_visible|Flag_variable, "hook-emit" @ ( -- addr )
  CoreVariable hook_emit
@------------------------------------------------------------------------------
  pushdatos
 80014c0:	f847 6d04 	str.w	r6, [r7, #-4]!
  ldr tos, =hook_emit
 80014c4:	4e6b      	ldr	r6, [pc, #428]	; (8001674 <Code_307+0x40>)
  bx lr
 80014c6:	4770      	bx	lr
 80014c8:	080015b6 	.word	0x080015b6

080014cc <Dictionary_281>:
 80014cc:	080014e8 	.word	0x080014e8
 80014d0:	68080081 	.word	0x68080081
 80014d4:	2d6b6f6f 	.word	0x2d6b6f6f
 80014d8:	656b      	.short	0x656b
 80014da:	79          	.byte	0x79
	...

080014dc <Code_281>:

@------------------------------------------------------------------------------
  Wortbirne Flag_visible|Flag_variable, "hook-key" @ ( -- addr )
  CoreVariable hook_key
@------------------------------------------------------------------------------
  pushdatos
 80014dc:	f847 6d04 	str.w	r6, [r7, #-4]!
  ldr tos, =hook_key
 80014e0:	4e65      	ldr	r6, [pc, #404]	; (8001678 <Code_307+0x44>)
  bx lr
 80014e2:	4770      	bx	lr
 80014e4:	080015dc 	.word	0x080015dc

080014e8 <Dictionary_284>:
 80014e8:	08001506 	.word	0x08001506
 80014ec:	680a0081 	.word	0x680a0081
 80014f0:	2d6b6f6f 	.word	0x2d6b6f6f
 80014f4:	74696d65 	.word	0x74696d65
 80014f8:	3f          	.byte	0x3f
	...

080014fa <Code_284>:

@------------------------------------------------------------------------------
  Wortbirne Flag_visible|Flag_variable, "hook-emit?" @ ( -- addr )
  CoreVariable hook_qemit
@------------------------------------------------------------------------------
  pushdatos
 80014fa:	f847 6d04 	str.w	r6, [r7, #-4]!
  ldr tos, =hook_qemit
 80014fe:	4e5f      	ldr	r6, [pc, #380]	; (800167c <Code_307+0x48>)
  bx lr
 8001500:	4770      	bx	lr
 8001502:	1606      	.short	0x1606
 8001504:	0800      	.short	0x0800

08001506 <Dictionary_287>:
 8001506:	1522      	.short	0x1522
 8001508:	00810800 	.word	0x00810800
 800150c:	6f6f6809 	.word	0x6f6f6809
 8001510:	656b2d6b 	.word	0x656b2d6b
 8001514:	3f79      	.short	0x3f79

08001516 <Code_287>:

@------------------------------------------------------------------------------
  Wortbirne Flag_visible|Flag_variable, "hook-key?" @ ( -- addr )
  CoreVariable hook_qkey
@------------------------------------------------------------------------------
  pushdatos
 8001516:	f847 6d04 	str.w	r6, [r7, #-4]!
  ldr tos, =hook_qkey
 800151a:	4e59      	ldr	r6, [pc, #356]	; (8001680 <Code_307+0x4c>)
  bx lr
 800151c:	4770      	bx	lr
 800151e:	1634      	.short	0x1634
 8001520:	0800      	.short	0x0800

08001522 <Dictionary_290>:
 8001522:	1540      	.short	0x1540
 8001524:	00810800 	.word	0x00810800
 8001528:	6f6f680a 	.word	0x6f6f680a
 800152c:	61702d6b 	.word	0x61702d6b
 8001530:	7375      	.short	0x7375
 8001532:	65          	.byte	0x65
	...

08001534 <Code_290>:

@------------------------------------------------------------------------------
  Wortbirne Flag_visible|Flag_variable, "hook-pause" @ ( -- addr )
  CoreVariable hook_pause
@------------------------------------------------------------------------------
  pushdatos
 8001534:	f847 6d04 	str.w	r6, [r7, #-4]!
  ldr tos, =hook_pause
 8001538:	4e52      	ldr	r6, [pc, #328]	; (8001684 <Code_307+0x50>)
  bx lr
 800153a:	4770      	bx	lr
 800153c:	0800381a 	.word	0x0800381a

08001540 <Dictionary_293>:
 8001540:	08001556 	.word	0x08001556
 8001544:	65040000 	.word	0x65040000
 8001548:	696d      	.short	0x696d
 800154a:	74          	.byte	0x74
	...

0800154c <Code_293>:

@------------------------------------------------------------------------------
  Wortbirne Flag_visible, "emit" @ ( c -- )
emit:
@------------------------------------------------------------------------------
  push {r0, r1, r2, r3, lr} @ Used in core, registers have to be saved !
 800154c:	b50f      	push	{r0, r1, r2, r3, lr}
  ldr r0, =hook_emit
 800154e:	4849      	ldr	r0, [pc, #292]	; (8001674 <Code_307+0x40>)
  bl hook_intern
 8001550:	f000 f826 	bl	80015a0 <hook_intern>
  pop {r0, r1, r2, r3, pc}
 8001554:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001556 <Dictionary_294>:
 8001556:	156a      	.short	0x156a
 8001558:	00000800 	.word	0x00000800
 800155c:	79656b03 	.word	0x79656b03

08001560 <Code_294>:

@------------------------------------------------------------------------------
  Wortbirne Flag_visible, "key" @ ( -- c )
key:
@------------------------------------------------------------------------------
  push {r0, r1, r2, r3, lr} @ Used in core, registers have to be saved !
 8001560:	b50f      	push	{r0, r1, r2, r3, lr}
  ldr r0, =hook_key
 8001562:	4845      	ldr	r0, [pc, #276]	; (8001678 <Code_307+0x44>)
  bl hook_intern
 8001564:	f000 f81c 	bl	80015a0 <hook_intern>
  pop {r0, r1, r2, r3, pc}
 8001568:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800156a <Dictionary_295>:
 800156a:	157c      	.short	0x157c
 800156c:	00000800 	.word	0x00000800
 8001570:	696d6505 	.word	0x696d6505
 8001574:	3f74      	.short	0x3f74

08001576 <Code_295>:

@------------------------------------------------------------------------------
  Wortbirne Flag_visible, "emit?" @ ( -- ? )
@------------------------------------------------------------------------------
  ldr r0, =hook_qemit
 8001576:	4841      	ldr	r0, [pc, #260]	; (800167c <Code_307+0x48>)
  ldr r0, [r0]
 8001578:	6800      	ldr	r0, [r0, #0]
  mov pc, r0
 800157a:	4687      	mov	pc, r0

0800157c <Dictionary_296>:
 800157c:	0800158e 	.word	0x0800158e
 8001580:	6b040000 	.word	0x6b040000
 8001584:	7965      	.short	0x7965
 8001586:	3f          	.byte	0x3f
	...

08001588 <Code_296>:

@------------------------------------------------------------------------------
  Wortbirne Flag_visible, "key?" @ ( -- ? )
@------------------------------------------------------------------------------
  ldr r0, =hook_qkey
 8001588:	483d      	ldr	r0, [pc, #244]	; (8001680 <Code_307+0x4c>)
  ldr r0, [r0]
 800158a:	6800      	ldr	r0, [r0, #0]
  mov pc, r0
 800158c:	4687      	mov	pc, r0

0800158e <Dictionary_297>:
 800158e:	15a4      	.short	0x15a4
 8001590:	00000800 	.word	0x00000800
 8001594:	75617005 	.word	0x75617005
 8001598:	6573      	.short	0x6573

0800159a <Code_297>:

@------------------------------------------------------------------------------
  Wortbirne Flag_visible, "pause" @ ( -- ? )
pause:
@------------------------------------------------------------------------------
  ldr r0, =hook_pause
 800159a:	483a      	ldr	r0, [pc, #232]	; (8001684 <Code_307+0x50>)
  ldr r0, [r0]
 800159c:	6800      	ldr	r0, [r0, #0]
  mov pc, r0
 800159e:	4687      	mov	pc, r0

080015a0 <hook_intern>:

@------------------------------------------------------------------------------
hook_intern:
  ldr r0, [r0]
 80015a0:	6800      	ldr	r0, [r0, #0]
  mov pc, r0
 80015a2:	4687      	mov	pc, r0

080015a4 <Dictionary_298>:
 80015a4:	080015ca 	.word	0x080015ca
 80015a8:	730b0000 	.word	0x730b0000
 80015ac:	61697265 	.word	0x61697265
 80015b0:	6d652d6c 	.word	0x6d652d6c
 80015b4:	7469      	.short	0x7469

080015b6 <Code_298>:
@ -----------------------------------------------------------------------------
        Wortbirne Flag_visible, "serial-emit"
serial_emit:
        @ ( c -- ) Emit one character
@ -----------------------------------------------------------------------------
	push	{lr}
 80015b6:	b500      	push	{lr}

1:	bl	serial_qemit
 80015b8:	f000 f825 	bl	8001606 <Code_304>
	cmp	tos, #0
 80015bc:	2e00      	cmp	r6, #0
	drop
 80015be:	cf40      	ldmia	r7!, {r6}
	beq	1b
 80015c0:	d0fa      	beq.n	80015b8 <Code_298+0x2>

	ldr	r2, =USART1_TDR
 80015c2:	4a31      	ldr	r2, [pc, #196]	; (8001688 <Code_307+0x54>)
	strb	tos, [r2]			@ Output the character
 80015c4:	7016      	strb	r6, [r2, #0]
	drop
 80015c6:	cf40      	ldmia	r7!, {r6}

	pop	{pc}
 80015c8:	bd00      	pop	{pc}

080015ca <Dictionary_301>:
 80015ca:	15f2      	.short	0x15f2
 80015cc:	00000800 	.word	0x00000800
 80015d0:	7265730a 	.word	0x7265730a
 80015d4:	2d6c6169 	.word	0x2d6c6169
 80015d8:	656b      	.short	0x656b
 80015da:	79          	.byte	0x79
	...

080015dc <Code_301>:
@ -----------------------------------------------------------------------------
        Wortbirne Flag_visible, "serial-key"
serial_key:
        @ ( -- c ) Receive one character
@ -----------------------------------------------------------------------------
	push	{lr}
 80015dc:	b500      	push	{lr}

1:	bl	serial_qkey
 80015de:	f000 f829 	bl	8001634 <Code_307>
	cmp	tos, #0
 80015e2:	2e00      	cmp	r6, #0
	drop
 80015e4:	cf40      	ldmia	r7!, {r6}
	beq	1b
 80015e6:	d0fa      	beq.n	80015de <Code_301+0x2>

	pushdatos
 80015e8:	f847 6d04 	str.w	r6, [r7, #-4]!
	ldr	r2, =USART1_RDR
 80015ec:	4a27      	ldr	r2, [pc, #156]	; (800168c <Code_307+0x58>)
	ldrb	tos, [r2]			@ Fetch the character
 80015ee:	7816      	ldrb	r6, [r2, #0]

	pop	{pc}
 80015f0:	bd00      	pop	{pc}

080015f2 <Dictionary_304>:
 80015f2:	1622      	.short	0x1622
 80015f4:	00000800 	.word	0x00000800
 80015f8:	7265730c 	.word	0x7265730c
 80015fc:	2d6c6169 	.word	0x2d6c6169
 8001600:	74696d65 	.word	0x74696d65
 8001604:	3f          	.byte	0x3f
	...

08001606 <Code_304>:
@ -----------------------------------------------------------------------------
        Wortbirne Flag_visible, "serial-emit?"
serial_qemit:
        @ ( -- ? ) Ready to send a character ?
@ -----------------------------------------------------------------------------
	push	{lr}
 8001606:	b500      	push	{lr}
	bl	pause
 8001608:	f7ff ffc7 	bl	800159a <Code_297>

	pushdaconst 0				@ False Flag
 800160c:	f847 6d04 	str.w	r6, [r7, #-4]!
 8001610:	2600      	movs	r6, #0
	ldr	r0, =USART1_ISR
 8001612:	481f      	ldr	r0, [pc, #124]	; (8001690 <Code_307+0x5c>)
	ldr	r1, [r0]			@ Fetch status
 8001614:	6801      	ldr	r1, [r0, #0]
	ldr	r0, =1<<USART1_TXE_Shift
 8001616:	f04f 0080 	mov.w	r0, #128	; 0x80
	ands	r1, r1, r0
 800161a:	4001      	ands	r1, r0
	beq	1f
 800161c:	d000      	beq.n	8001620 <Code_304+0x1a>
	mvns	tos, tos 			@ True Flag
 800161e:	43f6      	mvns	r6, r6
1:	pop	{pc}
 8001620:	bd00      	pop	{pc}

08001622 <Dictionary_307>:
 8001622:	1694      	.short	0x1694
 8001624:	00000800 	.word	0x00000800
 8001628:	7265730b 	.word	0x7265730b
 800162c:	2d6c6169 	.word	0x2d6c6169
 8001630:	3f79656b 	.word	0x3f79656b

08001634 <Code_307>:
@ -----------------------------------------------------------------------------
        Wortbirne Flag_visible, "serial-key?"
serial_qkey:
        @ ( -- ? ) Is there a key press ?
@ -----------------------------------------------------------------------------
	push	{lr}
 8001634:	b500      	push	{lr}
	bl	pause
 8001636:	f7ff ffb0 	bl	800159a <Code_297>

	pushdaconst 0				@ False Flag
 800163a:	f847 6d04 	str.w	r6, [r7, #-4]!
 800163e:	2600      	movs	r6, #0
	ldr	r0, =USART1_ISR
 8001640:	4813      	ldr	r0, [pc, #76]	; (8001690 <Code_307+0x5c>)
	ldr	r1, [r0]			@ Fetch status
 8001642:	6801      	ldr	r1, [r0, #0]
	ldr	r0, =1<<USART1_RXNE_Shift
 8001644:	f04f 0020 	mov.w	r0, #32
	ands	r1, r1, r0
 8001648:	4001      	ands	r1, r0
	beq	1f
 800164a:	d000      	beq.n	800164e <Code_307+0x1a>
	mvns	tos, tos			@ True Flag
 800164c:	43f6      	mvns	r6, r6
1:	pop	{pc}
 800164e:	bd00      	pop	{pc}
  ldr tos, =base
 8001650:	2001fffc 	.word	0x2001fffc
	ldr	r1, =RCC_AHB2ENR
 8001654:	5800004c 	.word	0x5800004c
	ldr	r1, =RCC_APB2ENR
 8001658:	58000060 	.word	0x58000060
	ldr	r1, =GPIOB_MODER
 800165c:	48000400 	.word	0x48000400
	ldr	r1, =GPIOB_BSRR
 8001660:	48000418 	.word	0x48000418
	ldr	r1, =GPIOB_AFRL
 8001664:	48000420 	.word	0x48000420
	ldr	r1, =USART1_BRR
 8001668:	4001380c 	.word	0x4001380c
	ldr	r1, =USART1_CR3
 800166c:	40013808 	.word	0x40013808
	ldr	r1, =USART1_CR1
 8001670:	40013800 	.word	0x40013800
  ldr tos, =hook_emit
 8001674:	2001fff8 	.word	0x2001fff8
  ldr tos, =hook_key
 8001678:	2001fff4 	.word	0x2001fff4
  ldr tos, =hook_qemit
 800167c:	2001fff0 	.word	0x2001fff0
  ldr tos, =hook_qkey
 8001680:	2001ffec 	.word	0x2001ffec
  ldr tos, =hook_pause
 8001684:	2001ffe8 	.word	0x2001ffe8
	ldr	r2, =USART1_TDR
 8001688:	40013828 	.word	0x40013828
	ldr	r2, =USART1_RDR
 800168c:	40013824 	.word	0x40013824
	ldr	r0, =USART1_ISR
 8001690:	4001381c 	.word	0x4001381c

08001694 <Dictionary_310>:
 8001694:	080016b8 	.word	0x080016b8
 8001698:	63070000 	.word	0x63070000
 800169c:	65707865 	.word	0x65707865
 80016a0:	7463      	.short	0x7463

080016a2 <Code_310>:
@ Input routine Query - with Unicode support.

@ -----------------------------------------------------------------------------
  Wortbirne Flag_visible, "cexpect" @ ( cstr-addr maxlength ) Collecting your keystrokes into a counted string !
@ -----------------------------------------------------------------------------
  push {lr}
 80016a2:	b500      	push	{lr}
  ldr r0, [psp]  @ Fetch address
 80016a4:	6838      	ldr	r0, [r7, #0]
  push {r0}
 80016a6:	b401      	push	{r0}
  adds r0, #1    @ Add one to skip length byte for accept area
 80016a8:	3001      	adds	r0, #1
  str r0, [psp]
 80016aa:	6038      	str	r0, [r7, #0]
  bl accept
 80016ac:	f000 f80b 	bl	80016c6 <Code_312>
  pop {r0}
 80016b0:	bc01      	pop	{r0}
  strb tos, [r0] @ Store accepted length into length byte of counted string
 80016b2:	7006      	strb	r6, [r0, #0]
  drop
 80016b4:	cf40      	ldmia	r7!, {r6}
  pop {pc}
 80016b6:	bd00      	pop	{pc}

080016b8 <Dictionary_312>:
 80016b8:	0800172e 	.word	0x0800172e
 80016bc:	61060000 	.word	0x61060000
 80016c0:	70656363 	.word	0x70656363
 80016c4:	74          	.byte	0x74
	...

080016c6 <Code_312>:

@ -----------------------------------------------------------------------------
  Wortbirne Flag_visible, "accept" @ ( c-addr maxlength -- length ) Collecting your keystrokes !
accept: @ Nimmt einen String entgegen und legt ihn in einen Puffer.
@ -----------------------------------------------------------------------------
        push    {lr}
 80016c6:	b500      	push	{lr}
        @ r1: Pufferzeiger     Buffer pointer
        @ r2: Pufferfüllstand  Buffer fill gauge
        @ r3: Helferlein       Temporary
        @ tos:Längengrenze     Maximum length

        ldm psp!, {r1}          @ Pufferadresse holen                 Fetch buffer address
 80016c8:	cf02      	ldmia	r7!, {r1}
        subs r1, #1             @ Einen abziehen, weil die Routine bislang eigentlich abgezählte Strings erwartet hat.
 80016ca:	3901      	subs	r1, #1
        movs r2, #0             @ Momentaner Pufferfüllstand Null     Currently zero characters typed
 80016cc:	2200      	movs	r2, #0

1:      @ Queryschleife  Collcting loop
        bl key              @ Tastendruck holen  Fetch keypress
 80016ce:	f7ff ff47 	bl	8001560 <Code_294>
        popda r0
 80016d2:	0030      	movs	r0, r6
 80016d4:	cf40      	ldmia	r7!, {r6}

        cmp     r0, #127          @ Delete
 80016d6:	287f      	cmp	r0, #127	; 0x7f
        beq     6f                @ Should do the same as Backspace
 80016d8:	d009      	beq.n	80016ee <Code_312+0x28>

        cmp     r0, #32           @ ASCII 0-31 sind Steuerzeichen, 32 ist Space. Die Steuerzeichen müssten einzeln behandelt werden.
 80016da:	2820      	cmp	r0, #32
        bhs     2f                @ Space wird hier einfach so mit aufgenommen.
 80016dc:	d219      	bcs.n	8001712 <Code_312+0x4c>
        
        @ Steuerzeichen bearbeiten.
        @ Handle control characters below ascii 32 = space here.
        cmp     r0, #9            @ TAB ?
 80016de:	2809      	cmp	r0, #9
        beq     5f                @ Jump to replace TAB with space and include as normal character.
 80016e0:	d016      	beq.n	8001710 <Code_312+0x4a>

        cmp     r0, #10           @ Bei Enter sind wir fertig - LF  Finish with LF
 80016e2:	280a      	cmp	r0, #10
        beq     3f
 80016e4:	d01f      	beq.n	8001726 <Code_312+0x60>
        cmp     r0, #13           @ Bei Enter sind wir fertig - CR  Finish with CR
 80016e6:	280d      	cmp	r0, #13
        beq     3f
 80016e8:	d01d      	beq.n	8001726 <Code_312+0x60>

        cmp     r0, #8            @ Backspace
 80016ea:	2808      	cmp	r0, #8
        bne     1b                @ Alle anderen Steuerzeichen ignorieren  Ignore all other control characters
 80016ec:	d1ef      	bne.n	80016ce <Code_312+0x8>

6:        cmp     r2, #0            @ Null Zeichen im Puffer ? Dann ist nichts zu löschen da.
 80016ee:	2a00      	cmp	r2, #0
          beq     1b                @ Zero characters in buffer ? Then we cannot delete one.
 80016f0:	d0ed      	beq.n	80016ce <Code_312+0x8>

          bl dotgaensefuesschen  @ Clear a character visually. Emit sequence to delete one character in terminal.
 80016f2:	f000 f90b 	bl	800190c <dotgaensefuesschen>
 80016f6:	0803      	.short	0x0803
 80016f8:	0820      	.short	0x0820
      @ Unicode-Characters have this format:
      @ 11xx xxxx,  10xx xxxx,  10xx xxxx......
      @ If the last character has 10... then I have to delete until i reach a character that has 11....
      @ Always check if buffer may be already empty !

4:    cmp     r2, #0            @ Null Zeichen im Puffer ? Dann ist nichts zu löschen da.
 80016fa:	2a00      	cmp	r2, #0
      beq     1b                @ Anything available to be deleted ?
 80016fc:	d0e7      	beq.n	80016ce <Code_312+0x8>

      @ Hole das letzte Zeichen und schneide es ab.
      @ Fetch character from the end and cut it off.
      ldrb    r0, [r1, r2]      @ Letztes Zeichen im Puffer holen
 80016fe:	5c88      	ldrb	r0, [r1, r2]
      subs    r2, #1            @  und abschneiden
 8001700:	3a01      	subs	r2, #1

      @ Teste das Zeichen auf Unicode, oberstes Bit gesetzt ?
      @ Check character for Unicode, is MSB set ?
      @ tst r0, 0x80
      movs r3, #0x80
 8001702:	2380      	movs	r3, #128	; 0x80
      ands r3, r0
 8001704:	4003      	ands	r3, r0
      beq 1b @ Wenn nein, dann war das ein normales Zeichen und ich bin schon fertig.
 8001706:	d0e2      	beq.n	80016ce <Code_312+0x8>
      @ Ansonsten könnten noch mehr Unicode-Zeichen folgen.
      @ Zeichen das erste Byte eines Unicode-Zeichens ?
      @ Else I have to remove more bytes of this single Unicode character.
      @ Have I reached the first byte of this particular Unicode character yet ?
      @ tst r0, 0x40
      movs r3, #0x40
 8001708:	2340      	movs	r3, #64	; 0x40
      ands r3, r0
 800170a:	4003      	ands	r3, r0
      beq 4b @ Wenn nein, lösche ein weiteres Zeichen. No ? Delete one more byte.
 800170c:	d0f5      	beq.n	80016fa <Code_312+0x34>
      b 1b   @ Wenn ja, fertig. Dann habe ich soeben das erste Byte eines Unicode-Zeichens entfernt.  Yes ? Finished deleting.
 800170e:	e7de      	b.n	80016ce <Code_312+0x8>


5:      @ Replace TAB with space:
        movs r0, #32       
 8001710:	2020      	movs	r0, #32

2:      @ Normale Zeichen annehmen
        @ Add a character to buffer if there is space left and echo it back.
        cmp     r2, tos              @ Ist der Puffer voll ?  Check buffer fill level.
 8001712:	42b2      	cmp	r2, r6
        bhs     1b                   @ Keine weiteren Zeichen mehr annehmen.  No more characters if buffer is full !
 8001714:	d2db      	bcs.n	80016ce <Code_312+0x8>

        pushda r0
 8001716:	f847 6d04 	str.w	r6, [r7, #-4]!
 800171a:	0006      	movs	r6, r0
        bl emit                   @ Zeichen ausgeben
 800171c:	f7ff ff16 	bl	800154c <Code_293>
        adds    r2, #1            @ Pufferfüllstand erhöhen
 8001720:	3201      	adds	r2, #1
        strb    r0, [r1, r2]      @ Zeichen in Puffer speichern
 8001722:	5488      	strb	r0, [r1, r2]
        b       1b
 8001724:	e7d3      	b.n	80016ce <Code_312+0x8>

3:      @ Return has been pressed: Store string length, print space and leave.
        movs tos, r2              @ Give back accepted length
 8001726:	0016      	movs	r6, r2
        bl space                  @ Statt des Zeilenumbruches ein Leerzeichen ausgeben
 8001728:	f000 f89f 	bl	800186a <Code_342>
        pop {pc}
 800172c:	bd00      	pop	{pc}

0800172e <Dictionary_316>:
 800172e:	1740      	.short	0x1740
 8001730:	00400800 	.word	0x00400800
 8001734:	62697403 	.word	0x62697403

08001738 <Code_316>:

@ -----------------------------------------------------------------------------
  Wortbirne Flag_foldable_0, "tib" @ ( -- addr )
@ -----------------------------------------------------------------------------
tib:
  pushdatos
 8001738:	f847 6d04 	str.w	r6, [r7, #-4]!
  ldr tos, =Eingabepuffer
 800173c:	4e29      	ldr	r6, [pc, #164]	; (80017e4 <Code_328+0x22>)
  bx lr
 800173e:	4770      	bx	lr

08001740 <Dictionary_318>:
 8001740:	08001756 	.word	0x08001756
 8001744:	3e030081 	.word	0x3e030081
 8001748:	6e69      	.short	0x6e69

0800174a <Code_318>:

@ -----------------------------------------------------------------------------
  Wortbirne Flag_visible|Flag_variable, ">in" @ ( -- addr )
  CoreVariable Pufferstand
@ -----------------------------------------------------------------------------
  pushdatos
 800174a:	f847 6d04 	str.w	r6, [r7, #-4]!
  ldr tos, =Pufferstand
 800174e:	4e26      	ldr	r6, [pc, #152]	; (80017e8 <Code_328+0x26>)
  bx lr
 8001750:	4770      	bx	lr
 8001752:	0000      	.short	0x0000
	...

08001756 <Dictionary_321>:
 8001756:	177c      	.short	0x177c
 8001758:	00820800 	.word	0x00820800
 800175c:	7275630e 	.word	0x7275630e
 8001760:	746e6572 	.word	0x746e6572
 8001764:	756f732d 	.word	0x756f732d
 8001768:	6372      	.short	0x6372
 800176a:	65          	.byte	0x65
	...

0800176c <Code_321>:

@------------------------------------------------------------------------------
  Wortbirne Flag_visible|Flag_2variable, "current-source" @ ( -- addr )
  DoubleCoreVariable current_source
@------------------------------------------------------------------------------  
  pushdatos
 800176c:	f847 6d04 	str.w	r6, [r7, #-4]!
  ldr tos, =current_source
 8001770:	4e1e      	ldr	r6, [pc, #120]	; (80017ec <Code_328+0x2a>)
  bx lr
 8001772:	4770      	bx	lr
 8001774:	00000000 	.word	0x00000000
 8001778:	20001068 	.word	0x20001068

0800177c <Dictionary_324>:
 800177c:	08001798 	.word	0x08001798
 8001780:	73090000 	.word	0x73090000
 8001784:	6f737465 	.word	0x6f737465
 8001788:	65637275 	.word	0x65637275

0800178c <Code_324>:

@ -----------------------------------------------------------------------------
  Wortbirne Flag_visible, "setsource" @ ( c-addr len -- )
setsource:
@ -----------------------------------------------------------------------------
  ldr r0, =current_source
 800178c:	4817      	ldr	r0, [pc, #92]	; (80017ec <Code_328+0x2a>)
  ldm psp!, {r1}
 800178e:	cf02      	ldmia	r7!, {r1}
  str tos, [r0]
 8001790:	6006      	str	r6, [r0, #0]
  str r1, [r0, #4]
 8001792:	6041      	str	r1, [r0, #4]
  drop
 8001794:	cf40      	ldmia	r7!, {r6}
  bx lr
 8001796:	4770      	bx	lr

08001798 <Dictionary_326>:
 8001798:	080017b6 	.word	0x080017b6
 800179c:	73060000 	.word	0x73060000
 80017a0:	6372756f 	.word	0x6372756f
 80017a4:	65          	.byte	0x65
	...

080017a6 <Code_326>:

@ -----------------------------------------------------------------------------
  Wortbirne Flag_visible, "source" @ ( c-addr len -- )
source:
@ -----------------------------------------------------------------------------
  pushdatos
 80017a6:	f847 6d04 	str.w	r6, [r7, #-4]!
  ldr tos, =current_source
 80017aa:	4e10      	ldr	r6, [pc, #64]	; (80017ec <Code_328+0x2a>)

  subs psp, #4        @ Opcodes for 2@
 80017ac:	3f04      	subs	r7, #4
  ldr r0, [tos, #4]
 80017ae:	6870      	ldr	r0, [r6, #4]
  str r0, [psp]
 80017b0:	6038      	str	r0, [r7, #0]
  ldr tos, [tos]
 80017b2:	6836      	ldr	r6, [r6, #0]
  bx lr
 80017b4:	4770      	bx	lr

080017b6 <Dictionary_328>:
 80017b6:	17f0      	.short	0x17f0
 80017b8:	00000800 	.word	0x00000800
 80017bc:	65757105 	.word	0x65757105
 80017c0:	7972      	.short	0x7972

080017c2 <Code_328>:

@ -----------------------------------------------------------------------------
  Wortbirne Flag_visible, "query" @ Collecting your keystrokes into TIB ! Forth at your fingertips :-)
query: @ ( -- ) Nimmt einen String in den Eingabepuffer auf
@ -----------------------------------------------------------------------------
  push {r0, r1, r2, r3, lr}
 80017c2:	b50f      	push	{r0, r1, r2, r3, lr}

  ldr r0, =Pufferstand @ Aktueller Offset in den Eingabepuffer  Zero characters consumed yet
 80017c4:	4808      	ldr	r0, [pc, #32]	; (80017e8 <Code_328+0x26>)
  movs r1, #0
 80017c6:	2100      	movs	r1, #0
  str r1, [r0]
 80017c8:	6001      	str	r1, [r0, #0]

  bl tib
 80017ca:	f7ff ffb5 	bl	8001738 <Code_316>
  dup
 80017ce:	f847 6d04 	str.w	r6, [r7, #-4]!
  pushdaconst Maximaleeingabe
 80017d2:	f847 6d04 	str.w	r6, [r7, #-4]!
 80017d6:	26c8      	movs	r6, #200	; 0xc8
  bl accept
 80017d8:	f7ff ff75 	bl	80016c6 <Code_312>
  bl setsource
 80017dc:	f7ff ffd6 	bl	800178c <Code_324>
  
  pop {r0, r1, r2, r3, pc}
 80017e0:	bd0f      	pop	{r0, r1, r2, r3, pc}
 80017e2:	0000      	.short	0x0000
  ldr tos, =Eingabepuffer
 80017e4:	20001068 	.word	0x20001068
  ldr tos, =Pufferstand
 80017e8:	2001ffe4 	.word	0x2001ffe4
  ldr tos, =current_source
 80017ec:	2001ffdc 	.word	0x2001ffdc

080017f0 <Dictionary_333>:
 80017f0:	08001838 	.word	0x08001838
 80017f4:	63070000 	.word	0x63070000
 80017f8:	61706d6f 	.word	0x61706d6f
 80017fc:	6572      	.short	0x6572

080017fe <Code_333>:

@ -----------------------------------------------------------------------------
  Wortbirne Flag_visible, "compare"  @ Vergleicht zwei Strings  Compare two strings
compare:                             @ ( c-addr1 len-1 c-addr2 len-2 -- f )
@ -----------------------------------------------------------------------------
  push {r0, r1, r2, r3, lr}
 80017fe:	b50f      	push	{r0, r1, r2, r3, lr}

  popda r1        @ Length of second string
 8001800:	0031      	movs	r1, r6
 8001802:	cf40      	ldmia	r7!, {r6}
  ldm psp!, {r0}  @ Length of first  string
 8001804:	cf01      	ldmia	r7!, {r0}
  cmp r0, r1
 8001806:	4288      	cmp	r0, r1

   ldm psp!, {r1}  @ Address of first string. ldm does not change flags.
 8001808:	cf02      	ldmia	r7!, {r1}
                   @ TOS contains address of second string.

  bne 2f @ Exit in case of unequal lengths.
 800180a:	d110      	bne.n	800182e <Code_333+0x30>

   @ Lengths are equal. Compare characters.
   @ How many characters to compare left ?
1: cmp r0, #0
 800180c:	2800      	cmp	r0, #0
   beq 3f
 800180e:	d010      	beq.n	8001832 <Code_333+0x34>

     subs r0, #1
 8001810:	3801      	subs	r0, #1
     ldrb r2, [r1, r0]
 8001812:	5c0a      	ldrb	r2, [r1, r0]
     ldrb r3, [tos, r0]
 8001814:	5c33      	ldrb	r3, [r6, r0]

     @ Beide Zeichen in Kleinbuchstaben verwandeln.  Convert booth to lowercase.
     lowercase r2
 8001816:	2a41      	cmp	r2, #65	; 0x41
 8001818:	d302      	bcc.n	8001820 <Code_333+0x22>
 800181a:	2a5b      	cmp	r2, #91	; 0x5b
 800181c:	bf38      	it	cc
 800181e:	3220      	addcc	r2, #32
     lowercase r3
 8001820:	2b41      	cmp	r3, #65	; 0x41
 8001822:	d302      	bcc.n	800182a <Code_333+0x2c>
 8001824:	2b5b      	cmp	r3, #91	; 0x5b
 8001826:	bf38      	it	cc
 8001828:	3320      	addcc	r3, #32

     cmp r2, r3
 800182a:	429a      	cmp	r2, r3
     beq 1b
 800182c:	d0ee      	beq.n	800180c <Code_333+0xe>

2:   @ Unequal
     movs tos, #0
 800182e:	2600      	movs	r6, #0
     pop {r0, r1, r2, r3, pc}
 8001830:	bd0f      	pop	{r0, r1, r2, r3, pc}

3: @ Equal !
   movs tos, #0
 8001832:	2600      	movs	r6, #0
   mvns tos, tos
 8001834:	43f6      	mvns	r6, r6
   pop {r0, r1, r2, r3, pc}
 8001836:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001838 <Dictionary_337>:
 8001838:	0800184c 	.word	0x0800184c
 800183c:	63020000 	.word	0x63020000
 8001840:	72          	.byte	0x72
	...

08001842 <Code_337>:

@ -----------------------------------------------------------------------------
  Wortbirne Flag_visible, "cr" @ Zeilenumbruch
@ -----------------------------------------------------------------------------
  push {lr}
 8001842:	b500      	push	{lr}
  writeln ""
 8001844:	f000 f862 	bl	800190c <dotgaensefuesschen>
 8001848:	0a01      	.short	0x0a01
  pop {pc}
 800184a:	bd00      	pop	{pc}

0800184c <Dictionary_339>:
 800184c:	0800185e 	.word	0x0800185e
 8001850:	62020000 	.word	0x62020000
 8001854:	6c          	.byte	0x6c
	...

08001856 <Code_339>:

@ -----------------------------------------------------------------------------
  Wortbirne Flag_visible, "bl" @ Leerzeichen-code
@ -----------------------------------------------------------------------------
  pushdaconst 32
 8001856:	f847 6d04 	str.w	r6, [r7, #-4]!
 800185a:	2620      	movs	r6, #32
  bx lr
 800185c:	4770      	bx	lr

0800185e <Dictionary_342>:
 800185e:	1872      	.short	0x1872
 8001860:	00000800 	.word	0x00000800
 8001864:	61707305 	.word	0x61707305
 8001868:	6563      	.short	0x6563

0800186a <Code_342>:

@ -----------------------------------------------------------------------------
  Wortbirne Flag_visible, "space"
space:
@ -----------------------------------------------------------------------------
  pushdaconst 32
 800186a:	f847 6d04 	str.w	r6, [r7, #-4]!
 800186e:	2620      	movs	r6, #32
  b.n emit
 8001870:	e66c      	b.n	800154c <Code_293>

08001872 <Dictionary_345>:
 8001872:	1892      	.short	0x1892
 8001874:	00000800 	.word	0x00000800
 8001878:	61707306 	.word	0x61707306
 800187c:	6563      	.short	0x6563
 800187e:	73          	.byte	0x73
	...

08001880 <Code_345>:

@ -----------------------------------------------------------------------------
  Wortbirne Flag_visible, "spaces"
@ -----------------------------------------------------------------------------
  push {lr}
 8001880:	b500      	push	{lr}
  cmp tos, #0
 8001882:	2e00      	cmp	r6, #0
  ble 2f
 8001884:	dd03      	ble.n	800188e <Code_345+0xe>
  
1:bl space
 8001886:	f7ff fff0 	bl	800186a <Code_342>
  subs tos, #1
 800188a:	3e01      	subs	r6, #1
  bne 1b
 800188c:	d1fb      	bne.n	8001886 <Code_345+0x6>

2:drop
 800188e:	cf40      	ldmia	r7!, {r6}
  pop {pc}
 8001890:	bd00      	pop	{pc}

08001892 <Dictionary_347>:
 8001892:	18a2      	.short	0x18a2
 8001894:	00500800 	.word	0x00500800
 8001898:	68635b06 	.word	0x68635b06
 800189c:	7261      	.short	0x7261
 800189e:	5d          	.byte	0x5d
	...

080018a0 <Code_347>:

@------------------------------------------------------------------------------
  Wortbirne Flag_immediate|Flag_foldable_0, "[char]" @ ( -- )  Get character from input stream and compile it as literal
  @ Holt ein Zeichen aus dem Eingabestrom und fügt es als Literal ein.
@------------------------------------------------------------------------------
  b.n holechar
 80018a0:	e005      	b.n	80018ae <Code_348>

080018a2 <Dictionary_348>:
 80018a2:	18ba      	.short	0x18ba
 80018a4:	00000800 	.word	0x00000800
 80018a8:	61686304 	.word	0x61686304
 80018ac:	72          	.byte	0x72
	...

080018ae <Code_348>:

@------------------------------------------------------------------------------
  Wortbirne Flag_visible, "char" @ Holt ein Zeichen aus dem Eingabestrom  Get character from input stream
holechar: @ ( -- Zeichen )
@------------------------------------------------------------------------------
  push {lr}
 80018ae:	b500      	push	{lr}
  bl token        @ Fetch token
 80018b0:	f001 fbc3 	bl	800303a <Code_797>
  drop            @ Drop length  
 80018b4:	cf40      	ldmia	r7!, {r6}
  ldrb tos, [tos] @ Read character
 80018b6:	7836      	ldrb	r6, [r6, #0]
  pop {pc}
 80018b8:	bd00      	pop	{pc}

080018ba <Dictionary_350>:
 80018ba:	18ca      	.short	0x18ca
 80018bc:	00500800 	.word	0x00500800
 80018c0:	2801      	.short	0x2801

080018c2 <Code_350>:

@ -----------------------------------------------------------------------------
  Wortbirne Flag_immediate|Flag_foldable_0|Flag_Sprungschlucker, "(" @ Der Kommentar
@ -----------------------------------------------------------------------------
  pushdaconst 41 @ Die Klammer )
 80018c2:	f847 6d04 	str.w	r6, [r7, #-4]!
 80018c6:	2629      	movs	r6, #41	; 0x29
  b 1f
 80018c8:	e006      	b.n	80018d8 <Code_353+0x6>

080018ca <Dictionary_353>:
 80018ca:	18e4      	.short	0x18e4
 80018cc:	00500800 	.word	0x00500800
 80018d0:	5c01      	.short	0x5c01

080018d2 <Code_353>:

@ -----------------------------------------------------------------------------
  Wortbirne Flag_immediate|Flag_foldable_0|Flag_Sprungschlucker, "\\" @ Der lange Kommentar
@ -----------------------------------------------------------------------------
  pushdaconst 0 @ Gibt es nicht - immer bis zum Zeilenende. Zero never occours - always catches whole line.
 80018d2:	f847 6d04 	str.w	r6, [r7, #-4]!
 80018d6:	2600      	movs	r6, #0

1:push {lr}
 80018d8:	b500      	push	{lr}
  bl parse
 80018da:	f001 fbb8 	bl	800304e <Code_799>
  ddrop
 80018de:	3704      	adds	r7, #4
 80018e0:	cf40      	ldmia	r7!, {r6}
  pop {pc}
 80018e2:	bd00      	pop	{pc}

080018e4 <Dictionary_358>:
 80018e4:	08001928 	.word	0x08001928
 80018e8:	2e020030 	.word	0x2e020030
 80018ec:	22          	.byte	0x22
	...

080018ee <Code_358>:

@ -----------------------------------------------------------------------------
  Wortbirne Flag_immediate_compileonly, ".\"" @ Fügt eine Meldung ein  Print a message
@ -----------------------------------------------------------------------------
  ldr r0, =dotgaensefuesschen
 80018ee:	48a9      	ldr	r0, [pc, #676]	; (8001b94 <unused_ram+0x6>)

1:push {lr}
 80018f0:	b500      	push	{lr}
  pushda r0
 80018f2:	f847 6d04 	str.w	r6, [r7, #-4]!
 80018f6:	0006      	movs	r6, r0
  bl callkomma
 80018f8:	f000 fa7d 	bl	8001df6 <Code_435>

  pushdaconst 34 @ Das Gänsefüßchen "
 80018fc:	f847 6d04 	str.w	r6, [r7, #-4]!
 8001900:	2622      	movs	r6, #34	; 0x22
  bl parse
 8001902:	f001 fba4 	bl	800304e <Code_799>
  bl stringkomma
 8001906:	f000 fdb5 	bl	8002474 <Code_556>
  pop {pc}
 800190a:	bd00      	pop	{pc}

0800190c <dotgaensefuesschen>:

@ -----------------------------------------------------------------------------
dotgaensefuesschen: @ Gibt den inline folgenden String aus und überspringt ihn
                    @ Print the string following inline and skip it
@ -----------------------------------------------------------------------------
  push {r1, r3}  @ Messages are used everywhere, save the registers !
 800190c:	b40a      	push	{r1, r3}

  pushdatos
 800190e:	f847 6d04 	str.w	r6, [r7, #-4]!
  mov tos, lr    @ In lr ist nun die Stringadresse.  LR contains string address
 8001912:	4676      	mov	r6, lr
  subs tos, #1   @ Die Stringanfangsadresse für type - PC ist ungerade im Thumb-Modus ! One less because of Thumb-instruction set marker bit
 8001914:	3e01      	subs	r6, #1
  ldrb r3, [tos] @ Länge des Strings holen  Fetch length of string
 8001916:	7833      	ldrb	r3, [r6, #0]

  @ Skip the string.

  movs r1, #1
 8001918:	2101      	movs	r1, #1
  adds r3, #1     @ Plus 1 Byte für die Länge  One more for length byte
 800191a:	3301      	adds	r3, #1
  ands r1, r3     @ Wenn es ungerade ist, noch einen mehr:  Maybe one more for aligning
 800191c:	4019      	ands	r1, r3
  adds r3, r1
 800191e:	185b      	adds	r3, r3, r1
  .ifdef m0core
    mov r1, lr
    adds r1, r3
    mov lr, r1
  .else
    adds lr, r3
 8001920:	eb1e 0e03 	adds.w	lr, lr, r3
  .endif

  pop {r1, r3}
 8001924:	bc0a      	pop	{r1, r3}
  b.n type   @ Print it !
 8001926:	e039      	b.n	800199c <Code_373>

08001928 <Dictionary_364>:
 8001928:	0800194e 	.word	0x0800194e
 800192c:	63020030 	.word	0x63020030
 8001930:	22          	.byte	0x22
	...

08001932 <Code_364>:

@ -----------------------------------------------------------------------------
  Wortbirne Flag_immediate_compileonly, "c\"" @ Fügt einen String ein  Insert a string-literal
@ -----------------------------------------------------------------------------
  ldr r0, =dotcfuesschen
 8001932:	4899      	ldr	r0, [pc, #612]	; (8001b98 <unused_ram+0xa>)
  b 1b
 8001934:	e7dc      	b.n	80018f0 <Code_358+0x2>

08001936 <dotcfuesschen>:

@ -----------------------------------------------------------------------------
dotcfuesschen: @ Legt den inline folgenden String auf den Stack und überspringt ihn
              @ Put address of the string following inline on datastack and skip string.
@ -----------------------------------------------------------------------------
  pushdatos
 8001936:	f847 6d04 	str.w	r6, [r7, #-4]!
  mov tos, lr    @ In lr ist nun die Stringadresse.  LR contains string address
 800193a:	4676      	mov	r6, lr
  subs tos, #1   @ Die Stringanfangsadresse für type - PC ist ungerade im Thumb-Modus ! One less because of Thumb-instruction set marker bit
 800193c:	3e01      	subs	r6, #1
  ldrb r3, [tos] @ Länge des Strings holen  Fetch length of string
 800193e:	7833      	ldrb	r3, [r6, #0]

  @ Skip the string.

  movs r1, #1
 8001940:	2101      	movs	r1, #1
  adds r3, #1     @ Plus 1 Byte für die Länge  One more for length byte
 8001942:	3301      	adds	r3, #1
  ands r1, r3     @ Wenn es ungerade ist, noch einen mehr:  Maybe one more for aligning
 8001944:	4019      	ands	r1, r3
  adds r3, r1
 8001946:	185b      	adds	r3, r3, r1
  .ifdef m0core
    mov r1, lr
    adds r1, r3
    mov lr, r1
  .else
    adds lr, r3
 8001948:	eb1e 0e03 	adds.w	lr, lr, r3
  .endif

  bx lr  @ Leave string address on datastack.
 800194c:	4770      	bx	lr

0800194e <Dictionary_366>:
 800194e:	1978      	.short	0x1978
 8001950:	00300800 	.word	0x00300800
 8001954:	7302      	.short	0x7302
 8001956:	22          	.byte	0x22
	...

08001958 <Code_366>:

@ -----------------------------------------------------------------------------
  Wortbirne Flag_immediate_compileonly, "s\"" @ Fügt einen String ein  Insert a string-literal
@ -----------------------------------------------------------------------------
  ldr r0, =dotsfuesschen
 8001958:	4890      	ldr	r0, [pc, #576]	; (8001b9c <unused_ram+0xe>)
  b 1b
 800195a:	e7c9      	b.n	80018f0 <Code_358+0x2>

0800195c <dotsfuesschen>:

@ -----------------------------------------------------------------------------
dotsfuesschen: @ Legt den inline folgenden String auf den Stack und überspringt ihn
              @ Put address of the string following inline on datastack and skip string.
@ -----------------------------------------------------------------------------
  pushdatos
 800195c:	f847 6d04 	str.w	r6, [r7, #-4]!
  mov tos, lr    @ In lr ist nun die Stringadresse.  LR contains string address
 8001960:	4676      	mov	r6, lr
  dup
 8001962:	f847 6d04 	str.w	r6, [r7, #-4]!
  subs tos, #1   @ Die Stringanfangsadresse für type - PC ist ungerade im Thumb-Modus ! One less because of Thumb-instruction set marker bit
 8001966:	3e01      	subs	r6, #1
  ldrb tos, [tos] @ Länge des Strings holen  Fetch length of string
 8001968:	7836      	ldrb	r6, [r6, #0]

  @ Skip the string.

  movs r1, #1
 800196a:	2101      	movs	r1, #1
  adds r3, tos, #1 @ Plus 1 Byte für die Länge  One more for length byte
 800196c:	1c73      	adds	r3, r6, #1
  ands r1, r3      @ Wenn es ungerade ist, noch einen mehr:  Maybe one more for aligning
 800196e:	4019      	ands	r1, r3
  adds r3, r1
 8001970:	185b      	adds	r3, r3, r1
  .ifdef m0core
    mov r1, lr
    adds r1, r3
    mov lr, r1
  .else
    adds lr, r3
 8001972:	eb1e 0e03 	adds.w	lr, lr, r3
  .endif

  bx lr  @ Leave string address and length on datastack.
 8001976:	4770      	bx	lr

08001978 <Dictionary_370>:
 8001978:	08001990 	.word	0x08001990
 800197c:	63050000 	.word	0x63050000
 8001980:	746e756f 	.word	0x746e756f

08001984 <Code_370>:
@ -----------------------------------------------------------------------------
  Wortbirne Flag_visible, "count"
count: @ ( c-addr -- c-addr+1 len ) Fetch length of counted string
@ -----------------------------------------------------------------------------
  @ Count soll die Adresse um eine Stelle weiterschieben und die Länge holen.
  adds tos, #1 @ Adresse + 1
 8001984:	3601      	adds	r6, #1
  dup
 8001986:	f847 6d04 	str.w	r6, [r7, #-4]!
  subs tos, #1 @ Zurück zum Längenbyte
 800198a:	3e01      	subs	r6, #1
  ldrb tos, [tos] @ Längenbyte holen
 800198c:	7836      	ldrb	r6, [r6, #0]
  bx lr
 800198e:	4770      	bx	lr

08001990 <Dictionary_373>:
 8001990:	080019a8 	.word	0x080019a8
 8001994:	63050000 	.word	0x63050000
 8001998:	65707974 	.word	0x65707974

0800199c <Code_373>:

@ -----------------------------------------------------------------------------
  Wortbirne Flag_visible, "ctype"
type: @ ( str -- ) Gibt einen String aus  Print a counted string
@ -----------------------------------------------------------------------------
  push {lr}
 800199c:	b500      	push	{lr}
  bl count
 800199e:	f7ff fff1 	bl	8001984 <Code_370>
  bl stype
 80019a2:	f000 f807 	bl	80019b4 <Code_374>
  pop {pc}
 80019a6:	bd00      	pop	{pc}

080019a8 <Dictionary_374>:
 80019a8:	080019d0 	.word	0x080019d0
 80019ac:	74040000 	.word	0x74040000
 80019b0:	7079      	.short	0x7079
 80019b2:	65          	.byte	0x65
	...

080019b4 <Code_374>:

@ -----------------------------------------------------------------------------
  Wortbirne Flag_visible, "type"
stype:  @ ( addr len -- ) Gibt einen String aus  Print a string
@ -----------------------------------------------------------------------------
  push {r0, lr}
 80019b4:	b501      	push	{r0, lr}
  ldm psp!, {r0}  @ Adresse holen. Fetch address.
 80019b6:	cf01      	ldmia	r7!, {r0}

  cmp tos, #0     @ Wenn nichts da ist, bin ich fertig.  Any characters left ?
 80019b8:	2e00      	cmp	r6, #0
  beq 2f
 80019ba:	d007      	beq.n	80019cc <Code_374+0x18>

  @ Es ist etwas zum Tippen da !  Something available for typing !

1:pushdatos
 80019bc:	f847 6d04 	str.w	r6, [r7, #-4]!
  ldrb tos, [r0]  @ Zeichen holen            Put character on datastack
 80019c0:	7806      	ldrb	r6, [r0, #0]
  bl emit         @ Zeichen senden           Emit character
 80019c2:	f7ff fdc3 	bl	800154c <Code_293>
  adds r0, #1     @ Adresse um eins erhöhen  Advance pointer
 80019c6:	3001      	adds	r0, #1
  subs tos, #1    @ Ein Zeichen weniger      One character less
 80019c8:	3e01      	subs	r6, #1
  bne 1b
 80019ca:	d1f7      	bne.n	80019bc <Code_374+0x8>

2:drop  
 80019cc:	cf40      	ldmia	r7!, {r6}
  pop {r0, pc}
 80019ce:	bd01      	pop	{r0, pc}

080019d0 <Dictionary_377>:
 80019d0:	08001a0a 	.word	0x08001a0a
 80019d4:	68040000 	.word	0x68040000
 80019d8:	7865      	.short	0x7865
 80019da:	2e          	.byte	0x2e
	...

080019dc <Code_377>:
@ -----------------------------------------------------------------------------
  Wortbirne Flag_visible, "hex." @ Print an unsigned number in Base 16, independent of number subsystem.
hexdot: @ ( u -- ) @ Funktioniert unabhängig vom restlichen Zahlensystem.
@ -----------------------------------------------------------------------------
  
        push    {r0, r1, r2, lr}
 80019dc:	b507      	push	{r0, r1, r2, lr}
        popda r1 @ Zahl holen
 80019de:	0031      	movs	r1, r6
 80019e0:	cf40      	ldmia	r7!, {r6}
        movs    r0, #32 @ Zahl der Bits, die noch zu bearbeiten sind  Number of Bits left
 80019e2:	2020      	movs	r0, #32
        movs r2, #15 @ Mask for one Nibble
 80019e4:	220f      	movs	r2, #15

1:      subs    r0, #4       @ 4 Bits weniger  4 Bits less to do
 80019e6:	3804      	subs	r0, #4
        pushdatos            @ Platz auf dem Stack schaffen  Make space on datastack
 80019e8:	f847 6d04 	str.w	r6, [r7, #-4]!

        movs tos, r1
 80019ec:	000e      	movs	r6, r1
        lsrs tos, r0         @ Schiebe den Wert passend   Shift accordingly
 80019ee:	40c6      	lsrs	r6, r0

        ands    tos, r2      @ Eine Hex-Ziffer maskieren  Mask 4 Bits
 80019f0:	4016      	ands	r6, r2
        cmp     tos, #9      @ Ziffer oder Buchstabe ?    Number or letter ?
 80019f2:	2e09      	cmp	r6, #9
        bls 2f
 80019f4:	d901      	bls.n	80019fa <Code_377+0x1e>
          adds tos, #55 @ Passendes Zeichen konstruieren
 80019f6:	3637      	adds	r6, #55	; 0x37
          b 3f
 80019f8:	e000      	b.n	80019fc <Code_377+0x20>
2:        adds tos, #48 @ Calculate ASCII
 80019fa:	3630      	adds	r6, #48	; 0x30
3:

        bl      emit
 80019fc:	f7ff fda6 	bl	800154c <Code_293>
        cmp     r0, #0
 8001a00:	2800      	cmp	r0, #0
        bne     1b
 8001a02:	d1f0      	bne.n	80019e6 <Code_377+0xa>

        bl space
 8001a04:	f7ff ff31 	bl	800186a <Code_342>
        pop     {r0, r1, r2, pc}
 8001a08:	bd07      	pop	{r0, r1, r2, pc}

08001a0a <Dictionary_380>:
 8001a0a:	1a1a      	.short	0x1a1a
 8001a0c:	00000800 	.word	0x00000800
 8001a10:	732e6803 	.word	0x732e6803

08001a14 <Code_380>:

@ -----------------------------------------------------------------------------
  Wortbirne Flag_visible, "h.s"  @ Prints out data stack, uses unsigned hexadecimal snumbers. 
hexdots: @ Malt den Stackinhalt, diesmal verschönert !
@ -----------------------------------------------------------------------------
        push {r0, r1, r2, r3, r4, lr}
 8001a14:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        ldr r4, =hexdot+1
 8001a16:	4c62      	ldr	r4, [pc, #392]	; (8001ba0 <unused_ram+0x12>)
        b.n 1f
 8001a18:	e00e      	b.n	8001a38 <Code_382+0x4>

08001a1a <Dictionary_381>:
 8001a1a:	1a2a      	.short	0x1a2a
 8001a1c:	00000800 	.word	0x00000800
 8001a20:	732e7503 	.word	0x732e7503

08001a24 <Code_381>:

@ -----------------------------------------------------------------------------
  Wortbirne Flag_visible, "u.s"  @ Prints out data stack, uses unsigned numbers. 
udots: @ Malt den Stackinhalt, diesmal verschönert !
@ -----------------------------------------------------------------------------
        push {r0, r1, r2, r3, r4, lr}
 8001a24:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        ldr r4, =udot+1
 8001a26:	4c5f      	ldr	r4, [pc, #380]	; (8001ba4 <unused_ram+0x16>)
        b.n 1f
 8001a28:	e006      	b.n	8001a38 <Code_382+0x4>

08001a2a <Dictionary_382>:
 8001a2a:	1ace      	.short	0x1ace
 8001a2c:	00000800 	.word	0x00000800
 8001a30:	2e02      	.short	0x2e02
 8001a32:	73          	.byte	0x73
	...

08001a34 <Code_382>:

@ -----------------------------------------------------------------------------
  Wortbirne Flag_visible, ".s"  @ Prints out data stack, uses signed numbers. 
dots: @ Malt den Stackinhalt, diesmal verschönert !
@ -----------------------------------------------------------------------------
  push {r0, r1, r2, r3, r4, lr}
 8001a34:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  ldr r4, =dot+1
 8001a36:	4c5c      	ldr	r4, [pc, #368]	; (8001ba8 <unused_ram+0x1a>)

1:@ Berechne den Stackfüllstand  Calculate number of elements on datastack
  ldr r1, =datenstackanfang @ Anfang laden
 8001a38:	495c      	ldr	r1, [pc, #368]	; (8001bac <unused_ram+0x1e>)
  subs r1, psp @ und aktuellen Stackpointer abziehen
 8001a3a:	1bc9      	subs	r1, r1, r7

  lsrs r1, #2 @ Durch die Größe der Elemente teilen  Divide by size of elements
 8001a3c:	0889      	lsrs	r1, r1, #2
  lsrs r2, r4, #8
 8001a3e:	0a22      	lsrs	r2, r4, #8
  movs r0, #32 @ Bits / Element
 8001a40:	2020      	movs	r0, #32

  @ Prüfe Datenstackpointer vor der Ausgabe  Check data stack pointer before printing
  cmp psp, #0x29
 8001a42:	2f29      	cmp	r7, #41	; 0x29

    lsrs r0, r4, #8
 8001a44:	0a20      	lsrs	r0, r4, #8
    cmp  r0, #32
 8001a46:	2820      	cmp	r0, #32
    subs r6, #0x27
 8001a48:	3e27      	subs	r6, #39	; 0x27
    lsrs r0, r4, #8
 8001a4a:	0a20      	lsrs	r0, r4, #8

  @ Noch eine weitere Probe, um auf Nummer sicher zu gehen  Another check to be sure
  cmp psp, #32
 8001a4c:	2f20      	cmp	r7, #32

    muls r3, r0
 8001a4e:	4343      	muls	r3, r0
    movs r0, #32
 8001a50:	2020      	movs	r0, #32
    adds r3, #32
 8001a52:	3320      	adds	r3, #32
    movs r0, #0x35
 8001a54:	2035      	movs	r0, #53	; 0x35

2:@ Ausgabepuffer vorbereien  Prepare string output buffer
  muls r3, r0
 8001a56:	4343      	muls	r3, r0
  lsrs r3, r0, #9
 8001a58:	0a43      	lsrs	r3, r0, #9
  ldrb r0, [r7, r0]
 8001a5a:	5c38      	ldrb	r0, [r7, r0]

  @ Prüfe Zahl der Elemente  Check number of elements
  cmp r1, #0x29
 8001a5c:	2929      	cmp	r1, #41	; 0x29

    movs r0, #0x5f
 8001a5e:	205f      	movs	r0, #95	; 0x5f
    lsrs r2, r1, #8
 8001a60:	0a0a      	lsrs	r2, r1, #8

3:@ Basis sichern und auf Dezimal schalten  Save Base and switch to decimal for stack fill gauge
  ldr r2, =base
 8001a62:	4a53      	ldr	r2, [pc, #332]	; (8001bb0 <unused_ram+0x22>)
  ldr r0, [r2]
 8001a64:	6810      	ldr	r0, [r2, #0]
  push {r0, r1}
 8001a66:	b403      	push	{r0, r1}

  movs r0, #10
 8001a68:	200a      	movs	r0, #10
  str r0, [r2]
 8001a6a:	6010      	str	r0, [r2, #0]

        write "Stack: ["
 8001a6c:	f7ff ff4e 	bl	800190c <dotgaensefuesschen>
 8001a70:	61745308 	.word	0x61745308
 8001a74:	203a6b63 	.word	0x203a6b63
 8001a78:	5b          	.byte	0x5b
 8001a79:	00          	.byte	0x00
        pushda r1
 8001a7a:	f847 6d04 	str.w	r6, [r7, #-4]!
 8001a7e:	000e      	movs	r6, r1
        bl dot  @ . bewahrt die Register nicht.  Doesn't save registers !
 8001a80:	f001 fcbd 	bl	80033fe <Code_863>
        write "] "
 8001a84:	f7ff ff42 	bl	800190c <dotgaensefuesschen>
 8001a88:	5d02      	.short	0x5d02
 8001a8a:	20          	.byte	0x20
 8001a8b:	00          	.byte	0x00

  @ Basis zurückholen  Restore Base
  pop {r0, r1}
 8001a8c:	bc03      	pop	{r0, r1}
  adds r6, #39
 8001a8e:	3627      	adds	r6, #39	; 0x27
  ldr r2, =base
 8001a90:	4a47      	ldr	r2, [pc, #284]	; (8001bb0 <unused_ram+0x22>)
  str r0, [r2]
 8001a92:	6010      	str	r0, [r2, #0]

  @ r1 enthält die Zahl der enthaltenen Elemente. r1 is number of elements
  cmp r1, #0 @ Bei einem leeren Stack ist nichts auszugeben.  Don't print elements for an empty stack
 8001a94:	2900      	cmp	r1, #0
  beq 2f
 8001a96:	d00a      	beq.n	8001aae <Code_382+0x7a>

  ldr r2, =datenstackanfang - 4 @ Anfang laden, wo ich beginne:  Start here !
 8001a98:	4a46      	ldr	r2, [pc, #280]	; (8001bb4 <unused_ram+0x26>)

1:@ Hole das Stackelement !  Fetch stack element directly
  ldr r0, [r2]
 8001a9a:	6810      	ldr	r0, [r2, #0]

  push {r1, r2}
 8001a9c:	b406      	push	{r1, r2}
  pushda r0
 8001a9e:	f847 6d04 	str.w	r6, [r7, #-4]!
 8001aa2:	0006      	movs	r6, r0
  blx r4 @ . bewahrt die Register nicht.  Doesn't save registers !
 8001aa4:	47a0      	blx	r4
  pop {r1, r2}
 8001aa6:	bc06      	pop	{r1, r2}

  subs r2, #4
 8001aa8:	3a04      	subs	r2, #4
  subs r1, #1
 8001aaa:	3901      	subs	r1, #1
  bne 1b
 8001aac:	d1f5      	bne.n	8001a9a <Code_382+0x66>

2:@ TOS zeigen  Print TOS
  write " TOS: "
 8001aae:	f7ff ff2d 	bl	800190c <dotgaensefuesschen>
 8001ab2:	2006      	.short	0x2006
 8001ab4:	3a534f54 	.word	0x3a534f54
 8001ab8:	20          	.byte	0x20
 8001ab9:	00          	.byte	0x00
  pushda tos
 8001aba:	f847 6d04 	str.w	r6, [r7, #-4]!
 8001abe:	0036      	movs	r6, r6
  blx r4
 8001ac0:	47a0      	blx	r4

  writeln " *>"
 8001ac2:	f7ff ff23 	bl	800190c <dotgaensefuesschen>
 8001ac6:	2004      	.short	0x2004
 8001ac8:	3e2a      	.short	0x3e2a
 8001aca:	0a          	.byte	0x0a
 8001acb:	00          	.byte	0x00
  pop {r0, r1, r2, r3, r4, pc}
 8001acc:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08001ace <Dictionary_393>:
 8001ace:	1b6e      	.short	0x1b6e
 8001ad0:	00000800 	.word	0x00000800
 8001ad4:	726f7705 	.word	0x726f7705
 8001ad8:	7364      	.short	0x7364

08001ada <Code_393>:

@ -----------------------------------------------------------------------------
  Wortbirne Flag_visible, "words" @ Print list of words with debug information
words: @ Malt den Dictionaryinhalt
@ -----------------------------------------------------------------------------
  push {lr}
 8001ada:	b500      	push	{lr}
  writeln ""
 8001adc:	f7ff ff16 	bl	800190c <dotgaensefuesschen>
 8001ae0:	0a01      	.short	0x0a01

  bl dictionarystart
 8001ae2:	f000 ff20 	bl	8002926 <Code_634>

1:@ Adresse:
  write "Address: "
 8001ae6:	f7ff ff11 	bl	800190c <dotgaensefuesschen>
 8001aea:	4109      	.short	0x4109
 8001aec:	65726464 	.word	0x65726464
 8001af0:	203a7373 	.word	0x203a7373
  dup
 8001af4:	f847 6d04 	str.w	r6, [r7, #-4]!
  bl hexdot
 8001af8:	f7ff ff70 	bl	80019dc <Code_377>

  @ Link
  write "Link: "
 8001afc:	f7ff ff06 	bl	800190c <dotgaensefuesschen>
 8001b00:	6e694c06 	.word	0x6e694c06
 8001b04:	3a6b      	.short	0x3a6b
 8001b06:	20          	.byte	0x20
 8001b07:	00          	.byte	0x00
  dup
 8001b08:	f847 6d04 	str.w	r6, [r7, #-4]!
  ldr tos, [tos]
 8001b0c:	6836      	ldr	r6, [r6, #0]
  bl hexdot
 8001b0e:	f7ff ff65 	bl	80019dc <Code_377>

  @ Flagfeld
  write "Flags: "
 8001b12:	f7ff fefb 	bl	800190c <dotgaensefuesschen>
 8001b16:	4607      	.short	0x4607
 8001b18:	7367616c 	.word	0x7367616c
 8001b1c:	203a      	.short	0x203a
  dup
 8001b1e:	f847 6d04 	str.w	r6, [r7, #-4]!
  ldrh tos, [tos, #4]
 8001b22:	88b6      	ldrh	r6, [r6, #4]
  bl hexdot
 8001b24:	f7ff ff5a 	bl	80019dc <Code_377>

  @ Einsprungadresse
  write "Code: "
 8001b28:	f7ff fef0 	bl	800190c <dotgaensefuesschen>
 8001b2c:	646f4306 	.word	0x646f4306
 8001b30:	3a65      	.short	0x3a65
 8001b32:	20          	.byte	0x20
 8001b33:	00          	.byte	0x00
  adds r0, tos, #6 @ Current location +2 for skipping Flags +4 for skipping Link contains name string.
 8001b34:	1db0      	adds	r0, r6, #6
  bl skipstring
 8001b36:	f000 ff30 	bl	800299a <skipstring>
  pushda r0
 8001b3a:	f847 6d04 	str.w	r6, [r7, #-4]!
 8001b3e:	0006      	movs	r6, r0
  bl hexdot
 8001b40:	f7ff ff4c 	bl	80019dc <Code_377>

  write "Name: "
 8001b44:	f7ff fee2 	bl	800190c <dotgaensefuesschen>
 8001b48:	6d614e06 	.word	0x6d614e06
 8001b4c:	3a65      	.short	0x3a65
 8001b4e:	20          	.byte	0x20
 8001b4f:	00          	.byte	0x00
  dup
 8001b50:	f847 6d04 	str.w	r6, [r7, #-4]!
  adds tos, #6 @ Current location +2 for skipping Flags +4 for skipping Link contains name string.
 8001b54:	3606      	adds	r6, #6
  bl type
 8001b56:	f7ff ff21 	bl	800199c <Code_373>

  writeln ""
 8001b5a:	f7ff fed7 	bl	800190c <dotgaensefuesschen>
 8001b5e:	0a01      	.short	0x0a01

  bl dictionarynext
 8001b60:	f000 fef8 	bl	8002954 <Code_636>
  popda r0
 8001b64:	0030      	movs	r0, r6
 8001b66:	cf40      	ldmia	r7!, {r6}
  beq 1b
 8001b68:	d0bd      	beq.n	8001ae6 <Code_393+0xc>

  drop
 8001b6a:	cf40      	ldmia	r7!, {r6}
  pop {pc}
 8001b6c:	bd00      	pop	{pc}

08001b6e <Dictionary_413>:
 8001b6e:	1bc0      	.short	0x1bc0
 8001b70:	00000800 	.word	0x00000800
 8001b74:	756e7506 	.word	0x756e7506
 8001b78:	6573      	.short	0x6573
 8001b7a:	64          	.byte	0x64
	...

08001b7c <Code_413>:

@ -----------------------------------------------------------------------------
  Wortbirne Flag_visible, "unused" @ Bytes free for compilation in current memory area
unused:
@ -----------------------------------------------------------------------------
  push {lr}
 8001b7c:	b500      	push	{lr}
  bl flashvarhere
 8001b7e:	f000 ffb9 	bl	8002af4 <Code_665>

  ldr r0, =Dictionarypointer @ Check Dictionarypointer to decide if we are currently compiling for Flash or for RAM.
 8001b82:	480d      	ldr	r0, [pc, #52]	; (8001bb8 <unused_ram+0x2a>)
  ldr r1, [r0]
 8001b84:	6801      	ldr	r1, [r0, #0]

  ldr r2, =Backlinkgrenze
 8001b86:	4a0c      	ldr	r2, [pc, #48]	; (8001bb8 <unused_ram+0x2a>)
  cmp r1, r2
 8001b88:	4291      	cmp	r1, r2
  bhs.n unused_ram
 8001b8a:	d200      	bcs.n	8001b8e <unused_ram>
    
    ldr tos, =FlashDictionaryEnde
 8001b8c:	4e0b      	ldr	r6, [pc, #44]	; (8001bbc <unused_ram+0x2e>)

08001b8e <unused_ram>:

unused_ram:  
  subs tos, r1
 8001b8e:	1a76      	subs	r6, r6, r1
  pop {pc}
 8001b90:	bd00      	pop	{pc}
 8001b92:	0000      	.short	0x0000
  ldr r0, =dotgaensefuesschen
 8001b94:	0800190c 	.word	0x0800190c
  ldr r0, =dotcfuesschen
 8001b98:	08001936 	.word	0x08001936
  ldr r0, =dotsfuesschen
 8001b9c:	0800195c 	.word	0x0800195c
        ldr r4, =hexdot+1
 8001ba0:	080019dd 	.word	0x080019dd
        ldr r4, =udot+1
 8001ba4:	080033ef 	.word	0x080033ef
  ldr r4, =dot+1
 8001ba8:	080033ff 	.word	0x080033ff
  ldr r1, =datenstackanfang @ Anfang laden
 8001bac:	20001330 	.word	0x20001330
  ldr r2, =base
 8001bb0:	2001fffc 	.word	0x2001fffc
  ldr r2, =datenstackanfang - 4 @ Anfang laden, wo ich beginne:  Start here !
 8001bb4:	2000132c 	.word	0x2000132c
  ldr r0, =Dictionarypointer @ Check Dictionarypointer to decide if we are currently compiling for Flash or for RAM.
 8001bb8:	20001000 	.word	0x20001000
    ldr tos, =FlashDictionaryEnde
 8001bbc:	080c0000 	.word	0x080c0000

08001bc0 <Dictionary_414>:
 8001bc0:	08001d24 	.word	0x08001d24
 8001bc4:	310d0000 	.word	0x310d0000
 8001bc8:	74696232 	.word	0x74696232
 8001bcc:	6f636e65 	.word	0x6f636e65
 8001bd0:	676e6964 	.word	0x676e6964

08001bd4 <Code_414>:

@ -----------------------------------------------------------------------------
  Wortbirne Flag_visible, "12bitencoding" @ ( x -- bitmask true | x false )
twelvebitencoding:
@ -----------------------------------------------------------------------------
  push {r0, r1, r2, r3, lr}
 8001bd4:	b50f      	push	{r0, r1, r2, r3, lr}

  @ If this is a 8 bit constant, the encoding is finished.
  cmp tos, #255
 8001bd6:	2eff      	cmp	r6, #255	; 0xff
  bhi 1f
 8001bd8:	d804      	bhi.n	8001be4 <Code_414+0x10>
    @ writeln "12bitencoding: 0x000000XY"
    pushdatos       @ True-Flag
 8001bda:	f847 6d04 	str.w	r6, [r7, #-4]!
    movs tos, #-1
 8001bde:	f05f 36ff 	movs.w	r6, #4294967295	; 0xffffffff
    pop {r0, r1, r2, r3, pc}
 8001be2:	bd0f      	pop	{r0, r1, r2, r3, pc}
1:@ This is not a lowest-8-bits-only constant. 
  @ Check for other possibilities:

  @ 0x00XY00XY

  ands r0, tos, #0x00FF00FF 
 8001be4:	f016 10ff 	ands.w	r0, r6, #16711935	; 0xff00ff
  cmp r0, tos
 8001be8:	42b0      	cmp	r0, r6
  bne 2f
 8001bea:	d10e      	bne.n	8001c0a <Code_414+0x36>

    movw r1, 0xFFFF
 8001bec:	f64f 71ff 	movw	r1, #65535	; 0xffff
    ands r0, r1
 8001bf0:	4008      	ands	r0, r1
    lsrs r1, tos, #16
 8001bf2:	0c31      	lsrs	r1, r6, #16
    cmp r1, r0
 8001bf4:	4281      	cmp	r1, r0
    bne 2f
 8001bf6:	d108      	bne.n	8001c0a <Code_414+0x36>
      @ writeln "12bitencoding: 0x00XY00XY"
      ands tos, #0xFF
 8001bf8:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
      orrs tos, #0x00001000
 8001bfc:	f456 5680 	orrs.w	r6, r6, #4096	; 0x1000
      pushdatos       @ True-Flag
 8001c00:	f847 6d04 	str.w	r6, [r7, #-4]!
      movs tos, #-1
 8001c04:	f05f 36ff 	movs.w	r6, #4294967295	; 0xffffffff
      pop {r0, r1, r2, r3, pc}
 8001c08:	bd0f      	pop	{r0, r1, r2, r3, pc}

2: 

  @ 0xXY00XY00

  ands r0, tos, #0xFF00FF00
 8001c0a:	f016 20ff 	ands.w	r0, r6, #4278255360	; 0xff00ff00
  cmp r0, tos
 8001c0e:	42b0      	cmp	r0, r6
  bne 3f
 8001c10:	d10f      	bne.n	8001c32 <Code_414+0x5e>

    movw r1, #0xFFFF
 8001c12:	f64f 71ff 	movw	r1, #65535	; 0xffff
    ands r0, r1
 8001c16:	4008      	ands	r0, r1
    lsrs r1, tos, #16
 8001c18:	0c31      	lsrs	r1, r6, #16
    cmp r1, r0
 8001c1a:	4281      	cmp	r1, r0
    bne 3f
 8001c1c:	d109      	bne.n	8001c32 <Code_414+0x5e>
      @ writeln "12bitencoding: 0xXY00XY00"
      lsrs tos, #8
 8001c1e:	0a36      	lsrs	r6, r6, #8
      ands tos, #0xFF
 8001c20:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
      orrs tos, #0x00002000
 8001c24:	f456 5600 	orrs.w	r6, r6, #8192	; 0x2000
      pushdatos       @ True-Flag  
 8001c28:	f847 6d04 	str.w	r6, [r7, #-4]!
      movs tos, #-1
 8001c2c:	f05f 36ff 	movs.w	r6, #4294967295	; 0xffffffff
      pop {r0, r1, r2, r3, pc}
 8001c30:	bd0f      	pop	{r0, r1, r2, r3, pc}

3: 

  @ 0xXYXYXYXY

  movs r2, #0xFF
 8001c32:	22ff      	movs	r2, #255	; 0xff
  movs r1, tos
 8001c34:	0031      	movs	r1, r6
  ands r1, r2
 8001c36:	4011      	ands	r1, r2

  lsrs r0, tos, #8
 8001c38:	0a30      	lsrs	r0, r6, #8
  ands r0, r2
 8001c3a:	4010      	ands	r0, r2
  cmp r0, r1
 8001c3c:	4288      	cmp	r0, r1
  bne 4f
 8001c3e:	d110      	bne.n	8001c62 <Code_414+0x8e>

  lsrs r0, tos, #16
 8001c40:	0c30      	lsrs	r0, r6, #16
  ands r0, r2
 8001c42:	4010      	ands	r0, r2
  cmp r0, r1
 8001c44:	4288      	cmp	r0, r1
  bne 4f
 8001c46:	d10c      	bne.n	8001c62 <Code_414+0x8e>

  lsrs r0, tos, #24
 8001c48:	0e30      	lsrs	r0, r6, #24
  ands r0, r2
 8001c4a:	4010      	ands	r0, r2
  cmp r0, r1
 8001c4c:	4288      	cmp	r0, r1
  bne 4f
 8001c4e:	d108      	bne.n	8001c62 <Code_414+0x8e>
    @ writeln "12bitencoding: 0xXYXYXYXY"
    ands tos, #0xFF
 8001c50:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
    orrs tos, #0x00003000
 8001c54:	f456 5640 	orrs.w	r6, r6, #12288	; 0x3000
    pushdatos       @ True-Flag   
 8001c58:	f847 6d04 	str.w	r6, [r7, #-4]!
    movs tos, #-1
 8001c5c:	f05f 36ff 	movs.w	r6, #4294967295	; 0xffffffff
    pop {r0, r1, r2, r3, pc}
 8001c60:	bd0f      	pop	{r0, r1, r2, r3, pc}
    @ 2 of $FF and        8 lshift dup 16 lshift or const. endof \ 0xXY00XY00
    @ 3 of $FF and dup 8 lshift or dup 16 lshift or const. endof \ 0xXYXYXYXY

  @ Can we generate this by rotating into an 8 bit constant ?

  movs r0, tos @ Backup of value if we cannot express this as a shifted constant
 8001c62:	0030      	movs	r0, r6
  movs r1, #0  @ Counter of shifts
 8001c64:	2100      	movs	r1, #0

5:@ Rotating loop to determine amount of shifts necessary

  adds r1, #1
 8001c66:	3101      	adds	r1, #1

  @ Rotate left by one bit place
  adds r0, r0, r0
 8001c68:	1800      	adds	r0, r0, r0
  adcs r0, #0
 8001c6a:	f150 0000 	adcs.w	r0, r0, #0

  @ Does this fit into 8 bits with "msb" set: %1xxx xxxx ?
  movs r2, #0xFFFFFF80
 8001c6e:	f07f 027f 	mvns.w	r2, #127	; 0x7f
  ands r2, r0
 8001c72:	4002      	ands	r2, r0
  cmp r2, #0x80
 8001c74:	2a80      	cmp	r2, #128	; 0x80
  beq 6f
 8001c76:	d005      	beq.n	8001c84 <Code_414+0xb0>

  @ Not this time.
  cmp r1, #31
 8001c78:	291f      	cmp	r1, #31
  blo 5b
 8001c7a:	d3f4      	bcc.n	8001c66 <Code_414+0x92>

7:@ Fallthrough if not possible to encode constant in 12 bits
  @ writeln "12bitencoding: unknown"
  pushdatos       @ False-Flag
 8001c7c:	f847 6d04 	str.w	r6, [r7, #-4]!
  movs tos, #0
 8001c80:	2600      	movs	r6, #0
  pop {r0, r1, r2, r3, pc}
 8001c82:	bd0f      	pop	{r0, r1, r2, r3, pc}

   @ write " Constant: "
   @ pushda r0
   @ bl hexdot

  cmp r1, #8
 8001c84:	2908      	cmp	r1, #8
  blo 7b
 8001c86:	d3f9      	bcc.n	8001c7c <Code_414+0xa8>

  @ if imm12<11:10> == '00' then Spezialfälle.
  @ We can only opcode this if the topmost 1 bits of shift count are not 00.
  @ At least a shift of "%01 000" = 8 is required. Special cases are encoded below.

  movs tos, r0 @ Shifted constant
 8001c88:	0006      	movs	r6, r0
  bics tos, #0x80 @ Clear MSB (which is always set here)
 8001c8a:	f036 0680 	bics.w	r6, r6, #128	; 0x80
  @ Encode shift accordingly
  @ Shift-Bit 0 goes into bit 7 of bitmask
  @ Shift-Bits 1, 2, 3 go into bit 12, 13, 14 of bitmask
  @ Shift-Bit 4 goes into bit 26 of bitmask

  ands r0, r1, #0x1
 8001c8e:	f011 0001 	ands.w	r0, r1, #1
  lsls r0, #7
 8001c92:	01c0      	lsls	r0, r0, #7
  orrs tos, r0
 8001c94:	4306      	orrs	r6, r0

  ands r0, r1, #0xE
 8001c96:	f011 000e 	ands.w	r0, r1, #14
  lsls r0, #11
 8001c9a:	02c0      	lsls	r0, r0, #11
  orrs tos, r0
 8001c9c:	4306      	orrs	r6, r0

  ands r0, r1, #0x10
 8001c9e:	f011 0010 	ands.w	r0, r1, #16
  lsls r0, #22
 8001ca2:	0580      	lsls	r0, r0, #22
  orrs tos, r0
 8001ca4:	4306      	orrs	r6, r0
   
  pushdatos       @ True-Flag
 8001ca6:	f847 6d04 	str.w	r6, [r7, #-4]!
  movs tos, #-1
 8001caa:	f05f 36ff 	movs.w	r6, #4294967295	; 0xffffffff
  pop {r0, r1, r2, r3, pc}
 8001cae:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001cb0 <movwkomma>:

@ -----------------------------------------------------------------------------
movwkomma: @ Register r0: Konstante                                    Constant
           @ Register r3: Zielregister, fertig geschoben zum Verodern  Destination register, readily shifted to be ORed with opcode.
@ -----------------------------------------------------------------------------
  pushdatos    @ Platz auf dem Datenstack schaffen 
 8001cb0:	f847 6d04 	str.w	r6, [r7, #-4]!
  ldr tos, =0xf2400000 @ Opcode movw r0, #0
 8001cb4:	f8df 6690 	ldr.w	r6, [pc, #1680]	; 8002348 <setflags_ram+0x1e>

  movs r1, #0x0000F000  @ Bit 16 - 13
 8001cb8:	f45f 4170 	movs.w	r1, #61440	; 0xf000
  ands r2, r0, r1       @ aus der Adresse maskieren   Mask bits of constant
 8001cbc:	ea10 0201 	ands.w	r2, r0, r1
  lsls r2, #4           @ passend schieben            shift them accordingly
 8001cc0:	0112      	lsls	r2, r2, #4
  orrs tos, r2          @ zum Opcode hinzufügen       and OR them to opcode.
 8001cc2:	4316      	orrs	r6, r2

  movs r1, #0x00000800  @ Bit 12
 8001cc4:	f45f 6100 	movs.w	r1, #2048	; 0x800
  ands r2, r0, r1       @ aus der Adresse maskieren   ...
 8001cc8:	ea10 0201 	ands.w	r2, r0, r1
  lsls r2, #15          @ passend schieben
 8001ccc:	03d2      	lsls	r2, r2, #15
  orrs tos, r2          @ zum Opcode hinzufügen
 8001cce:	4316      	orrs	r6, r2

  movs r1, #0x00000700  @ Bit 11 - 9
 8001cd0:	f45f 61e0 	movs.w	r1, #1792	; 0x700
  ands r2, r0, r1       @ aus der Adresse maskieren
 8001cd4:	ea10 0201 	ands.w	r2, r0, r1
  lsls r2, #4           @ passend schieben
 8001cd8:	0112      	lsls	r2, r2, #4
  orrs tos, r2          @ zum Opcode hinzufügen
 8001cda:	4316      	orrs	r6, r2

  movs r1, #0x000000FF  @ Bit 8 - 1
 8001cdc:	21ff      	movs	r1, #255	; 0xff
  ands r2, r0, r1       @ aus der Adresse maskieren
 8001cde:	ea10 0201 	ands.w	r2, r0, r1
  @ lsrs r2, #0         @ passend schieben
  orrs tos, r2          @ zum Opcode hinzufügen
 8001ce2:	4316      	orrs	r6, r2

  @ Füge den gewünschten Register hinzu:  OR desired target register.
  orrs tos, r3
 8001ce4:	431e      	orrs	r6, r3
  
  b.n reversekomma @ Insert finished movw Opcode into Dictionary
 8001ce6:	e3b5      	b.n	8002454 <Code_553>

08001ce8 <movtkomma>:

@ -----------------------------------------------------------------------------
movtkomma: @ Register r0: Konstante                                    Constant
           @ Register r3: Zielregister, fertig geschoben zum Verodern  Destination register, readily shifted to be ORed with opcode.
@ -----------------------------------------------------------------------------
  pushdatos    @ Platz auf dem Datenstack schaffen
 8001ce8:	f847 6d04 	str.w	r6, [r7, #-4]!
  ldr tos, =0xf2c00000 @ Opcode movt r0, #0
 8001cec:	f8df 665c 	ldr.w	r6, [pc, #1628]	; 800234c <setflags_ram+0x22>

  movs r1, #0xF0000000  @ Bit 32 - 29
 8001cf0:	f05f 4170 	movs.w	r1, #4026531840	; 0xf0000000
  ands r2, r0, r1       @ aus der Adresse maskieren
 8001cf4:	ea10 0201 	ands.w	r2, r0, r1
  lsrs r2, #12          @ passend schieben
 8001cf8:	0b12      	lsrs	r2, r2, #12
  orrs tos, r2          @ zum Opcode hinzufügen
 8001cfa:	4316      	orrs	r6, r2

  movs r1, #0x08000000  @ Bit 28
 8001cfc:	f05f 6100 	movs.w	r1, #134217728	; 0x8000000
  ands r2, r0, r1       @ aus der Adresse maskieren
 8001d00:	ea10 0201 	ands.w	r2, r0, r1
  lsrs r2, #1           @ passend schieben
 8001d04:	0852      	lsrs	r2, r2, #1
  orrs tos, r2          @ zum Opcode hinzufügen
 8001d06:	4316      	orrs	r6, r2

  movs r1, #0x07000000  @ Bit 27 - 25
 8001d08:	f05f 61e0 	movs.w	r1, #117440512	; 0x7000000
  ands r2, r0, r1       @ aus der Adresse maskieren
 8001d0c:	ea10 0201 	ands.w	r2, r0, r1
  lsrs r2, #12          @ passend schieben
 8001d10:	0b12      	lsrs	r2, r2, #12
  orrs tos, r2          @ zum Opcode hinzufügen
 8001d12:	4316      	orrs	r6, r2

  movs r1, #0x00FF0000  @ Bit 24 - 17
 8001d14:	f45f 017f 	movs.w	r1, #16711680	; 0xff0000
  ands r2, r0, r1       @ aus der Adresse maskieren
 8001d18:	ea10 0201 	ands.w	r2, r0, r1
  lsrs r2, #16          @ passend schieben
 8001d1c:	0c12      	lsrs	r2, r2, #16
  orrs tos, r2          @ zum Opcode hinzufügen
 8001d1e:	4316      	orrs	r6, r2

  @ Füge den gewünschten Register hinzu:
  orrs tos, r3
 8001d20:	431e      	orrs	r6, r3

  b.n reversekomma @ Insert finished movt Opcode into Dictionary
 8001d22:	e397      	b.n	8002454 <Code_553>

08001d24 <Dictionary_423>:
 8001d24:	08001d8a 	.word	0x08001d8a
 8001d28:	72100000 	.word	0x72100000
 8001d2c:	73696765 	.word	0x73696765
 8001d30:	6c726574 	.word	0x6c726574
 8001d34:	72657469 	.word	0x72657469
 8001d38:	6c61      	.short	0x6c61
 8001d3a:	2c          	.byte	0x2c
	...

08001d3c <Code_423>:

@ -----------------------------------------------------------------------------
  Wortbirne Flag_visible, "registerliteral," @ ( x Register -- )
registerliteralkomma: @ Compile code to put a literal constant into a register.
@ -----------------------------------------------------------------------------
  push {r0, r1, r2, r3, lr}
 8001d3c:	b50f      	push	{r0, r1, r2, r3, lr}

  popda r3    @ Hole die Registermaske               Fetch register to generate constant for
 8001d3e:	0033      	movs	r3, r6
 8001d40:	cf40      	ldmia	r7!, {r6}
  lsls r3, #8 @ Den Register um 8 Stellen schieben   Shift register accordingly for opcode generation
 8001d42:	021b      	lsls	r3, r3, #8

  @ Generiere movs-Opcode für sehr kleine Konstanten :-)
  @ Generate short movs Opcode for small constants within 0 and 255

  cmp tos, #0xFF @ Does literal fit in 8 bits ?
 8001d44:	2eff      	cmp	r6, #255	; 0xff
  bhi 1f         @ Gewünschte Konstante passt in 8 Bits. 
 8001d46:	d805      	bhi.n	8001d54 <Code_423+0x18>
    @ Generate opcode for movs target, #...
    orrs tos, #0x2000 @ MOVS-Opcode
 8001d48:	f456 5600 	orrs.w	r6, r6, #8192	; 0x2000
    orrs tos, r3      @ OR with register
 8001d4c:	431e      	orrs	r6, r3
    bl hkomma
 8001d4e:	f000 fb59 	bl	8002404 <Code_544>
    pop {r0, r1, r2, r3, pc}
 8001d52:	bd0f      	pop	{r0, r1, r2, r3, pc}

1:@ Check if constant can be opcoded into a long 32 bit movs opcode.
  bl twelvebitencoding
 8001d54:	f7ff ff3e 	bl	8001bd4 <Code_414>

  cmp tos, #0
 8001d58:	2e00      	cmp	r6, #0
  drop @ Preserves Flags !
 8001d5a:	cf40      	ldmia	r7!, {r6}
  beq 2f
 8001d5c:	d006      	beq.n	8001d6c <Code_423+0x30>
    ldr r0, =0xF05F0000 @ movs r0, #imm12 Opcode
 8001d5e:	f8df 05f0 	ldr.w	r0, [pc, #1520]	; 8002350 <setflags_ram+0x26>
    orrs tos, r0
 8001d62:	4306      	orrs	r6, r0
    orrs tos, r3        @ OR with register
 8001d64:	431e      	orrs	r6, r3
    bl reversekomma
 8001d66:	f000 fb75 	bl	8002454 <Code_553>
    pop {r0, r1, r2, r3, pc}
 8001d6a:	bd0f      	pop	{r0, r1, r2, r3, pc}

2:@ Check if constant can be opcoded into a long 32 bit mvns opcode.

  mvns tos, tos @ Invert constant
 8001d6c:	43f6      	mvns	r6, r6
  bl twelvebitencoding
 8001d6e:	f7ff ff31 	bl	8001bd4 <Code_414>

  cmp tos, #0
 8001d72:	2e00      	cmp	r6, #0
  drop @ Preserves Flags !
 8001d74:	cf40      	ldmia	r7!, {r6}
  beq 3f
 8001d76:	d006      	beq.n	8001d86 <Code_423+0x4a>
    ldr r0, =0xF07F0000 @ mvns r0, #imm12 Opcode
 8001d78:	f8df 05d8 	ldr.w	r0, [pc, #1496]	; 8002354 <setflags_ram+0x2a>
    orrs tos, r0
 8001d7c:	4306      	orrs	r6, r0
    orrs tos, r3        @ OR with register
 8001d7e:	431e      	orrs	r6, r3
    bl reversekomma
 8001d80:	f000 fb68 	bl	8002454 <Code_553>
    pop {r0, r1, r2, r3, pc}
 8001d84:	bd0f      	pop	{r0, r1, r2, r3, pc}

3:mvns tos, tos @ Invert back to original constant
 8001d86:	43f6      	mvns	r6, r6
  @ Generate a movw/movt Opcode
  b.n movwmovt_register_r3
 8001d88:	e00b      	b.n	8001da2 <movwmovt_register_r3>

08001d8a <Dictionary_427>:
 8001d8a:	1dea      	.short	0x1dea
 8001d8c:	00000800 	.word	0x00000800
 8001d90:	766f6d09 	.word	0x766f6d09
 8001d94:	766f6d77 	.word	0x766f6d77
 8001d98:	2c74      	.short	0x2c74

08001d9a <Code_427>:

@ -----------------------------------------------------------------------------
  Wortbirne Flag_visible, "movwmovt," @ ( x Register -- )
  @ Compile code to put a literal constant into any register.
@ -----------------------------------------------------------------------------
  push {r0, r1, r2, r3, lr}
 8001d9a:	b50f      	push	{r0, r1, r2, r3, lr}
  
  popda r3    @ Hole die Registermaske               Fetch register to generate constant for
 8001d9c:	0033      	movs	r3, r6
 8001d9e:	cf40      	ldmia	r7!, {r6}
  lsls r3, #8 @ Den Register um 8 Stellen schieben   Shift register accordingly for opcode generation
 8001da0:	021b      	lsls	r3, r3, #8

08001da2 <movwmovt_register_r3>:

movwmovt_register_r3:
  popda r0    @ Hole die Konstante                   Fetch constant
 8001da2:	0030      	movs	r0, r6
 8001da4:	cf40      	ldmia	r7!, {r6}
  @ Long constant that cannot be encoded in a small and simple way.
  @ Generate movw and movt pairs.

  bl movwkomma
 8001da6:	f7ff ff83 	bl	8001cb0 <movwkomma>

  @ ldr r1, =0xffff0000 @ High-Teil
  @ ands r0, r1 
  @ cmp r0, #0 

  movw r1, #0xFFFF          @ Wenn der High-Teil Null ist, brauche ich keinen movt-Opcode mehr zu generieren.
 8001daa:	f64f 71ff 	movw	r1, #65535	; 0xffff
  ands r0, r0, r1, lsl #16  @ If High-Part is zero there is no need to generate a movt opcode.
 8001dae:	ea10 4001 	ands.w	r0, r0, r1, lsl #16
  beq 3f
 8001db2:	d001      	beq.n	8001db8 <movwmovt_register_r3+0x16>

    bl movtkomma @ Bei Bedarf einfügen
 8001db4:	f7ff ff98 	bl	8001ce8 <movtkomma>

3:pop {r0, r1, r2, r3, pc}
 8001db8:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001dba <callkommalang>:
@ -----------------------------------------------------------------------------
  @ Dies ist ein bisschen schwierig und muss nochmal gründlich optimiert werden.
  @ Schreibe einen ganz langen Sprung ins Dictionary !
  @ Wichtig für <builds does> wo die Lückengröße vorher festliegen muss.

  push {r0, r1, r2, r3, lr}
 8001dba:	b50f      	push	{r0, r1, r2, r3, lr}
  adds tos, #1 @ Ungerade Adresse für Thumb-Befehlssatz   Uneven target address for Thumb instruction set !
 8001dbc:	3601      	adds	r6, #1

  popda r0     @ Zieladresse holen    Destination address
 8001dbe:	0030      	movs	r0, r6
 8001dc0:	cf40      	ldmia	r7!, {r6}
  movs r3, #0  @ Register r0 wählen   Choose register r0
 8001dc2:	2300      	movs	r3, #0
  bl movwkomma
 8001dc4:	f7ff ff74 	bl	8001cb0 <movwkomma>
  bl movtkomma
 8001dc8:	f7ff ff8e 	bl	8001ce8 <movtkomma>

  b.n callkommakurz_intern
 8001dcc:	e006      	b.n	8001ddc <callkommakurz_intern>

08001dce <callkommakurz>:
               @ Writes a movw-call or a movw-movt-call if destination address is too far away.
@ ----------------------------------------------------------------------------
  @ Dies ist ein bisschen schwierig und muss nochmal gründlich optimiert werden.
  @ Gedanke: Für kurze Call-Distanzen die BL-Opcodes benutzen.

  push {r0, r1, r2, r3, lr}
 8001dce:	b50f      	push	{r0, r1, r2, r3, lr}
  adds tos, #1 @ Ungerade Adresse für Thumb-Befehlssatz
 8001dd0:	3601      	adds	r6, #1

  pushdaconst 0 @ Register r0
 8001dd2:	f847 6d04 	str.w	r6, [r7, #-4]!
 8001dd6:	2600      	movs	r6, #0
  bl registerliteralkomma
 8001dd8:	f7ff ffb0 	bl	8001d3c <Code_423>

08001ddc <callkommakurz_intern>:

callkommakurz_intern:
  pushdaconstw 0x4780 @ blx r0
 8001ddc:	f847 6d04 	str.w	r6, [r7, #-4]!
 8001de0:	f244 7680 	movw	r6, #18304	; 0x4780
  bl hkomma
 8001de4:	f000 fb0e 	bl	8002404 <Code_544>
  pop {r0, r1, r2, r3, pc}  
 8001de8:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001dea <Dictionary_435>:
 8001dea:	1e50      	.short	0x1e50
 8001dec:	00000800 	.word	0x00000800
 8001df0:	6c616305 	.word	0x6c616305
 8001df4:	2c6c      	.short	0x2c6c

08001df6 <Code_435>:
            @ Je nachdem: bl ...                            (4 Bytes)
            @             movw r0, ...              blx r0  (6 Bytes)
            @             movw r0, ... movt r0, ... blx r0 (10 Bytes)
@ ----------------------------------------------------------------------------

  push {r0, r1, r2, r3, lr}
 8001df6:	b50f      	push	{r0, r1, r2, r3, lr}
  movs r3, tos @ Behalte Sprungziel auf dem Stack  Keep destination on stack
 8001df8:	0033      	movs	r3, r6
  @ ( Zieladresse )

  bl here
 8001dfa:	f000 fe6c 	bl	8002ad6 <Code_663>
  popda r0 @ Adresse-der-Opcodelücke  Where the opcodes shall be inserted...
 8001dfe:	0030      	movs	r0, r6
 8001e00:	cf40      	ldmia	r7!, {r6}
  
  subs r3, r0     @ Differenz aus Lücken-Adresse und Sprungziel bilden   Calculate relative jump offset
 8001e02:	1a1b      	subs	r3, r3, r0
  subs r3, #4     @ Da der aktuelle Befehl noch läuft und es komischerweise andere Offsets beim ARM gibt.  Current instruction still running...
 8001e04:	3b04      	subs	r3, #4
  @ also habe ich 21 freie Bits, das oberste muss mit dem restlichen Vorzeichen übereinstimmen. 

  @ BL opcodes support 22 Bits jump range - one of that for sign.
  @ Check if BL range is enough to reach target:

  ldr r1, =0xFFC00001   @ 21 Bits frei
 8001e06:	f8df 1550 	ldr.w	r1, [pc, #1360]	; 8002358 <setflags_ram+0x2e>
  ands r1, r3
 8001e0a:	4019      	ands	r1, r3
  cmp r1, #0  @ Wenn dies Null ergibt, positive Distanz ok.
 8001e0c:	2900      	cmp	r1, #0
  beq 1f
 8001e0e:	d006      	beq.n	8001e1e <Code_435+0x28>

  ldr r2, =0xFFC00000
 8001e10:	f8df 2548 	ldr.w	r2, [pc, #1352]	; 800235c <setflags_ram+0x32>
  cmp r1, r2
 8001e14:	4291      	cmp	r1, r2
  beq 1f      @ Wenn es gleich ist: Negative Distanz ok.
 8001e16:	d002      	beq.n	8001e1e <Code_435+0x28>
    pop {r0, r1, r2, r3, lr}
 8001e18:	e8bd 400f 	ldmia.w	sp!, {r0, r1, r2, r3, lr}
    b.n callkommakurz @ Too far away - BL cannot reach that destination. Time for long distance opcodes :-)
 8001e1c:	e7d7      	b.n	8001dce <callkommakurz>
1:

  @ Within reach of BL. Generate the opcode !

  @ ( Zieladresse )
  drop
 8001e1e:	cf40      	ldmia	r7!, {r6}
  @ BL: S | imm10 || imm11
  @ Also 22 Bits, wovon das oberste das Vorzeichen sein soll.

  @ r3 enthält die Distanz:

  lsrs r3, #1            @ Bottom bit ignored
 8001e20:	085b      	lsrs	r3, r3, #1
    ldr r0, =0xF000F800  @ Opcode-Template
 8001e22:	f8df 053c 	ldr.w	r0, [pc, #1340]	; 8002360 <setflags_ram+0x36>

    movw r1, #0x7FF       @ Bottom 11 bits of immediate
 8001e26:	f240 71ff 	movw	r1, #2047	; 0x7ff
    ands r1, r3
 8001e2a:	4019      	ands	r1, r3
    orrs r0, r1
 8001e2c:	4308      	orrs	r0, r1

  lsrs r3, #11
 8001e2e:	0adb      	lsrs	r3, r3, #11

    movw r1, #0x3FF       @ 10 more bits shifted to second half
 8001e30:	f240 31ff 	movw	r1, #1023	; 0x3ff
    ands r1, r3
 8001e34:	4019      	ands	r1, r3
    lsls r1, #16
 8001e36:	0409      	lsls	r1, r1, #16
    orrs r0, r1
 8001e38:	4308      	orrs	r0, r1

  lsrs r3, #10         
 8001e3a:	0a9b      	lsrs	r3, r3, #10

    ands r1, r3, #1      @ Next bit, treated as sign, shifted into bit 26.
 8001e3c:	f013 0101 	ands.w	r1, r3, #1
    lsls r1, #26
 8001e40:	0689      	lsls	r1, r1, #26
    orrs r0, r1
 8001e42:	4308      	orrs	r0, r1

  @ Opcode fertig in r0
  pushda r0
 8001e44:	f847 6d04 	str.w	r6, [r7, #-4]!
 8001e48:	0006      	movs	r6, r0
  bl reversekomma  @ Write finished opcode into Dictionary.
 8001e4a:	f000 fb03 	bl	8002454 <Code_553>

  pop {r0, r1, r2, r3, pc}
 8001e4e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001e50 <Dictionary_440>:
 8001e50:	08001e86 	.word	0x08001e86
 8001e54:	6c080000 	.word	0x6c080000
 8001e58:	72657469 	.word	0x72657469
 8001e5c:	6c61      	.short	0x6c61
 8001e5e:	2c          	.byte	0x2c
	...

08001e60 <Code_440>:

@ -----------------------------------------------------------------------------
  Wortbirne Flag_visible, "literal," @ ( x -- )
literalkomma: @ Save r1, r2 and r3 !
@ -----------------------------------------------------------------------------
  push {r3, lr}
 8001e60:	b508      	push	{r3, lr}

  pushdaconstw 0xf847  @ str tos, [psp, #-4]!
 8001e62:	f847 6d04 	str.w	r6, [r7, #-4]!
 8001e66:	f64f 0647 	movw	r6, #63559	; 0xf847
  bl hkomma
 8001e6a:	f000 facb 	bl	8002404 <Code_544>
  pushdaconstw 0x6d04
 8001e6e:	f847 6d04 	str.w	r6, [r7, #-4]!
 8001e72:	f646 5604 	movw	r6, #27908	; 0x6d04
  bl hkomma
 8001e76:	f000 fac5 	bl	8002404 <Code_544>

  pushdaconst 6 @ Gleich in r6=tos legen
 8001e7a:	f847 6d04 	str.w	r6, [r7, #-4]!
 8001e7e:	2606      	movs	r6, #6
  bl registerliteralkomma
 8001e80:	f7ff ff5c 	bl	8001d3c <Code_423>

  pop {r3, pc}
 8001e84:	bd08      	pop	{r3, pc}

08001e86 <Dictionary_447>:
 8001e86:	1eaa      	.short	0x1eaa
 8001e88:	00000800 	.word	0x00000800
 8001e8c:	65726306 	.word	0x65726306
 8001e90:	7461      	.short	0x7461
 8001e92:	65          	.byte	0x65
	...

08001e94 <Code_447>:

@ -----------------------------------------------------------------------------
  Wortbirne Flag_visible, "create" @ ANS-Create with default action.
@ -----------------------------------------------------------------------------
  push {lr}
 8001e94:	b500      	push	{lr}
  bl builds
 8001e96:	f000 f83d 	bl	8001f14 <Code_452>

  @ Copy of the inline-code of does>

  @ Universeller Sprung zu dodoes:  Universal jump to dodoes. There has already been a push {lr} before in the definition that calls does>.
  @ Davor ist in dem Wort, wo does> eingefügt wird schon ein push {lr} gewesen.
  movw r0, #:lower16:dodoes+1
 8001e9a:	f641 60c7 	movw	r0, #7879	; 0x1ec7
  .ifdef does_above_64kb
    movt r0, #:upper16:dodoes+1   @ Dieser Teil ist Null, da dodoes weit am Anfang des Flashs sitzt.  Not needed as dodoes in core is in the lowest 64 kb.
  .endif
  blx r0 @ Den Aufruf mit absoluter Adresse einkompilieren. Perform this call with absolute addressing.
 8001e9e:	4780      	blx	r0


    @ Die Adresse ist hier nicht auf dem Stack, sondern in LR. LR ist sowas wie "TOS" des Returnstacks.
    @ Address is in LR which is something like "TOS in register" of return stack.

  pushdatos
 8001ea0:	f847 6d04 	str.w	r6, [r7, #-4]!
  subs tos, lr, #1 @ Denn es ist normalerweise eine ungerade Adresse wegen des Thumb-Befehlssatzes.  Align address. It is uneven because of Thumb-instructionset bit set.
 8001ea4:	f1be 0601 	subs.w	r6, lr, #1

  pop {pc}
 8001ea8:	bd00      	pop	{pc}

08001eaa <Dictionary_449>:
 8001eaa:	1f06      	.short	0x1f06
 8001eac:	00200800 	.word	0x00200800
 8001eb0:	656f6405 	.word	0x656f6405
 8001eb4:	3e73      	.short	0x3e73

08001eb6 <Code_449>:
    @ after that a pushda lr to put the address of the definition entering the does>-part
    @ on datastack. This is a very special implementation !

  @ Universeller Sprung zu dodoes:  Universal jump to dodoes. There has already been a push {lr} before in the definition that calls does>.
  @ Davor ist in dem Wort, wo does> eingefügt wird schon ein push {lr} gewesen.
  movw r0, #:lower16:dodoes+1
 8001eb6:	f641 60c7 	movw	r0, #7879	; 0x1ec7
  .ifdef does_above_64kb
    movt r0, #:upper16:dodoes+1   @ Dieser Teil ist Null, da dodoes weit am Anfang des Flashs sitzt.  Not needed as dodoes in core is in the lowest 64 kb.
  .endif
  blx r0 @ Den Aufruf mit absoluter Adresse einkompilieren. Perform this call with absolute addressing.
 8001eba:	4780      	blx	r0


    @ Die Adresse ist hier nicht auf dem Stack, sondern in LR. LR ist sowas wie "TOS" des Returnstacks.
    @ Address is in LR which is something like "TOS in register" of return stack.

  pushdatos
 8001ebc:	f847 6d04 	str.w	r6, [r7, #-4]!
  subs tos, lr, #1 @ Denn es ist normalerweise eine ungerade Adresse wegen des Thumb-Befehlssatzes.  Align address. It is uneven because of Thumb-instructionset bit set.
 8001ec0:	f1be 0601 	subs.w	r6, lr, #1

  @ Am Ende des Wortes wird ein pop {pc} stehen, und das kommt prima hin.
  @ At the end of the definition there will be a pop {pc}, that is fine.
  bx lr @ Very important as delimiter as does> itself is inline.
 8001ec4:	4770      	bx	lr

08001ec6 <dodoes>:
  @ Generate a long call to the destination in LR that is inserted into the hole alloted by <builds.

  @ Präpariere die Einsprungadresse, die via callkomma eingefügt werden muss.
  @ Prepare the destination address

  pushdatos
 8001ec6:	f847 6d04 	str.w	r6, [r7, #-4]!
  subs tos, lr, #1
 8001eca:	f1be 0601 	subs.w	r6, lr, #1
               @ Einen abziehen. Diese Adresse ist schon ungerade für Thumb-2, aber callkomma fügt nochmal eine 1 dazu. 
               @ Subtract one. Adress is already uneven for Thumb-instructionset, but callkomma will add one anyway.

    @ Dictionary-Pointer verbiegen:
      @ Dictionarypointer sichern
      ldr r2, =Dictionarypointer
 8001ece:	f8df 2494 	ldr.w	r2, [pc, #1172]	; 8002364 <setflags_ram+0x3a>
      ldr r3, [r2] @ Alten Dictionarypointer auf jeden Fall bewahren  Save old Dictionarypointer.
 8001ed2:	6813      	ldr	r3, [r2, #0]

  ldr r1, =Einsprungpunkt @ Get the address the long call has to be inserted.
 8001ed4:	f8df 1490 	ldr.w	r1, [pc, #1168]	; 8002368 <setflags_ram+0x3e>
  ldr r1, [r1] @ r1 enthält jetzt die Codestartadresse der aktuellen Definition.
 8001ed8:	6809      	ldr	r1, [r1, #0]
  .endif

  .ifdef flash16bytesblockwrite
    @ Special case for STM32L476 which has different alignment depending if compiling into Flash (16-even) or into RAM (4-even).

    ldr r0, =Backlinkgrenze
 8001eda:	f8df 0488 	ldr.w	r0, [pc, #1160]	; 8002364 <setflags_ram+0x3a>
    cmp r3, r0
 8001ede:	4283      	cmp	r3, r0
    bhs.n dodoes_ram
 8001ee0:	d205      	bcs.n	8001eee <dodoes_ram>

2:    movs r0, #15
 8001ee2:	200f      	movs	r0, #15
      ands r0, r1
 8001ee4:	4008      	ands	r0, r1
      cmp r0, #4
 8001ee6:	2804      	cmp	r0, #4
      beq 1f
 8001ee8:	d005      	beq.n	8001ef6 <dodoes_ram+0x8>
        adds r1, #2
 8001eea:	3102      	adds	r1, #2
        b 2b
 8001eec:	e7f9      	b.n	8001ee2 <dodoes+0x1c>

08001eee <dodoes_ram>:

dodoes_ram:
  .endif

  @ This is to align dictionary pointer to have does> target locations that are always 4-even
  movs r0, #2
 8001eee:	2002      	movs	r0, #2
  ands r0, r1
 8001ef0:	4008      	ands	r0, r1
  beq 1f
 8001ef2:	d000      	beq.n	8001ef6 <dodoes_ram+0x8>
    adds r1, #2
 8001ef4:	3102      	adds	r1, #2
1:
  
  adds r1, #2  @ Am Anfang sollte das neudefinierte Wort ein push {lr} enthalten, richtig ?
 8001ef6:	3102      	adds	r1, #2
               @ Skip the push {lr} opcode in that definition.

  @ Change the Dictionarypointer to insert the long call with the normal comma mechanism.
      str r1, [r2] @ Dictionarypointer umbiegen
 8001ef8:	6011      	str	r1, [r2, #0]
  bl callkommalang @ Aufruf einfügen
 8001efa:	f7ff ff5e 	bl	8001dba <callkommalang>
      str r3, [r2] @ Dictionarypointer wieder zurücksetzen.
 8001efe:	6013      	str	r3, [r2, #0]

  bl smudge
 8001f00:	f000 f9d1 	bl	80022a6 <Code_531>
  pop {pc}
 8001f04:	bd00      	pop	{pc}

08001f06 <Dictionary_452>:
 8001f06:	1f70      	.short	0x1f70
 8001f08:	00000800 	.word	0x00000800
 8001f0c:	75623c07 	.word	0x75623c07
 8001f10:	73646c69 	.word	0x73646c69

08001f14 <Code_452>:
  Wortbirne Flag_visible, "<builds"
builds: @ Beginnt ein Defining-Wort.  Start a defining definition.
        @ Dazu lege ich ein neues Wort an, lasse eine Lücke für den Call-Befehl. Create a new definition and leave space for inserting the does>-Call later.
        @ Keine Strukturkennung  No structure pattern matching here !
@ -----------------------------------------------------------------------------
  push {lr}
 8001f14:	b500      	push	{lr}
  bl create       @ Neues Wort wird erzeugt
 8001f16:	f000 fb8d 	bl	8002634 <Code_576>

  .ifdef flash16bytesblockwrite
    @ It is necessary for STM32L476 that Flash writes are aligned on 16.
    @ So if we are compiling into Flash, we need to make sure that
    @ the block the user might write to later is properly aligned.
    ldr r0, =Dictionarypointer
 8001f1a:	f8df 0448 	ldr.w	r0, [pc, #1096]	; 8002364 <setflags_ram+0x3a>
    ldr r1, [r0]
 8001f1e:	6801      	ldr	r1, [r0, #0]

    ldr r2, =Backlinkgrenze
 8001f20:	f8df 2440 	ldr.w	r2, [pc, #1088]	; 8002364 <setflags_ram+0x3a>
    cmp r1, r2
 8001f24:	4291      	cmp	r1, r2
    bhs.n builds_ram
 8001f26:	d20c      	bcs.n	8001f42 <builds_ram>

      @ See where we are. The sequence written for <builds does> is 12 Bytes long on M3/M4.
      @ So we need to advance to 16n + 4 so that the opcode sequence ends on a suitable border.

2:    bl here
 8001f28:	f000 fdd5 	bl	8002ad6 <Code_663>
      movs r0, #15
 8001f2c:	200f      	movs	r0, #15
      ands tos, r0
 8001f2e:	4006      	ands	r6, r0
      cmp tos, #4
 8001f30:	2e04      	cmp	r6, #4
      drop
 8001f32:	cf40      	ldmia	r7!, {r6}
      beq 1f
 8001f34:	d010      	beq.n	8001f58 <builds_ram+0x16>
        pushdaconst 0x0036  @ nop = movs tos, tos
 8001f36:	f847 6d04 	str.w	r6, [r7, #-4]!
 8001f3a:	2636      	movs	r6, #54	; 0x36
        bl hkomma
 8001f3c:	f000 fa62 	bl	8002404 <Code_544>
        b 2b
 8001f40:	e7f2      	b.n	8001f28 <Code_452+0x14>

08001f42 <builds_ram>:

builds_ram:
  .endif

  @ This is to align dictionary pointer to have does> target locations that are always 4-even
    bl here
 8001f42:	f000 fdc8 	bl	8002ad6 <Code_663>
    movs r0, #2
 8001f46:	2002      	movs	r0, #2
    ands tos, r0
 8001f48:	4006      	ands	r6, r0
    drop
 8001f4a:	cf40      	ldmia	r7!, {r6}
    beq 1f
 8001f4c:	d004      	beq.n	8001f58 <builds_ram+0x16>
      pushdaconst 0x0036  @ nop = movs tos, tos
 8001f4e:	f847 6d04 	str.w	r6, [r7, #-4]!
 8001f52:	2636      	movs	r6, #54	; 0x36
      bl hkomma
 8001f54:	f000 fa56 	bl	8002404 <Code_544>
1:

  pushdaconstw 0xb500 @ Opcode für push {lr} schreiben  Write opcode for push {lr}
 8001f58:	f847 6d04 	str.w	r6, [r7, #-4]!
 8001f5c:	f24b 5600 	movw	r6, #46336	; 0xb500
  bl hkomma
 8001f60:	f000 fa50 	bl	8002404 <Code_544>

  pushdaconst 10  @ Hier kommt ein Call-Befehl hinein, aber ich weiß die Adresse noch nicht.
 8001f64:	f847 6d04 	str.w	r6, [r7, #-4]!
 8001f68:	260a      	movs	r6, #10
  bl allot        @ Lasse also eine passende Lücke frei !  Leave space for a long call opcode sequence.
 8001f6a:	f000 fab6 	bl	80024da <Code_564>
  pop {pc}
 8001f6e:	bd00      	pop	{pc}

08001f70 <Dictionary_463>:
 8001f70:	08001f7c 	.word	0x08001f7c
 8001f74:	5b030050 	.word	0x5b030050
 8001f78:	5d27      	.short	0x5d27

08001f7a <Code_463>:
  .endif

@------------------------------------------------------------------------------
  Wortbirne Flag_immediate|Flag_foldable_0, "[']" @ Sucht das nächste Wort im Eingabestrom  Searches the next token in input buffer and compiles its entry point as literal.
@------------------------------------------------------------------------------
  b.n tick @ So sah das mal aus: ['] ' immediate 0-foldable ;
 8001f7a:	e003      	b.n	8001f84 <Code_464>

08001f7c <Dictionary_464>:
 8001f7c:	08001f94 	.word	0x08001f94
 8001f80:	27010000 	.word	0x27010000

08001f84 <Code_464>:

@ -----------------------------------------------------------------------------
  Wortbirne Flag_visible, "'" @ Searches next token in unput buffer and gives back its code entry point.
tick: @ Nimmt das nächste Token aus dem Puffer, suche es und gibt den Einsprungpunkt zurück.
@ -----------------------------------------------------------------------------
  push {lr}
 8001f84:	b500      	push	{lr}
  bl token
 8001f86:	f001 f858 	bl	800303a <Code_797>
  bl find_not_found
 8001f8a:	f000 fd45 	bl	8002a18 <find_not_found>
  popda r0 @ Drop Flags into r0 - used by postpone !
 8001f8e:	0030      	movs	r0, r6
 8001f90:	cf40      	ldmia	r7!, {r6}
  pop {pc}
 8001f92:	bd00      	pop	{pc}

08001f94 <Dictionary_466>:
 8001f94:	08001fd2 	.word	0x08001fd2
 8001f98:	70080030 	.word	0x70080030
 8001f9c:	7074736f 	.word	0x7074736f
 8001fa0:	6e6f      	.short	0x6e6f
 8001fa2:	65          	.byte	0x65
	...

08001fa4 <Code_466>:

@------------------------------------------------------------------------------
  Wortbirne Flag_immediate_compileonly, "postpone" @ Sucht das nächste Wort im Eingabestrom  Search next token and fill it in Dictionary in a special way.
                                       @ und fügt es auf besondere Weise ein.
@------------------------------------------------------------------------------
  push {lr}
 8001fa4:	b500      	push	{lr}

  bl tick @ Stores Flags into r0 !
 8001fa6:	f7ff ffed 	bl	8001f84 <Code_464>
  bl callkomma
  pop {pc}

  .else

1:movs r1, #Flag_immediate & ~Flag_visible @ In case definition is immediate: Compile a call to its address.
 8001faa:	2110      	movs	r1, #16
  ands r1, r0
 8001fac:	4001      	ands	r1, r0
  bne 4f
 8001fae:	d10d      	bne.n	8001fcc <Code_466+0x28>

2:movs r1, #Flag_inline & ~Flag_visible    @ In case definition is inline: Compile entry point as literal and a call to inline, afterwards.
 8001fb0:	2120      	movs	r1, #32
  ands r1, r0
 8001fb2:	4001      	ands	r1, r0
  beq 3f                             @ ( Einsprungadresse )
 8001fb4:	d005      	beq.n	8001fc2 <Code_466+0x1e>
    bl literalkomma                  @ Einsprungadresse als Konstante einkompilieren
 8001fb6:	f7ff ff53 	bl	8001e60 <Code_440>
    pushdatos
 8001fba:	f847 6d04 	str.w	r6, [r7, #-4]!
    ldr tos, =inlinekomma
 8001fbe:	4eeb      	ldr	r6, [pc, #940]	; (800236c <setflags_ram+0x42>)
    b 4f                             @ zum Aufruf bereitlegen
 8001fc0:	e004      	b.n	8001fcc <Code_466+0x28>
    
3:@ Normal                     @ In case definition is normal: Compile entry point as literal and a call to call, afterwards.
    bl literalkomma
 8001fc2:	f7ff ff4d 	bl	8001e60 <Code_440>
    pushdatos
 8001fc6:	f847 6d04 	str.w	r6, [r7, #-4]!
    ldr tos, =callkomma
 8001fca:	4ee9      	ldr	r6, [pc, #932]	; (8002370 <setflags_ram+0x46>)
4:  bl callkomma
 8001fcc:	f7ff ff13 	bl	8001df6 <Code_435>
    pop {pc}
 8001fd0:	bd00      	pop	{pc}

08001fd2 <Dictionary_469>:
 8001fd2:	2028      	.short	0x2028
 8001fd4:	00000800 	.word	0x00000800
 8001fd8:	6c6e6907 	.word	0x6c6e6907
 8001fdc:	2c656e69 	.word	0x2c656e69

08001fe0 <Code_469>:

@ -----------------------------------------------------------------------------
  Wortbirne Flag_visible, "inline," @ ( addr -- )
inlinekomma:
@ -----------------------------------------------------------------------------
  push {lr}
 8001fe0:	b500      	push	{lr}
  .ifdef m0core
  ldr r1, =0xb500 @ push {lr}
  ldr r2, =0xbd00 @ pop {pc}
  ldr r3, =0x4770 @ bx lr
  .else
  movw r1, #0xb500 @ push {lr}
 8001fe2:	f24b 5100 	movw	r1, #46336	; 0xb500
  movw r2, #0xbd00 @ pop {pc}
 8001fe6:	f64b 5200 	movw	r2, #48384	; 0xbd00
  movw r3, #0x4770 @ bx lr
 8001fea:	f244 7370 	movw	r3, #18288	; 0x4770
  .endif

1:ldrh r0, [tos] @ Hole die nächsten 16 Bits aus der Routine.  Fetch next opcode...
 8001fee:	8830      	ldrh	r0, [r6, #0]
  cmp r0, r1 @ push {lr}
 8001ff0:	4288      	cmp	r0, r1
  beq 2f
 8001ff2:	d008      	beq.n	8002006 <Code_469+0x26>
  cmp r0, r2 @ pop {pc}
 8001ff4:	4290      	cmp	r0, r2
  beq 3f
 8001ff6:	d008      	beq.n	800200a <Code_469+0x2a>
  cmp r0, r3 @ bx lr
 8001ff8:	4298      	cmp	r0, r3
  beq 3f
 8001ffa:	d006      	beq.n	800200a <Code_469+0x2a>

  pushda r0
 8001ffc:	f847 6d04 	str.w	r6, [r7, #-4]!
 8002000:	0006      	movs	r6, r0
  bl hkomma @ Opcode einkompilieren  After checking is done, insert opcode into Dictionary.
 8002002:	f000 f9ff 	bl	8002404 <Code_544>

2:adds tos, #2 @ Pointer weiterrücken  Advance pointer
 8002006:	3602      	adds	r6, #2
  b 1b 
 8002008:	e7f1      	b.n	8001fee <Code_469+0xe>

3:drop
 800200a:	cf40      	ldmia	r7!, {r6}
  pop {pc}
 800200c:	bd00      	pop	{pc}

0800200e <suchedefinitionsende>:
@ -----------------------------------------------------------------------------
suchedefinitionsende: @ Rückt den Pointer in r0 ans Ende einer Definition vor.
                      @ Advance r0 to the end of code of current definition by searching for pop {pc} or bx lr opcodes.
@ -----------------------------------------------------------------------------
        @ Suche wie in inline, nach pop {pc} oder bx lr.
        push {r1, r2, r3}
 800200e:	b40e      	push	{r1, r2, r3}

         .ifdef m0core
         ldr r2, =0xbd00 @ pop {pc}
         ldr r3, =0x4770 @ bx lr
         .else
         movw r2, #0xbd00 @ pop {pc}
 8002010:	f64b 5200 	movw	r2, #48384	; 0xbd00
         movw r3, #0x4770 @ bx lr
 8002014:	f244 7370 	movw	r3, #18288	; 0x4770
         .endif


1:        ldrh r1, [r0]  @ Hole die nächsten 16 Bits aus der Routine.
 8002018:	8801      	ldrh	r1, [r0, #0]
          adds r0, #2    @ Pointer Weiterrücken
 800201a:	3002      	adds	r0, #2

          cmp r1, r2  @ pop {pc}
 800201c:	4291      	cmp	r1, r2
          beq 2f
 800201e:	d001      	beq.n	8002024 <suchedefinitionsende+0x16>
          cmp r1, r3  @ bx lr
 8002020:	4299      	cmp	r1, r3
          bne 1b
 8002022:	d1f9      	bne.n	8002018 <suchedefinitionsende+0xa>

2:      pop {r1, r2, r3}
 8002024:	bc0e      	pop	{r1, r2, r3}
        bx lr
 8002026:	4770      	bx	lr

08002028 <Dictionary_473>:
 8002028:	0800203e 	.word	0x0800203e
 800202c:	72040000 	.word	0x72040000
 8002030:	7465      	.short	0x7465
 8002032:	2c          	.byte	0x2c
	...

08002034 <Code_473>:
@ -----------------------------------------------------------------------------
  Wortbirne Flag_visible, "ret," @ ( -- )
retkomma: @ Write pop {pc} opcode
@ -----------------------------------------------------------------------------
  @ Mache das mit pop {pc}
  pushdaconstw 0xbd00 @ Opcode für pop {pc} schreiben
 8002034:	f847 6d04 	str.w	r6, [r7, #-4]!
 8002038:	f64b 5600 	movw	r6, #48384	; 0xbd00
  b.n hkomma
 800203c:	e1e2      	b.n	8002404 <Code_544>

0800203e <Dictionary_476>:
 800203e:	204c      	.short	0x204c
 8002040:	00300800 	.word	0x00300800
 8002044:	69786504 	.word	0x69786504
 8002048:	74          	.byte	0x74
	...

0800204a <Code_476>:

@------------------------------------------------------------------------------
  Wortbirne Flag_immediate_compileonly, "exit" @ Kompiliert ein ret mitten in die Definition.
  @ Writes a ret opcode into current definition. Take care with inlining !
@------------------------------------------------------------------------------
  b.n retkomma
 800204a:	e7f3      	b.n	8002034 <Code_473>

0800204c <Dictionary_477>:
 800204c:	08002064 	.word	0x08002064
 8002050:	72070030 	.word	0x72070030
 8002054:	72756365 	.word	0x72756365
 8002058:	6573      	.short	0x6573

0800205a <Code_477>:
@  : fac-rec ( acc n -- n! ) dup dup 1 = swap 0 = or if drop else dup 1 - rot rot * swap recurse then ; : facre ( n -- n! ) 1 swap fac-rec ;

@------------------------------------------------------------------------------
  Wortbirne Flag_immediate_compileonly, "recurse" @ Für Rekursion. Führt das gerade frische Wort aus. Execute freshly defined definition.
@------------------------------------------------------------------------------
  pushdatos
 800205a:	f847 6d04 	str.w	r6, [r7, #-4]!
  ldr tos, =Einsprungpunkt
 800205e:	4ec2      	ldr	r6, [pc, #776]	; (8002368 <setflags_ram+0x3e>)
  ldr tos, [tos]
 8002060:	6836      	ldr	r6, [r6, #0]
  b.n callkomma
 8002062:	e6c8      	b.n	8001df6 <Code_435>

08002064 <Dictionary_479>:
 8002064:	0800207c 	.word	0x0800207c
 8002068:	73050081 	.word	0x73050081
 800206c:	65746174 	.word	0x65746174

08002070 <Code_479>:

@ -----------------------------------------------------------------------------
  Wortbirne Flag_visible|Flag_variable, "state" @ ( -- addr )
  CoreVariable state
@ -----------------------------------------------------------------------------
  pushdatos
 8002070:	f847 6d04 	str.w	r6, [r7, #-4]!
  ldr tos, =state
 8002074:	4ebf      	ldr	r6, [pc, #764]	; (8002374 <setflags_ram+0x4a>)
  bx lr
 8002076:	4770      	bx	lr
 8002078:	00000000 	.word	0x00000000

0800207c <Dictionary_482>:
 800207c:	0800208e 	.word	0x0800208e
 8002080:	5d010000 	.word	0x5d010000

08002084 <Code_482>:
  .word 0

@------------------------------------------------------------------------------
  Wortbirne Flag_visible, "]" @ In den Compile-Modus übergehen  Switch to compile mode
@ -----------------------------------------------------------------------------
  ldr r0, =state
 8002084:	48bb      	ldr	r0, [pc, #748]	; (8002374 <setflags_ram+0x4a>)
  movs r1, #0 @ true-Flag in State legen
 8002086:	2100      	movs	r1, #0
  mvns r1, r1 @ -1
 8002088:	43c9      	mvns	r1, r1
  str r1, [r0] 
 800208a:	6001      	str	r1, [r0, #0]
  bx lr
 800208c:	4770      	bx	lr

0800208e <Dictionary_483>:
 800208e:	209e      	.short	0x209e
 8002090:	00100800 	.word	0x00100800
 8002094:	5b01      	.short	0x5b01

08002096 <Code_483>:

@------------------------------------------------------------------------------
  Wortbirne Flag_immediate, "[" @ In den Execute-Modus übergehen  Switch to execute mode
@ -----------------------------------------------------------------------------
  ldr r0, =state
 8002096:	48b7      	ldr	r0, [pc, #732]	; (8002374 <setflags_ram+0x4a>)
  movs r1, #0 @ false-Flag in State legen.
 8002098:	2100      	movs	r1, #0
  str r1, [r0]
 800209a:	6001      	str	r1, [r0, #0]
  bx lr
 800209c:	4770      	bx	lr

0800209e <Dictionary_484>:
 800209e:	20c6      	.short	0x20c6
 80020a0:	00000800 	.word	0x00000800
 80020a4:	3a01      	.short	0x3a01

080020a6 <Code_484>:

@ -----------------------------------------------------------------------------
  Wortbirne Flag_visible, ":" @ ( -- )
@ -----------------------------------------------------------------------------
  push {lr}
 80020a6:	b500      	push	{lr}

  ldr r0, =Datenstacksicherung @ Setzt den Füllstand des Datenstacks zur Probe.
 80020a8:	48b3      	ldr	r0, [pc, #716]	; (8002378 <setflags_ram+0x4e>)
  str psp, [r0]                @ Save current datastack pointer to detect structure mismatch later.
 80020aa:	6007      	str	r7, [r0, #0]

  bl create
 80020ac:	f000 fac2 	bl	8002634 <Code_576>
    movs r1, #0
    str r1, [r0]  @ Inline Cache empty

  .else

  pushdaconstw 0xb500 @ Opcode für push {lr} schreiben  Write opcode for push {lr}
 80020b0:	f847 6d04 	str.w	r6, [r7, #-4]!
 80020b4:	f24b 5600 	movw	r6, #46336	; 0xb500
  bl hkomma
 80020b8:	f000 f9a4 	bl	8002404 <Code_544>

  ldr r0, =state
 80020bc:	48ad      	ldr	r0, [pc, #692]	; (8002374 <setflags_ram+0x4a>)
  movs r1, #0 @ true-Flag in State legen
 80020be:	2100      	movs	r1, #0
  mvns r1, r1 @ -1
 80020c0:	43c9      	mvns	r1, r1
  str r1, [r0]
 80020c2:	6001      	str	r1, [r0, #0]

  .endif

  pop {pc}
 80020c4:	bd00      	pop	{pc}

080020c6 <Dictionary_487>:
 80020c6:	211a      	.short	0x211a
 80020c8:	00300800 	.word	0x00300800
 80020cc:	3b01      	.short	0x3b01

080020ce <Code_487>:
  Wortbirne Flag_immediate_compileonly|Flag_bxlr, ";" @ ( -- )
  .else
  Wortbirne Flag_immediate_compileonly, ";" @ ( -- )
  .endif
@ -----------------------------------------------------------------------------
  push {lr}
 80020ce:	b500      	push	{lr}

  ldr r0, =Datenstacksicherung @ Prüft den Füllstand des Datenstacks.
 80020d0:	48a9      	ldr	r0, [pc, #676]	; (8002378 <setflags_ram+0x4e>)
  ldr r1, [r0]                 @ Check fill level of datastack.
 80020d2:	6801      	ldr	r1, [r0, #0]
  cmp r1, psp
 80020d4:	42b9      	cmp	r1, r7
  beq 1f
 80020d6:	d014      	beq.n	8002102 <Code_487+0x34>

  ldr r1, =stack_canary @ Stackintegrität prüfen.
 80020d8:	49a8      	ldr	r1, [pc, #672]	; (800237c <setflags_ram+0x52>)
  cmp tos, r1           @ Check stack integrity.
 80020da:	428e      	cmp	r6, r1
  bne 5f
 80020dc:	d102      	bne.n	80020e4 <Code_487+0x16>

    ldr tos, =dots+10 @ Fehlermeldung vorbereiten.
 80020de:	4ea8      	ldr	r6, [pc, #672]	; (8002380 <setflags_ram+0x56>)
    bl type           @ Prepare error message.
 80020e0:	f7ff fc5c 	bl	800199c <Code_373>
5:  Fehler_Quit " Stack not balanced."
 80020e4:	f7ff fc12 	bl	800190c <dotgaensefuesschen>
 80020e8:	74532015 	.word	0x74532015
 80020ec:	206b6361 	.word	0x206b6361
 80020f0:	20746f6e 	.word	0x20746f6e
 80020f4:	616c6162 	.word	0x616c6162
 80020f8:	6465636e 	.word	0x6465636e
 80020fc:	0a2e      	.short	0x0a2e
 80020fe:	f001 bb28 	b.w	8003752 <Code_926>
       bl inline_cache_schreiben
       b.n 4f
3:   @ Doch ein pop {pc} ? Dann war wohl etwas enthalten, was nicht durch inline laufen darf.
  .endif

  pushdaconstw 0xbd00 @ Opcode für pop {pc} schreiben  Write opcode for pop {pc}
 8002102:	f847 6d04 	str.w	r6, [r7, #-4]!
 8002106:	f64b 5600 	movw	r6, #48384	; 0xbd00
  bl hkomma
 800210a:	f000 f97b 	bl	8002404 <Code_544>
  
4:bl smudge
 800210e:	f000 f8ca 	bl	80022a6 <Code_531>

  ldr r0, =state
 8002112:	4898      	ldr	r0, [pc, #608]	; (8002374 <setflags_ram+0x4a>)
  movs r1, #0 @ false-Flag in State legen.
 8002114:	2100      	movs	r1, #0
  str r1, [r0]
 8002116:	6001      	str	r1, [r0, #0]

  pop {pc}
 8002118:	bd00      	pop	{pc}

0800211a <Dictionary_491>:
 800211a:	212e      	.short	0x212e
 800211c:	00000800 	.word	0x00000800
 8002120:	65786507 	.word	0x65786507
 8002124:	65747563 	.word	0x65747563

08002128 <Code_491>:

@ -----------------------------------------------------------------------------
  Wortbirne Flag_visible, "execute"
execute:
@ -----------------------------------------------------------------------------
  popda r0
 8002128:	0030      	movs	r0, r6
 800212a:	cf40      	ldmia	r7!, {r6}
  mov pc, r0
 800212c:	4687      	mov	pc, r0

0800212e <Dictionary_493>:
 800212e:	2146      	.short	0x2146
 8002130:	00100800 	.word	0x00100800
 8002134:	6d6d6909 	.word	0x6d6d6909
 8002138:	61696465 	.word	0x61696465
 800213c:	6574      	.short	0x6574

0800213e <Code_493>:

@ -----------------------------------------------------------------------------
  Wortbirne Flag_immediate, "immediate" @ ( -- )
@ -----------------------------------------------------------------------------
  pushdaconst Flag_immediate & ~Flag_visible
 800213e:	f847 6d04 	str.w	r6, [r7, #-4]!
 8002142:	2610      	movs	r6, #16
  b.n setflags
 8002144:	e0e5      	b.n	8002312 <Code_536>

08002146 <Dictionary_496>:
 8002146:	215c      	.short	0x215c
 8002148:	00500800 	.word	0x00500800
 800214c:	6c6e6906 	.word	0x6c6e6906
 8002150:	6e69      	.short	0x6e69
 8002152:	65          	.byte	0x65
	...

08002154 <Code_496>:

@ -----------------------------------------------------------------------------
  Wortbirne Flag_immediate|Flag_foldable_0, "inline" @ ( -- )
setze_inlineflag:
@ -----------------------------------------------------------------------------
  pushdaconst Flag_inline & ~Flag_visible
 8002154:	f847 6d04 	str.w	r6, [r7, #-4]!
 8002158:	2620      	movs	r6, #32
  b.n setflags
 800215a:	e0da      	b.n	8002312 <Code_536>

0800215c <Dictionary_499>:
 800215c:	08002176 	.word	0x08002176
 8002160:	630b0010 	.word	0x630b0010
 8002164:	69706d6f 	.word	0x69706d6f
 8002168:	6e6f656c 	.word	0x6e6f656c
 800216c:	796c      	.short	0x796c

0800216e <Code_499>:

@ -----------------------------------------------------------------------------
  Wortbirne Flag_immediate, "compileonly" @ ( -- )
@ -----------------------------------------------------------------------------
  pushdaconst Flag_immediate_compileonly & ~Flag_visible
 800216e:	f847 6d04 	str.w	r6, [r7, #-4]!
 8002172:	2630      	movs	r6, #48	; 0x30
  b.n setflags
 8002174:	e0cd      	b.n	8002312 <Code_536>

08002176 <Dictionary_502>:
 8002176:	2190      	.short	0x2190
 8002178:	00500800 	.word	0x00500800
 800217c:	662d300a 	.word	0x662d300a
 8002180:	61646c6f 	.word	0x61646c6f
 8002184:	6c62      	.short	0x6c62
 8002186:	65          	.byte	0x65
	...

08002188 <Code_502>:

@ -----------------------------------------------------------------------------
  Wortbirne Flag_immediate|Flag_foldable_0, "0-foldable" @ ( -- )
setze_faltbarflag:
@ -----------------------------------------------------------------------------
  pushdaconst Flag_foldable_0 & ~Flag_visible
 8002188:	f847 6d04 	str.w	r6, [r7, #-4]!
 800218c:	2640      	movs	r6, #64	; 0x40
  b.n setflags
 800218e:	e0c0      	b.n	8002312 <Code_536>

08002190 <Dictionary_505>:
 8002190:	080021aa 	.word	0x080021aa
 8002194:	310a0050 	.word	0x310a0050
 8002198:	6c6f662d 	.word	0x6c6f662d
 800219c:	6c626164 	.word	0x6c626164
 80021a0:	65          	.byte	0x65
	...

080021a2 <Code_505>:

@ -----------------------------------------------------------------------------
  Wortbirne Flag_immediate|Flag_foldable_0, "1-foldable" @ ( -- )
@ -----------------------------------------------------------------------------
  pushdaconst Flag_foldable_1 & ~Flag_visible
 80021a2:	f847 6d04 	str.w	r6, [r7, #-4]!
 80021a6:	2641      	movs	r6, #65	; 0x41
  b.n setflags
 80021a8:	e0b3      	b.n	8002312 <Code_536>

080021aa <Dictionary_508>:
 80021aa:	21c4      	.short	0x21c4
 80021ac:	00500800 	.word	0x00500800
 80021b0:	662d320a 	.word	0x662d320a
 80021b4:	61646c6f 	.word	0x61646c6f
 80021b8:	6c62      	.short	0x6c62
 80021ba:	65          	.byte	0x65
	...

080021bc <Code_508>:

@ -----------------------------------------------------------------------------
  Wortbirne Flag_immediate|Flag_foldable_0, "2-foldable" @ ( -- )
@ -----------------------------------------------------------------------------
  pushdaconst Flag_foldable_2 & ~Flag_visible
 80021bc:	f847 6d04 	str.w	r6, [r7, #-4]!
 80021c0:	2642      	movs	r6, #66	; 0x42
  b.n setflags
 80021c2:	e0a6      	b.n	8002312 <Code_536>

080021c4 <Dictionary_511>:
 80021c4:	080021de 	.word	0x080021de
 80021c8:	330a0050 	.word	0x330a0050
 80021cc:	6c6f662d 	.word	0x6c6f662d
 80021d0:	6c626164 	.word	0x6c626164
 80021d4:	65          	.byte	0x65
	...

080021d6 <Code_511>:

@ -----------------------------------------------------------------------------
  Wortbirne Flag_immediate|Flag_foldable_0, "3-foldable" @ ( -- )
@ -----------------------------------------------------------------------------
  pushdaconst Flag_foldable_3 & ~Flag_visible
 80021d6:	f847 6d04 	str.w	r6, [r7, #-4]!
 80021da:	2643      	movs	r6, #67	; 0x43
  b.n setflags
 80021dc:	e099      	b.n	8002312 <Code_536>

080021de <Dictionary_514>:
 80021de:	21f8      	.short	0x21f8
 80021e0:	00500800 	.word	0x00500800
 80021e4:	662d340a 	.word	0x662d340a
 80021e8:	61646c6f 	.word	0x61646c6f
 80021ec:	6c62      	.short	0x6c62
 80021ee:	65          	.byte	0x65
	...

080021f0 <Code_514>:

@ -----------------------------------------------------------------------------
  Wortbirne Flag_immediate|Flag_foldable_0, "4-foldable" @ ( -- )
@ -----------------------------------------------------------------------------
  pushdaconst Flag_foldable_4 & ~Flag_visible
 80021f0:	f847 6d04 	str.w	r6, [r7, #-4]!
 80021f4:	2644      	movs	r6, #68	; 0x44
  b.n setflags
 80021f6:	e08c      	b.n	8002312 <Code_536>

080021f8 <Dictionary_517>:
 80021f8:	08002212 	.word	0x08002212
 80021fc:	350a0050 	.word	0x350a0050
 8002200:	6c6f662d 	.word	0x6c6f662d
 8002204:	6c626164 	.word	0x6c626164
 8002208:	65          	.byte	0x65
	...

0800220a <Code_517>:

@ -----------------------------------------------------------------------------
  Wortbirne Flag_immediate|Flag_foldable_0, "5-foldable" @ ( -- )
@ -----------------------------------------------------------------------------
  pushdaconst Flag_foldable_5 & ~Flag_visible
 800220a:	f847 6d04 	str.w	r6, [r7, #-4]!
 800220e:	2645      	movs	r6, #69	; 0x45
  b.n setflags
 8002210:	e07f      	b.n	8002312 <Code_536>

08002212 <Dictionary_520>:
 8002212:	222c      	.short	0x222c
 8002214:	00500800 	.word	0x00500800
 8002218:	662d360a 	.word	0x662d360a
 800221c:	61646c6f 	.word	0x61646c6f
 8002220:	6c62      	.short	0x6c62
 8002222:	65          	.byte	0x65
	...

08002224 <Code_520>:

@ -----------------------------------------------------------------------------
  Wortbirne Flag_immediate|Flag_foldable_0, "6-foldable" @ ( -- )
@ -----------------------------------------------------------------------------
  pushdaconst Flag_foldable_6 & ~Flag_visible
 8002224:	f847 6d04 	str.w	r6, [r7, #-4]!
 8002228:	2646      	movs	r6, #70	; 0x46
  b.n setflags
 800222a:	e072      	b.n	8002312 <Code_536>

0800222c <Dictionary_523>:
 800222c:	08002246 	.word	0x08002246
 8002230:	370a0050 	.word	0x370a0050
 8002234:	6c6f662d 	.word	0x6c6f662d
 8002238:	6c626164 	.word	0x6c626164
 800223c:	65          	.byte	0x65
	...

0800223e <Code_523>:

@ -----------------------------------------------------------------------------
  Wortbirne Flag_immediate|Flag_foldable_0, "7-foldable" @ ( -- )
@ -----------------------------------------------------------------------------
  pushdaconst Flag_foldable_7 & ~Flag_visible
 800223e:	f847 6d04 	str.w	r6, [r7, #-4]!
 8002242:	2647      	movs	r6, #71	; 0x47
  b.n setflags
 8002244:	e065      	b.n	8002312 <Code_536>

08002246 <Dictionary_526>:
 8002246:	2276      	.short	0x2276
 8002248:	00000800 	.word	0x00000800
 800224c:	6e6f6308 	.word	0x6e6f6308
 8002250:	6e617473 	.word	0x6e617473
 8002254:	74          	.byte	0x74
	...

08002256 <Code_526>:

@ -----------------------------------------------------------------------------
  Wortbirne Flag_visible, "constant" @ ( n -- )
@ -----------------------------------------------------------------------------
  push {lr}
 8002256:	b500      	push	{lr}
  bl create
 8002258:	f000 f9ec 	bl	8002634 <Code_576>
1:bl literalkomma
 800225c:	f7ff fe00 	bl	8001e60 <Code_440>
  pushdaconstw 0x4770 @ Opcode for bx lr
 8002260:	f847 6d04 	str.w	r6, [r7, #-4]!
 8002264:	f244 7670 	movw	r6, #18288	; 0x4770
  bl hkomma
 8002268:	f000 f8cc 	bl	8002404 <Code_544>
  bl setze_faltbarflag
 800226c:	f7ff ff8c 	bl	8002188 <Code_502>
  bl smudge
 8002270:	f000 f819 	bl	80022a6 <Code_531>
  pop {pc}
 8002274:	bd00      	pop	{pc}

08002276 <Dictionary_529>:
 8002276:	2298      	.short	0x2298
 8002278:	00000800 	.word	0x00000800
 800227c:	6f633209 	.word	0x6f633209
 8002280:	6174736e 	.word	0x6174736e
 8002284:	746e      	.short	0x746e

08002286 <Code_529>:

@ -----------------------------------------------------------------------------
  Wortbirne Flag_visible, "2constant" @ ( n -- )
@ -----------------------------------------------------------------------------
  push {lr}
 8002286:	b500      	push	{lr}
  bl create
 8002288:	f000 f9d4 	bl	8002634 <Code_576>
  swap
 800228c:	6839      	ldr	r1, [r7, #0]
 800228e:	603e      	str	r6, [r7, #0]
 8002290:	460e      	mov	r6, r1
  bl literalkomma
 8002292:	f7ff fde5 	bl	8001e60 <Code_440>
  b.n 1b
 8002296:	e7e1      	b.n	800225c <Code_526+0x6>

08002298 <Dictionary_531>:
 8002298:	08002302 	.word	0x08002302
 800229c:	73060000 	.word	0x73060000
 80022a0:	6764756d 	.word	0x6764756d
 80022a4:	65          	.byte	0x65
	...

080022a6 <Code_531>:

@ -----------------------------------------------------------------------------
  Wortbirne Flag_visible, "smudge" @ ( -- )
smudge:
@ -----------------------------------------------------------------------------
  push {lr}
 80022a6:	b500      	push	{lr}

  ldr r0, =Dictionarypointer @ Check Dictionarypointer to decide if we are currently compiling for Flash or for RAM.
 80022a8:	482e      	ldr	r0, [pc, #184]	; (8002364 <setflags_ram+0x3a>)
  ldr r1, [r0]
 80022aa:	6801      	ldr	r1, [r0, #0]

  ldr r2, =Backlinkgrenze
 80022ac:	4a2d      	ldr	r2, [pc, #180]	; (8002364 <setflags_ram+0x3a>)
  cmp r1, r2
 80022ae:	4291      	cmp	r1, r2
  bhs.n smudge_ram @ Befinde mich im Ram. Schalte um !
 80022b0:	d220      	bcs.n	80022f4 <smudge_ram>
    @ Check if there is $FFFF at the end of the definition.
    @ That must not be ! It would be detected as free space on next Reset and simply overwritten.
    @ To prevent it a zero is applied at the end in this case.

    @ r1 enthält den DictionaryPointer.  r1 already contains Dictionarypointer
    subs r1, #2
 80022b2:	3902      	subs	r1, #2
    ldrh r2, [r1]
 80022b4:	880a      	ldrh	r2, [r1, #0]
    ldr r3, =erasedhalfword
 80022b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
    cmp r2, r3
 80022ba:	429a      	cmp	r2, r3
    bne 1f
 80022bc:	d105      	bne.n	80022ca <Code_531+0x24>
      @ writeln "Füge in Smudge eine Enderkennungs-Null ein."
      pushdatos
 80022be:	f847 6d04 	str.w	r6, [r7, #-4]!
      ldr tos, =writtenhalfword
 80022c2:	f04f 0600 	mov.w	r6, #0
      bl hkomma
 80022c6:	f000 f89d 	bl	8002404 <Code_544>
1:  @ Okay, Ende gut, alles gut. Fine :-)

    bl align4komma @ Align on 4 to make sure the last opcode is actually written to Flash and to fullfill ANS requirement.
 80022ca:	f000 f873 	bl	80023b4 <Code_540>
    .ifdef flash8bytesblockwrite
      bl align8komma
    .endif

    .ifdef flash16bytesblockwrite
      bl align16komma
 80022ce:	f000 f886 	bl	80023de <Code_542>
    .endif

    @ Brenne die gesammelten Flags:  Flash in the collected Flags:
    ldr r0, =FlashFlags
 80022d2:	482c      	ldr	r0, [pc, #176]	; (8002384 <setflags_ram+0x5a>)
    ldr r0, [r0]
 80022d4:	6800      	ldr	r0, [r0, #0]
    pushda r0
 80022d6:	f847 6d04 	str.w	r6, [r7, #-4]!
 80022da:	0006      	movs	r6, r0

    ldr r1, =Fadenende
 80022dc:	492a      	ldr	r1, [pc, #168]	; (8002388 <setflags_ram+0x5e>)
    ldr r1, [r1]
 80022de:	6809      	ldr	r1, [r1, #0]
    adds r1, #4 @ Skip Link field
 80022e0:	3104      	adds	r1, #4

    @ Dictionary-Pointer verbiegen:  Change Dictionarypointer for flashing Flags in (saves code size)
      @ Dictionarypointer sichern
      ldr r2, =Dictionarypointer
 80022e2:	4a20      	ldr	r2, [pc, #128]	; (8002364 <setflags_ram+0x3a>)
      ldr r3, [r2] @ Alten Dictionarypointer auf jeden Fall bewahren  Keep old pointer !
 80022e4:	6813      	ldr	r3, [r2, #0]

      str r1, [r2] @ Dictionarypointer umbiegen  Change pointer
 80022e6:	6011      	str	r1, [r2, #0]
      bl hkomma    @ Flags einfügen              Insert Flags
 80022e8:	f000 f88c 	bl	8002404 <Code_544>
      str r3, [r2] @ Dictionarypointer wieder zurücksetzen.
 80022ec:	6013      	str	r3, [r2, #0]


    .ifdef flushflash
      bl flushflash
 80022ee:	f7fe ffd8 	bl	80012a2 <Code_249>
    .endif

    pop {pc}
 80022f2:	bd00      	pop	{pc}

080022f4 <smudge_ram>:

  @ -----------------------------------------------------------------------------
  @ Smudge for RAM
smudge_ram:
  bl align4komma @ Align on 4 to fullfill ANS requirement.
 80022f4:	f000 f85e 	bl	80023b4 <Code_540>

  pushdatos
 80022f8:	f847 6d04 	str.w	r6, [r7, #-4]!
  ldr tos, =Flag_visible
 80022fc:	f04f 0600 	mov.w	r6, #0

  b.n setflags_intern
 8002300:	e008      	b.n	8002314 <setflags_intern>

08002302 <Dictionary_536>:
 8002302:	238c      	.short	0x238c
 8002304:	00000800 	.word	0x00000800
 8002308:	74657308 	.word	0x74657308
 800230c:	67616c66 	.word	0x67616c66
 8002310:	73          	.byte	0x73
	...

08002312 <Code_536>:
@ -----------------------------------------------------------------------------
  Wortbirne Flag_visible, "setflags" @ ( x -- )
setflags: @ Setflags collects the Flags if compiling for Flash, because we can write Flash field only once.
          @ For RAM, the bits are simply set directly.
@ -----------------------------------------------------------------------------
  push {lr}
 8002312:	b500      	push	{lr}

08002314 <setflags_intern>:

setflags_intern:
  ldr r0, =Dictionarypointer
 8002314:	4813      	ldr	r0, [pc, #76]	; (8002364 <setflags_ram+0x3a>)
  ldr r1, [r0]
 8002316:	6801      	ldr	r1, [r0, #0]

  ldr r2, =Backlinkgrenze
 8002318:	4a12      	ldr	r2, [pc, #72]	; (8002364 <setflags_ram+0x3a>)
  cmp r1, r2
 800231a:	4291      	cmp	r1, r2
  bhs.n setflags_ram @ Befinde mich im Ram. Schalte um !
 800231c:	d205      	bcs.n	800232a <setflags_ram>

  @ -----------------------------------------------------------------------------
  @ Setflags for Flash
  ldr r0, =FlashFlags
 800231e:	4819      	ldr	r0, [pc, #100]	; (8002384 <setflags_ram+0x5a>)
  ldr r1, [r0]
 8002320:	6801      	ldr	r1, [r0, #0]
  orrs r1, tos  @ Flashflags beginnt von create aus immer mit "Sichtbar" = 0.
 8002322:	4331      	orrs	r1, r6
  str r1, [r0]
 8002324:	6001      	str	r1, [r0, #0]
  drop
 8002326:	cf40      	ldmia	r7!, {r6}
  pop {pc}
 8002328:	bd00      	pop	{pc}

0800232a <setflags_ram>:
  @ -----------------------------------------------------------------------------
  @ Setflags for RAM
setflags_ram:

  @ Eigentlich ganz einfach im Ram:
  popda r2
 800232a:	0032      	movs	r2, r6
 800232c:	cf40      	ldmia	r7!, {r6}
  @ Hole die Flags des aktuellen Wortes   Fetch flags of current definition
  ldr r0, =Fadenende @ Current definition
 800232e:	4816      	ldr	r0, [pc, #88]	; (8002388 <setflags_ram+0x5e>)
  ldr r0, [r0]
 8002330:	6800      	ldr	r0, [r0, #0]
  adds r0, #4 @ Skip Link field
 8002332:	3004      	adds	r0, #4

  ldrh r1, [r0] @ Flags des zuletzt definierten Wortes holen  Fetch its Flags
 8002334:	8801      	ldrh	r1, [r0, #0]
  ldr r3, =0xFFFF
 8002336:	f64f 73ff 	movw	r3, #65535	; 0xffff
  cmp r1, r3
 800233a:	4299      	cmp	r1, r3

  bne 1f
 800233c:	d101      	bne.n	8002342 <setflags_ram+0x18>
  movs r1, r2 @ Direkt setzen, falls an der Stelle noch -1 steht  Set directly, if there are no Flags before
 800233e:	0011      	movs	r1, r2
  b 2f
 8002340:	e000      	b.n	8002344 <setflags_ram+0x1a>
1:orrs r1, r2 @ Hinzuverodern, falls schon Flags da sind          If there already are Flags, OR them together.
 8002342:	4311      	orrs	r1, r2
2:

  strh r1, [r0]
 8002344:	8001      	strh	r1, [r0, #0]
  pop {pc}
 8002346:	bd00      	pop	{pc}
  ldr tos, =0xf2400000 @ Opcode movw r0, #0
 8002348:	f2400000 	.word	0xf2400000
  ldr tos, =0xf2c00000 @ Opcode movt r0, #0
 800234c:	f2c00000 	.word	0xf2c00000
    ldr r0, =0xF05F0000 @ movs r0, #imm12 Opcode
 8002350:	f05f0000 	.word	0xf05f0000
    ldr r0, =0xF07F0000 @ mvns r0, #imm12 Opcode
 8002354:	f07f0000 	.word	0xf07f0000
  ldr r1, =0xFFC00001   @ 21 Bits frei
 8002358:	ffc00001 	.word	0xffc00001
  ldr r2, =0xFFC00000
 800235c:	ffc00000 	.word	0xffc00000
    ldr r0, =0xF000F800  @ Opcode-Template
 8002360:	f000f800 	.word	0xf000f800
      ldr r2, =Dictionarypointer
 8002364:	20001000 	.word	0x20001000
  ldr r1, =Einsprungpunkt @ Get the address the long call has to be inserted.
 8002368:	20001014 	.word	0x20001014
    ldr tos, =inlinekomma
 800236c:	08001fe0 	.word	0x08001fe0
    ldr tos, =callkomma
 8002370:	08001df6 	.word	0x08001df6
  ldr tos, =state
 8002374:	2001ffd8 	.word	0x2001ffd8
  ldr r0, =Datenstacksicherung @ Setzt den Füllstand des Datenstacks zur Probe.
 8002378:	20001010 	.word	0x20001010
  ldr r1, =stack_canary @ Stackintegrität prüfen.
 800237c:	04121985 	.word	0x04121985
    ldr tos, =dots+10 @ Fehlermeldung vorbereiten.
 8002380:	08001a3e 	.word	0x08001a3e
    ldr r0, =FlashFlags
 8002384:	20001020 	.word	0x20001020
    ldr r1, =Fadenende
 8002388:	20001004 	.word	0x20001004

0800238c <Dictionary_539>:
 800238c:	080023a8 	.word	0x080023a8
 8002390:	61070041 	.word	0x61070041
 8002394:	6e67696c 	.word	0x6e67696c
 8002398:	6465      	.short	0x6465

0800239a <Code_539>:
 .ltorg

@ -----------------------------------------------------------------------------
  Wortbirne Flag_visible|Flag_foldable_1, "aligned" @ ( c-addr -- a-addr )
@ -----------------------------------------------------------------------------
  movs r0, #1
 800239a:	2001      	movs	r0, #1
  ands r0, tos
 800239c:	4030      	ands	r0, r6
  adds tos, r0
 800239e:	1836      	adds	r6, r6, r0

  movs r0, #2
 80023a0:	2002      	movs	r0, #2
  ands r0, tos
 80023a2:	4030      	ands	r0, r6
  adds tos, r0
 80023a4:	1836      	adds	r6, r6, r0
  bx lr
 80023a6:	4770      	bx	lr

080023a8 <Dictionary_540>:
 80023a8:	080023ce 	.word	0x080023ce
 80023ac:	61050000 	.word	0x61050000
 80023b0:	6e67696c 	.word	0x6e67696c

080023b4 <Code_540>:

@ -----------------------------------------------------------------------------
  Wortbirne Flag_visible, "align" @ ( -- )
align4komma: @ Macht den Dictionarypointer auf 4 gerade
@ -----------------------------------------------------------------------------
  push {lr}
 80023b4:	b500      	push	{lr}

  .ifdef charkommaavailable
  bl alignkomma
  .endif

  ldr r0, =Dictionarypointer
 80023b6:	4893      	ldr	r0, [pc, #588]	; (8002604 <Zweitpointertausch+0x4e>)
  ldr r1, [r0] @ Hole den Dictionarypointer
 80023b8:	6801      	ldr	r1, [r0, #0]

  movs r0, #2
 80023ba:	2002      	movs	r0, #2
  ands r1, r0
 80023bc:	4001      	ands	r1, r0

  beq 1f
 80023be:	d005      	beq.n	80023cc <Code_540+0x18>

    pushdatos
 80023c0:	f847 6d04 	str.w	r6, [r7, #-4]!
    ldr tos, =writtenhalfword
 80023c4:	f04f 0600 	mov.w	r6, #0
    bl hkomma
 80023c8:	f000 f81c 	bl	8002404 <Code_544>

1: @ Fertig.
  pop {pc}
 80023cc:	bd00      	pop	{pc}

080023ce <Dictionary_542>:
 80023ce:	23fa      	.short	0x23fa
 80023d0:	00000800 	.word	0x00000800
 80023d4:	696c6108 	.word	0x696c6108
 80023d8:	36316e67 	.word	0x36316e67
 80023dc:	2c          	.byte	0x2c
	...

080023de <Code_542>:
  .ifdef flash16bytesblockwrite
@ -----------------------------------------------------------------------------
  Wortbirne Flag_visible, "align16," @ ( -- )
align16komma: @ Macht den Dictionarypointer auf 16 gerade
@ -----------------------------------------------------------------------------
  push {lr}
 80023de:	b500      	push	{lr}

1:ldr r0, =Dictionarypointer
 80023e0:	4888      	ldr	r0, [pc, #544]	; (8002604 <Zweitpointertausch+0x4e>)
  ldr r1, [r0] @ Hole den Dictionarypointer
 80023e2:	6801      	ldr	r1, [r0, #0]

  movs r0, #15
 80023e4:	200f      	movs	r0, #15
  ands r1, r0
 80023e6:	4001      	ands	r1, r0
  beq 2f
 80023e8:	d006      	beq.n	80023f8 <Code_542+0x1a>

    pushdatos
 80023ea:	f847 6d04 	str.w	r6, [r7, #-4]!
    ldr tos, =writtenhalfword
 80023ee:	f04f 0600 	mov.w	r6, #0
    bl hkomma
 80023f2:	f000 f807 	bl	8002404 <Code_544>
    b 1b
 80023f6:	e7f3      	b.n	80023e0 <Code_542+0x2>

2:pop {pc}
 80023f8:	bd00      	pop	{pc}

080023fa <Dictionary_544>:
 80023fa:	2430      	.short	0x2430
 80023fc:	00000800 	.word	0x00000800
 8002400:	6802      	.short	0x6802
 8002402:	2c          	.byte	0x2c
	...

08002404 <Code_544>:

@ -----------------------------------------------------------------------------
  Wortbirne Flag_visible, "h," @ ( x -- )
hkomma: @ Fügt 16 Bits an das Dictionary an.
@ -----------------------------------------------------------------------------
  push {r0, r1, r2, r3, lr}
 8002404:	b50f      	push	{r0, r1, r2, r3, lr}
  uxth tos, tos @ Mask low 16 Bits, just in case.
 8002406:	b2b6      	uxth	r6, r6
    beq 1f            @ Das normale True-Flag nicht erhöhen :-)
      str r1, [r0]
1:
  .endif

  ldr r0, =Dictionarypointer @ Fetch Dictionarypointer to decide if compiling for RAM or for Flash
 8002408:	487e      	ldr	r0, [pc, #504]	; (8002604 <Zweitpointertausch+0x4e>)
  ldr r1, [r0] @ Hole den Dictionarypointer
 800240a:	6801      	ldr	r1, [r0, #0]

  ldr r2, =Backlinkgrenze
 800240c:	4a7d      	ldr	r2, [pc, #500]	; (8002604 <Zweitpointertausch+0x4e>)
  cmp r1, r2
 800240e:	4291      	cmp	r1, r2
  bhs.n hkomma_ram @ Befinde mich im Ram. Schalte um !
 8002410:	d205      	bcs.n	800241e <hkomma_ram>

  @ hkomma for Flash:
  pushda r1 @ Adresse auch auf den Stack  Put target address on datastack, too !
 8002412:	f847 6d04 	str.w	r6, [r7, #-4]!
 8002416:	000e      	movs	r6, r1
  bl h_flashkomma
 8002418:	f7fe fece 	bl	80011b8 <Code_243>

  b.n hkomma_fertig
 800241c:	e002      	b.n	8002424 <hkomma_fertig>

0800241e <hkomma_ram>:

hkomma_ram: @ Simply write directly if compiling for RAM.
  popda r2 @ Inhalt holen
 800241e:	0032      	movs	r2, r6
 8002420:	cf40      	ldmia	r7!, {r6}
  strh r2, [r1] @ Schreibe das Halbword in das Dictionary
 8002422:	800a      	strh	r2, [r1, #0]

08002424 <hkomma_fertig>:

hkomma_fertig:
  pushdaconst 2
 8002424:	f847 6d04 	str.w	r6, [r7, #-4]!
 8002428:	2602      	movs	r6, #2
  bl allot
 800242a:	f000 f856 	bl	80024da <Code_564>

  .ifdef within_os
  bl cacheflush
  .endif

  pop {r0, r1, r2, r3, pc}
 800242e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08002430 <Dictionary_550>:
 8002430:	0800244a 	.word	0x0800244a
 8002434:	2c010000 	.word	0x2c010000

08002438 <Code_550>:

@ -----------------------------------------------------------------------------
  Wortbirne Flag_visible, "," @ ( x -- )
komma: @ Fügt 32 Bits an das Dictionary an  Write 32 bits in Dictionary using 16 bit write access only.
@ -----------------------------------------------------------------------------
  push {lr}
 8002438:	b500      	push	{lr}
  dup
 800243a:	f847 6d04 	str.w	r6, [r7, #-4]!
  bl hkomma @ Low-Teil zuerst - Little Endian ! Außerdem stimmen so die Linkfelder.
 800243e:	f7ff ffe1 	bl	8002404 <Code_544>

  lsrs tos, #16 @ High-Teil danach
 8002442:	0c36      	lsrs	r6, r6, #16
  bl hkomma
 8002444:	f7ff ffde 	bl	8002404 <Code_544>
  pop {pc}
 8002448:	bd00      	pop	{pc}

0800244a <Dictionary_553>:
 800244a:	2466      	.short	0x2466
 800244c:	00000800 	.word	0x00000800
 8002450:	2c3c3e03 	.word	0x2c3c3e03

08002454 <Code_553>:

@ -----------------------------------------------------------------------------
  Wortbirne Flag_visible, "><," @ ( x -- )
reversekomma: @ Fügt 32 Bits an das Dictionary an   Write 32 bits in Dictionary using 16 bit write access only, but reverse high and low order before.
@ -----------------------------------------------------------------------------
  push {lr}
 8002454:	b500      	push	{lr}
  dup
 8002456:	f847 6d04 	str.w	r6, [r7, #-4]!
  lsrs tos, #16 @ High-Teil danach
 800245a:	0c36      	lsrs	r6, r6, #16
  bl hkomma
 800245c:	f7ff ffd2 	bl	8002404 <Code_544>

  bl hkomma @ Low-Teil zuerst - Little Endian ! Außerdem stimmen so die Linkfelder.
 8002460:	f7ff ffd0 	bl	8002404 <Code_544>
  pop {pc}
 8002464:	bd00      	pop	{pc}

08002466 <Dictionary_556>:
 8002466:	24ce      	.short	0x24ce
 8002468:	00000800 	.word	0x00000800
 800246c:	72747307 	.word	0x72747307
 8002470:	2c676e69 	.word	0x2c676e69

08002474 <Code_556>:

@ -----------------------------------------------------------------------------
  Wortbirne Flag_visible, "string," @ ( c-addr length -- )
stringkomma: @ Fügt ein String an das Dictionary an  Write a string in Dictionary.
@ -----------------------------------------------------------------------------
   push {r0, r1, r2, lr}
 8002474:	b507      	push	{r0, r1, r2, lr}
   @ write "string, : >"
   @ ddup
   @ bl stype
   @ writeln "<"

   movs r1, #0xFF @ Maximum counted string length
 8002476:	21ff      	movs	r1, #255	; 0xff
   ands r1, tos   @ Fetch string length
 8002478:	4031      	ands	r1, r6
   drop
 800247a:	cf40      	ldmia	r7!, {r6}
   popda r0 @ Fetch string address
 800247c:	0030      	movs	r0, r6
 800247e:	cf40      	ldmia	r7!, {r6}

   cmp r1, #0 @ Zero length string ?
 8002480:	2900      	cmp	r1, #0
   bne 1f
 8002482:	d105      	bne.n	8002490 <Code_556+0x1c>

     pushdaconst 0
 8002484:	f847 6d04 	str.w	r6, [r7, #-4]!
 8002488:	2600      	movs	r6, #0
     bl hkomma
 800248a:	f7ff ffbb 	bl	8002404 <Code_544>
     pop {r0, r1, r2, pc}
 800248e:	bd07      	pop	{r0, r1, r2, pc}

1: @ Write length byte and the first character.
   pushdatos
 8002490:	f847 6d04 	str.w	r6, [r7, #-4]!
   ldrb tos, [r0]
 8002494:	7806      	ldrb	r6, [r0, #0]
   lsls tos, #8
 8002496:	0236      	lsls	r6, r6, #8
   orrs tos, r1
 8002498:	430e      	orrs	r6, r1
   bl hkomma
 800249a:	f7ff ffb3 	bl	8002404 <Code_544>
   adds r0, #1 @ Advance pointer
 800249e:	3001      	adds	r0, #1
   subs r1, #1 @ One character less left
 80024a0:	3901      	subs	r1, #1

2: cmp r1, #2 @ Two or more characters left ?
 80024a2:	2902      	cmp	r1, #2
   blo 3f
 80024a4:	d30a      	bcc.n	80024bc <Code_556+0x48>
   @ Write two characters.
   pushdatos
 80024a6:	f847 6d04 	str.w	r6, [r7, #-4]!
   ldrb tos, [r0, #1]
 80024aa:	7846      	ldrb	r6, [r0, #1]
   lsls tos, #8
 80024ac:	0236      	lsls	r6, r6, #8
   ldrb r2, [r0]
 80024ae:	7802      	ldrb	r2, [r0, #0]
   orrs tos, r2
 80024b0:	4316      	orrs	r6, r2
   bl hkomma
 80024b2:	f7ff ffa7 	bl	8002404 <Code_544>
   adds r0, #2 @ Advance pointer
 80024b6:	3002      	adds	r0, #2
   subs r1, #2 @ One character less left
 80024b8:	3902      	subs	r1, #2
   b 2b
 80024ba:	e7f2      	b.n	80024a2 <Code_556+0x2e>

3: @ One or zero characters left.
   cmp r1, #0
 80024bc:	2900      	cmp	r1, #0
   bne 4f
 80024be:	d100      	bne.n	80024c2 <Code_556+0x4e>
     pop {r0, r1, r2, pc}
 80024c0:	bd07      	pop	{r0, r1, r2, pc}

4: @ One character left
   pushdatos
 80024c2:	f847 6d04 	str.w	r6, [r7, #-4]!
   ldrb tos, [r0]
 80024c6:	7806      	ldrb	r6, [r0, #0]
   bl hkomma
 80024c8:	f7ff ff9c 	bl	8002404 <Code_544>
   pop {r0, r1, r2, pc}
 80024cc:	bd07      	pop	{r0, r1, r2, pc}

080024ce <Dictionary_564>:
 80024ce:	2528      	.short	0x2528
 80024d0:	00000800 	.word	0x00000800
 80024d4:	6c6c6105 	.word	0x6c6c6105
 80024d8:	746f      	.short	0x746f

080024da <Code_564>:
@------------------------------------------------------------------------------
  Wortbirne Flag_visible, "allot" @ Erhöht den Dictionaryzeiger, schafft Platz !  Advance Dictionarypointer and check if there is enough space left for the requested amount.
allot:  @ Überprüft auch gleich, ob ich mich noch im Ram befinde.
        @ Ansonsten verweigtert Allot seinen Dienst.
@------------------------------------------------------------------------------
  ldr r0, =Dictionarypointer
 80024da:	484a      	ldr	r0, [pc, #296]	; (8002604 <Zweitpointertausch+0x4e>)
  ldr r1, [r0]
 80024dc:	6801      	ldr	r1, [r0, #0]

  ldr r2, =Backlinkgrenze
 80024de:	4a49      	ldr	r2, [pc, #292]	; (8002604 <Zweitpointertausch+0x4e>)
  cmp r1, r2
 80024e0:	4291      	cmp	r1, r2
  bhs.n allot_ram @ Befinde mich im Ram. Schalte um !
 80024e2:	d20f      	bcs.n	8002504 <allot_ram>

  @ Allot-Flash:
  popda r2    @ Gewünschte Länge
 80024e4:	0032      	movs	r2, r6
 80024e6:	cf40      	ldmia	r7!, {r6}
  adds r1, r2  @ Pointer vorrücken
 80024e8:	1889      	adds	r1, r1, r2

  ldr r2, =FlashDictionaryEnde
 80024ea:	4a47      	ldr	r2, [pc, #284]	; (8002608 <Zweitpointertausch+0x52>)

  cmp r1, r2
 80024ec:	4291      	cmp	r1, r2
  blo.n allot_ok
 80024ee:	d319      	bcc.n	8002524 <allot_ok>
    Fehler_Quit "Flash full"
 80024f0:	f7ff fa0c 	bl	800190c <dotgaensefuesschen>
 80024f4:	616c460b 	.word	0x616c460b
 80024f8:	66206873 	.word	0x66206873
 80024fc:	0a6c6c75 	.word	0x0a6c6c75
 8002500:	f001 b927 	b.w	8003752 <Code_926>

08002504 <allot_ram>:

  @ Allot-Ram:
allot_ram:
  popda r2    @ Gewünschte Länge
 8002504:	0032      	movs	r2, r6
 8002506:	cf40      	ldmia	r7!, {r6}
  adds r1, r2  @ Pointer vorrücken
 8002508:	1889      	adds	r1, r1, r2

@ ldr r2, =RamDictionaryEnde
  ldr r2, =VariablenPointer  @ Am Ende des RAMs liegen die Variablen. Diese sind die Ram-Voll-Grenze...
 800250a:	4a40      	ldr	r2, [pc, #256]	; (800260c <Zweitpointertausch+0x56>)
  ldr r2, [r2]               @ There are variables defined in Flash at the end of RAM. Don't overwrite them !
 800250c:	6812      	ldr	r2, [r2, #0]

  cmp r1, r2
 800250e:	4291      	cmp	r1, r2
  blo.n allot_ok
 8002510:	d308      	bcc.n	8002524 <allot_ok>
    Fehler_Quit "Ram full"
 8002512:	f7ff f9fb 	bl	800190c <dotgaensefuesschen>
 8002516:	5209      	.short	0x5209
 8002518:	66206d61 	.word	0x66206d61
 800251c:	0a6c6c75 	.word	0x0a6c6c75
 8002520:	f001 b917 	b.w	8003752 <Code_926>

08002524 <allot_ok>:

allot_ok: @ Alles paletti, es ist noch Platz da !  Everything is fine, just allot it !
  str r1, [r0]
 8002524:	6001      	str	r1, [r0, #0]
  bx lr
 8002526:	4770      	bx	lr

08002528 <Dictionary_569>:
 8002528:	0800254c 	.word	0x0800254c
 800252c:	66090000 	.word	0x66090000
 8002530:	6567726f 	.word	0x6567726f
 8002534:	6d617274 	.word	0x6d617274

08002538 <Code_569>:
@ A small check takes care of the case if you are already in the memory you request.

@ -----------------------------------------------------------------------------
  Wortbirne Flag_visible, "forgetram"
@ -----------------------------------------------------------------------------
  push {lr}
 8002538:	b500      	push	{lr}
  bl compiletoram
 800253a:	f000 f825 	bl	8002588 <Code_573>
    @ Dictionarypointer ins RAM setzen
    @ Set dictionary pointer into RAM first
    ldr r0, =Dictionarypointer
 800253e:	4831      	ldr	r0, [pc, #196]	; (8002604 <Zweitpointertausch+0x4e>)
    ldr r1, =RamDictionaryAnfang
 8002540:	4933      	ldr	r1, [pc, #204]	; (8002610 <Zweitpointertausch+0x5a>)
    str r1, [r0]
 8002542:	6001      	str	r1, [r0, #0]

    @ Fadenende fürs RAM vorbereiten
    @ Set latest for RAM
    ldr r0, =Fadenende
 8002544:	4833      	ldr	r0, [pc, #204]	; (8002614 <Zweitpointertausch+0x5e>)
    ldr r1, =CoreDictionaryAnfang
 8002546:	4934      	ldr	r1, [pc, #208]	; (8002618 <Zweitpointertausch+0x62>)
    str r1, [r0]
 8002548:	6001      	str	r1, [r0, #0]
  pop {pc}
 800254a:	bd00      	pop	{pc}

0800254c <Dictionary_570>:
 800254c:	08002574 	.word	0x08002574
 8002550:	630d0000 	.word	0x630d0000
 8002554:	69706d6f 	.word	0x69706d6f
 8002558:	6f74656c 	.word	0x6f74656c
 800255c:	3f6d6172 	.word	0x3f6d6172

08002560 <Code_570>:

@ -----------------------------------------------------------------------------
  Wortbirne Flag_visible, "compiletoram?"
@ -----------------------------------------------------------------------------
  pushdaconst 0
 8002560:	f847 6d04 	str.w	r6, [r7, #-4]!
 8002564:	2600      	movs	r6, #0

  @ Prüfe, ob der Dictionarypointer im Ram oder im Flash ist:
  ldr r0, =Dictionarypointer
 8002566:	4827      	ldr	r0, [pc, #156]	; (8002604 <Zweitpointertausch+0x4e>)
  ldr r0, [r0]
 8002568:	6800      	ldr	r0, [r0, #0]

  ldr r1, =Backlinkgrenze
 800256a:	4926      	ldr	r1, [pc, #152]	; (8002604 <Zweitpointertausch+0x4e>)
  cmp r0, r1
 800256c:	4288      	cmp	r0, r1
  blo.n 1f @ Befinde mich im Flash --> False
 800256e:	d348      	bcc.n	8002602 <Zweitpointertausch+0x4c>
    mvns tos, tos @ Im Ram --> True
 8002570:	43f6      	mvns	r6, r6
  bx lr
 8002572:	4770      	bx	lr

08002574 <Dictionary_573>:
 8002574:	08002594 	.word	0x08002594
 8002578:	630c0000 	.word	0x630c0000
 800257c:	69706d6f 	.word	0x69706d6f
 8002580:	6f74656c 	.word	0x6f74656c
 8002584:	6172      	.short	0x6172
 8002586:	6d          	.byte	0x6d
	...

08002588 <Code_573>:
@ -----------------------------------------------------------------------------
  Wortbirne Flag_visible, "compiletoram"
compiletoram:
@ -----------------------------------------------------------------------------
  @ Prüfe, ob der Dictionarypointer im Ram oder im Flash ist:
  ldr r0, =Dictionarypointer
 8002588:	481e      	ldr	r0, [pc, #120]	; (8002604 <Zweitpointertausch+0x4e>)
  ldr r0, [r0]
 800258a:	6800      	ldr	r0, [r0, #0]

  ldr r1, =Backlinkgrenze
 800258c:	491d      	ldr	r1, [pc, #116]	; (8002604 <Zweitpointertausch+0x4e>)
  cmp r0, r1
 800258e:	4288      	cmp	r0, r1
  blo.n Zweitpointertausch @ Befinde mich im Flash. Schalte um !
 8002590:	d311      	bcc.n	80025b6 <Zweitpointertausch>
  bx lr
 8002592:	4770      	bx	lr

08002594 <Dictionary_574>:
 8002594:	08002624 	.word	0x08002624
 8002598:	630e0000 	.word	0x630e0000
 800259c:	69706d6f 	.word	0x69706d6f
 80025a0:	6f74656c 	.word	0x6f74656c
 80025a4:	73616c66 	.word	0x73616c66
 80025a8:	68          	.byte	0x68
	...

080025aa <Code_574>:
@ -----------------------------------------------------------------------------
  Wortbirne Flag_visible, "compiletoflash"
compiletoflash:
@ -----------------------------------------------------------------------------
  @ Prüfe, ob der Dictionarypointer im Ram oder im Flash ist:
  ldr r0, =Dictionarypointer
 80025aa:	4816      	ldr	r0, [pc, #88]	; (8002604 <Zweitpointertausch+0x4e>)
  ldr r0, [r0]
 80025ac:	6800      	ldr	r0, [r0, #0]

  ldr r1, =Backlinkgrenze
 80025ae:	4915      	ldr	r1, [pc, #84]	; (8002604 <Zweitpointertausch+0x4e>)
  cmp r0, r1
 80025b0:	4288      	cmp	r0, r1
  bhs.n Zweitpointertausch @ Befinde mich im Ram. Schalte um !
 80025b2:	d200      	bcs.n	80025b6 <Zweitpointertausch>
  bx lr
 80025b4:	4770      	bx	lr

080025b6 <Zweitpointertausch>:


Zweitpointertausch:
  ldr r0, =Fadenende
 80025b6:	4817      	ldr	r0, [pc, #92]	; (8002614 <Zweitpointertausch+0x5e>)
  ldr r1, =ZweitFadenende
 80025b8:	4918      	ldr	r1, [pc, #96]	; (800261c <Zweitpointertausch+0x66>)
  ldr r2, [r0]
 80025ba:	6802      	ldr	r2, [r0, #0]
  ldr r3, [r1]
 80025bc:	680b      	ldr	r3, [r1, #0]
  str r2, [r1]
 80025be:	600a      	str	r2, [r1, #0]
  str r3, [r0]
 80025c0:	6003      	str	r3, [r0, #0]

  ldr r0, =Dictionarypointer
 80025c2:	4810      	ldr	r0, [pc, #64]	; (8002604 <Zweitpointertausch+0x4e>)
  ldr r1, =ZweitDictionaryPointer
 80025c4:	4916      	ldr	r1, [pc, #88]	; (8002620 <Zweitpointertausch+0x6a>)
  ldr r2, [r0]
 80025c6:	6802      	ldr	r2, [r0, #0]
  ldr r3, [r1]
 80025c8:	680b      	ldr	r3, [r1, #0]
  str r2, [r1]
 80025ca:	600a      	str	r2, [r1, #0]
  str r3, [r0]
 80025cc:	6003      	str	r3, [r0, #0]
  @ Der muss immer unterhalb des VariablenPointers sein !
  @ Compare Dictionarypointer to Variablepointer and give warning if they collide.
  @ That happens if your already have a lot of definitions in RAM,
  @ then define a lot of variables in Flash and then switch back for compiling to RAM.

  ldr r0, =VariablenPointer
 80025ce:	480f      	ldr	r0, [pc, #60]	; (800260c <Zweitpointertausch+0x56>)
  ldr r0, [r0]
 80025d0:	6800      	ldr	r0, [r0, #0]
  cmp r3, r0
 80025d2:	4283      	cmp	r3, r0
  blo 1f
 80025d4:	d315      	bcc.n	8002602 <Zweitpointertausch+0x4c>
   push {lr}
 80025d6:	b500      	push	{lr}
   writeln " Variables collide with dictionary"
 80025d8:	f7ff f998 	bl	800190c <dotgaensefuesschen>
 80025dc:	61562023 	.word	0x61562023
 80025e0:	62616972 	.word	0x62616972
 80025e4:	2073656c 	.word	0x2073656c
 80025e8:	6c6c6f63 	.word	0x6c6c6f63
 80025ec:	20656469 	.word	0x20656469
 80025f0:	68746977 	.word	0x68746977
 80025f4:	63696420 	.word	0x63696420
 80025f8:	6e6f6974 	.word	0x6e6f6974
 80025fc:	0a797261 	.word	0x0a797261
   pop {pc}
 8002600:	bd00      	pop	{pc}

1:bx lr
 8002602:	4770      	bx	lr
  ldr r0, =Dictionarypointer
 8002604:	20001000 	.word	0x20001000
  ldr r2, =FlashDictionaryEnde
 8002608:	080c0000 	.word	0x080c0000
  ldr r2, =VariablenPointer  @ Am Ende des RAMs liegen die Variablen. Diese sind die Ram-Voll-Grenze...
 800260c:	20001024 	.word	0x20001024
    ldr r1, =RamDictionaryAnfang
 8002610:	200016d4 	.word	0x200016d4
    ldr r0, =Fadenende
 8002614:	20001004 	.word	0x20001004
    ldr r1, =CoreDictionaryAnfang
 8002618:	08000180 	.word	0x08000180
  ldr r1, =ZweitFadenende
 800261c:	2000101c 	.word	0x2000101c
  ldr r1, =ZweitDictionaryPointer
 8002620:	20001018 	.word	0x20001018

08002624 <Dictionary_576>:
 8002624:	08002726 	.word	0x08002726
 8002628:	28080000 	.word	0x28080000
 800262c:	61657263 	.word	0x61657263
 8002630:	6574      	.short	0x6574
 8002632:	29          	.byte	0x29
	...

08002634 <Code_576>:
        @ erstellt einen neuen Kopf im Dictionary und verlinkt ihn.
        @ Fetch new token from buffer, create a new dictionary header and take care of links.
        @ Links are very different for RAM and Flash !
        @ As we can write Flash only once, freshly created definitions have no code at all.
@ -----------------------------------------------------------------------------
  push {lr}
 8002634:	b500      	push	{lr}
  bl token @ Hole den Namen der neuen Definition.  Fetch name for new definition.
 8002636:	f000 fd00 	bl	800303a <Code_797>
  @ ( Tokenadresse Länge )

  cmp tos, #0     @ Check if token is empty. That happens if input buffer is empty after create.
 800263a:	2e00      	cmp	r6, #0
  bne 1f
 800263c:	d10e      	bne.n	800265c <Code_576+0x28>
    @ Token ist leer. Brauche Stacks nicht zu putzen.
    Fehler_Quit " Create needs name !"
 800263e:	f7ff f965 	bl	800190c <dotgaensefuesschen>
 8002642:	2015      	.short	0x2015
 8002644:	61657243 	.word	0x61657243
 8002648:	6e206574 	.word	0x6e206574
 800264c:	73646565 	.word	0x73646565
 8002650:	6d616e20 	.word	0x6d616e20
 8002654:	0a212065 	.word	0x0a212065
 8002658:	f001 b87b 	b.w	8003752 <Code_926>

1:@ Tokenname ist okay.               Name is ok.
  @ Prüfe, ob er schon existiert.     Check if it already exists.
  ddup
 800265c:	6838      	ldr	r0, [r7, #0]
 800265e:	f847 6d04 	str.w	r6, [r7, #-4]!
 8002662:	3f04      	subs	r7, #4
 8002664:	6038      	str	r0, [r7, #0]
  @ ( Tokenadresse Länge Tokenadresse Länge )
  bl find
 8002666:	f000 f9a7 	bl	80029b8 <Code_641>
  @ ( Tokenadresse Länge Einsprungadresse Flags )
  drop @ Benötige die Flags hier nicht. Möchte doch nur schauen, ob es das Wort schon gibt.  No need for the Flags...
 800266a:	cf40      	ldmia	r7!, {r6}
  @ ( Tokenadresse Länge Einsprungadresse )

  @ Prüfe, ob die Suche erfolgreich gewesen ist.  Do we have a search result ?
  cmp tos, #0
 800266c:	2e00      	cmp	r6, #0
  drop
 800266e:	cf40      	ldmia	r7!, {r6}
  @ ( Tokenadresse Länge )
  beq 2f
 8002670:	d011      	beq.n	8002696 <Code_576+0x62>
    ddup
 8002672:	6838      	ldr	r0, [r7, #0]
 8002674:	f847 6d04 	str.w	r6, [r7, #-4]!
 8002678:	3f04      	subs	r7, #4
 800267a:	6038      	str	r0, [r7, #0]
    bl stype @ Den neuen Tokennamen nochmal ausgeben
    write ".\x1B[0m "

  .else

    write "Redefine "
 800267c:	f7ff f946 	bl	800190c <dotgaensefuesschen>
 8002680:	64655209 	.word	0x64655209
 8002684:	6e696665 	.word	0x6e696665
 8002688:	2065      	.short	0x2065
    bl stype @ Den neuen Tokennamen nochmal ausgeben
 800268a:	f7ff f993 	bl	80019b4 <Code_374>
    write ". "
 800268e:	f7ff f93d 	bl	800190c <dotgaensefuesschen>
 8002692:	2e02      	.short	0x2e02
 8002694:	20          	.byte	0x20
 8002695:	00          	.byte	0x00
  .endif


2:@ ( Tokenadresse Länge )

  bl align4komma
 8002696:	f7ff fe8d 	bl	80023b4 <Code_540>

  @ Prüfe, ob der Dictionarypointer im Ram oder im Flash ist:
  ldr r0, =Dictionarypointer
 800269a:	4895      	ldr	r0, [pc, #596]	; (80028f0 <rambuffer_ram+0x44>)
  ldr r0, [r0]
 800269c:	6800      	ldr	r0, [r0, #0]

  ldr r1, =Backlinkgrenze
 800269e:	4994      	ldr	r1, [pc, #592]	; (80028f0 <rambuffer_ram+0x44>)
  cmp r0, r1
 80026a0:	4288      	cmp	r0, r1
  bhs.n create_ram @ Befinde mich im Ram. Schalte um !
 80026a2:	d227      	bcs.n	80026f4 <create_ram>

  @ -----------------------------------------------------------------------------
  @ Create for Flash
  @ ( Tokenadresse Länge )

  ldr r0, =FlashFlags
 80026a4:	4893      	ldr	r0, [pc, #588]	; (80028f4 <rambuffer_ram+0x48>)
  ldr r1, =Flag_visible
 80026a6:	f04f 0100 	mov.w	r1, #0
  str r1, [r0]  @ Flags vorbereiten  Prepare Flags for collecting
 80026aa:	6001      	str	r1, [r0, #0]
    pushdaconst 4   @ Es muss ein kompletter 8-Byte-Block für das Linkfeld reserviert werden
    bl allot        @ damit dies später noch nachträglich eingefügt werden kann.
  .endif

  .ifdef flash16bytesblockwrite
    bl align16komma @ Vorrücken auf die nächste passende Schreibstelle
 80026ac:	f7ff fe97 	bl	80023de <Code_542>
    pushdaconst 12  @ Es muss ein kompletter 16-Byte-Block für das Linkfeld reserviert werden
 80026b0:	f847 6d04 	str.w	r6, [r7, #-4]!
 80026b4:	260c      	movs	r6, #12
    bl allot        @ damit dies später noch nachträglich eingefügt werden kann.
 80026b6:	f7ff ff10 	bl	80024da <Code_564>
  .endif

  bl here @ ( Tokenadresse Länge Neue-Linkadresse ) Das wird die neue Linkadresse
 80026ba:	f000 fa0c 	bl	8002ad6 <Code_663>
  pushdaconst 6 @ Lücke für die Flags und Link lassen  Leave space for Flags and Link - they are not known yet at this time.
 80026be:	f847 6d04 	str.w	r6, [r7, #-4]!
 80026c2:	2606      	movs	r6, #6
  bl allot
 80026c4:	f7ff ff09 	bl	80024da <Code_564>

  bl minusrot
 80026c8:	f7fe f8e6 	bl	8000898 <Code_137>
  bl stringkomma @ Den Namen einfügen  Insert Name
 80026cc:	f7ff fed2 	bl	8002474 <Code_556>

  @ Jetzt den aktuellen Link an die passende Stelle im letzten Wort einfügen,
  @ falls dort FFFF FFFF steht:
  @ Insert Link to fresh definition into old latest if there is still -1 in its Link field:

  ldr r0, =Fadenende @ Hole das aktuelle Fadenende  Fetch old latest
 80026d0:	4889      	ldr	r0, [pc, #548]	; (80028f8 <rambuffer_ram+0x4c>)
  ldr r1, [r0]
 80026d2:	6801      	ldr	r1, [r0, #0]

  ldr r2, [r1] @ Inhalt des Link-Feldes holen  Check if Link is set
 80026d4:	680a      	ldr	r2, [r1, #0]

  ldr r3, =erasedword
 80026d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  cmp r2, r3 @ Ist der Link ungesetzt ?      Isn't it ?
 80026da:	429a      	cmp	r2, r3
  bne 1f
 80026dc:	d107      	bne.n	80026ee <Code_576+0xba>

  @ Neuen Link einfügen: Im Prinzip str tos, [r1] über Komma.
  @ Insert new Link. This is str tos, [r1] rerouted over comma because Flash has to be written.
    @ Dictionary-Pointer verbiegen:
      @ Dictionarypointer sichern
      ldr r2, =Dictionarypointer
 80026de:	4a84      	ldr	r2, [pc, #528]	; (80028f0 <rambuffer_ram+0x44>)
      ldr r3, [r2] @ Alten Dictionarypointer auf jeden Fall bewahren
 80026e0:	6813      	ldr	r3, [r2, #0]
      str r1, [r2] @ Dictionarypointer umbiegen
 80026e2:	6011      	str	r1, [r2, #0]
      dup @ ( Neue-Linkadresse Neue-Linkadresse )
 80026e4:	f847 6d04 	str.w	r6, [r7, #-4]!
      bl komma     @ Link einfügen
 80026e8:	f7ff fea6 	bl	8002438 <Code_550>
      str r3, [r2] @ Dictionarypointer wieder zurücksetzen.
 80026ec:	6013      	str	r3, [r2, #0]

1:@ Backlink fertig gesetzt.  Finished Backlinking.
  @ Fadenende aktualisieren:  Set fresh latest.
  str tos, [r0] @ Neues-Fadenende in die Fadenende-Variable legen
 80026ee:	6006      	str	r6, [r0, #0]
  drop
 80026f0:	cf40      	ldmia	r7!, {r6}

  b.n create_ende
 80026f2:	e013      	b.n	800271c <create_ende>

080026f4 <create_ram>:

  @ -----------------------------------------------------------------------------
  @ Create for RAM
create_ram:

  bl here @ ( Tokenadresse Länge Neue-Linkadresse ) Das wird die neue Linkadresse
 80026f4:	f000 f9ef 	bl	8002ad6 <Code_663>

  @ Link setzen  Write Link
  ldr r0, =Fadenende
 80026f8:	487f      	ldr	r0, [pc, #508]	; (80028f8 <rambuffer_ram+0x4c>)
  pushdatos
 80026fa:	f847 6d04 	str.w	r6, [r7, #-4]!
  ldr tos, [r0] @ Das alte Fadenende hinein   Old latest
 80026fe:	6806      	ldr	r6, [r0, #0]
  bl komma
 8002700:	f7ff fe9a 	bl	8002438 <Code_550>

  @ Flags setzen  Set initial Flags to Invisible.
  pushdatos
 8002704:	f847 6d04 	str.w	r6, [r7, #-4]!
  ldr tos, =Flag_invisible
 8002708:	f64f 76ff 	movw	r6, #65535	; 0xffff
  bl hkomma
 800270c:	f7ff fe7a 	bl	8002404 <Code_544>

  @ Das Fadenende aktualisieren  Set new latest
  ldr r0, =Fadenende
 8002710:	4879      	ldr	r0, [pc, #484]	; (80028f8 <rambuffer_ram+0x4c>)
  popda r1
 8002712:	0031      	movs	r1, r6
 8002714:	cf40      	ldmia	r7!, {r6}
  str r1, [r0]
 8002716:	6001      	str	r1, [r0, #0]

  @ Den Namen schreiben  Write Name
  bl stringkomma
 8002718:	f7ff feac 	bl	8002474 <Code_556>

0800271c <create_ende>:


create_ende: @ Save code entry point of current definition for recurse and dodoes
  ldr r0, =Dictionarypointer
 800271c:	4874      	ldr	r0, [pc, #464]	; (80028f0 <rambuffer_ram+0x44>)
  ldr r1, [r0]
 800271e:	6801      	ldr	r1, [r0, #0]
  ldr r0, =Einsprungpunkt
 8002720:	4876      	ldr	r0, [pc, #472]	; (80028fc <rambuffer_ram+0x50>)
  str r1, [r0]
 8002722:	6001      	str	r1, [r0, #0]

  @ Fertig :-)  Finished :-)
  pop {pc}
 8002724:	bd00      	pop	{pc}

08002726 <Dictionary_596>:
 8002726:	273e      	.short	0x273e
 8002728:	00000800 	.word	0x00000800
 800272c:	72617608 	.word	0x72617608
 8002730:	6c626169 	.word	0x6c626169
 8002734:	65          	.byte	0x65
	...

08002736 <Code_596>:


@ -----------------------------------------------------------------------------
  Wortbirne Flag_visible, "variable" @ ( n -- )
@ -----------------------------------------------------------------------------
  pushdaconst 1
 8002736:	f847 6d04 	str.w	r6, [r7, #-4]!
 800273a:	2601      	movs	r6, #1
  b.n nvariable
 800273c:	e013      	b.n	8002766 <Code_602>

0800273e <Dictionary_599>:
 800273e:	2756      	.short	0x2756
 8002740:	00000800 	.word	0x00000800
 8002744:	61763209 	.word	0x61763209
 8002748:	62616972 	.word	0x62616972
 800274c:	656c      	.short	0x656c

0800274e <Code_599>:

@ -----------------------------------------------------------------------------
  Wortbirne Flag_visible, "2variable" @ ( d -- )
@ -----------------------------------------------------------------------------
  pushdaconst 2
 800274e:	f847 6d04 	str.w	r6, [r7, #-4]!
 8002752:	2602      	movs	r6, #2
  b.n nvariable
 8002754:	e007      	b.n	8002766 <Code_602>

08002756 <Dictionary_602>:
 8002756:	2830      	.short	0x2830
 8002758:	00000800 	.word	0x00000800
 800275c:	61766e09 	.word	0x61766e09
 8002760:	62616972 	.word	0x62616972
 8002764:	656c      	.short	0x656c

08002766 <Code_602>:
@------------------------------------------------------------------------------
  Wortbirne Flag_visible, "nvariable" @ ( Init-Values Length -- )
nvariable: @ Creates an initialised variable of given length.
@------------------------------------------------------------------------------

  push {lr}
 8002766:	b500      	push	{lr}
  bl create
 8002768:	f7ff ff64 	bl	8002634 <Code_576>

  ldr r0, =Dictionarypointer
 800276c:	4860      	ldr	r0, [pc, #384]	; (80028f0 <rambuffer_ram+0x44>)
  ldr r1, [r0]
 800276e:	6801      	ldr	r1, [r0, #0]

  ldr r2, =Backlinkgrenze
 8002770:	4a5f      	ldr	r2, [pc, #380]	; (80028f0 <rambuffer_ram+0x44>)
  cmp r1, r2
 8002772:	4291      	cmp	r1, r2
  bhs.n variable_ram @ Befinde mich im Ram. Schalte um !
 8002774:	d234      	bcs.n	80027e0 <variable_ram>

      @ Eine echte Flash-Variable entsteht so, dass Platz im Ram angefordert wird.
      @ Prüfe hier, ob genug Ram da ist !?
      @ Maybe check in future if there is enough RAM left ?

  movs r0, #0x0F @ Maximum length for flash variables !
 8002776:	200f      	movs	r0, #15
  ands tos, r0   @ Limit is important to not break Flags for catchflashpointers.
 8002778:	4006      	ands	r6, r0

  @ Variablenpointer erniedrigen und zurückschreiben   Decrement variable pointer

  lsls r2, tos, #2 @ Multiply number of elements with 4 to get byte count
 800277a:	00b2      	lsls	r2, r6, #2

  ldr r0, =VariablenPointer
 800277c:	4860      	ldr	r0, [pc, #384]	; (8002900 <rambuffer_ram+0x54>)
  ldr r1, [r0]
 800277e:	6801      	ldr	r1, [r0, #0]
  subs r1, r2  @ Ram voll ?  Maybe insert a check for enough RAM left ?
 8002780:	1a89      	subs	r1, r1, r2
    ldr r2, =RamDictionaryAnfang
 8002782:	4a60      	ldr	r2, [pc, #384]	; (8002904 <rambuffer_ram+0x58>)
    cmp r1, r2
 8002784:	4291      	cmp	r1, r2
    bhs 1f
 8002786:	d20b      	bcs.n	80027a0 <Code_602+0x3a>
      Fehler_quit "Not enough RAM"
 8002788:	f7ff f8c0 	bl	800190c <dotgaensefuesschen>
 800278c:	746f4e0f 	.word	0x746f4e0f
 8002790:	6f6e6520 	.word	0x6f6e6520
 8002794:	20686775 	.word	0x20686775
 8002798:	0a4d4152 	.word	0x0a4d4152
 800279c:	f000 bfd9 	b.w	8003752 <Code_926>
1:str r1, [r0]
 80027a0:	6001      	str	r1, [r0, #0]

  @ Code schreiben:  Write code
  pushda r1
 80027a2:	f847 6d04 	str.w	r6, [r7, #-4]!
 80027a6:	000e      	movs	r6, r1
  bl literalkomma    @ Adresse im Ram immer mit movt --> 12 Bytes
 80027a8:	f7ff fb5a 	bl	8001e60 <Code_440>
  pushdaconstw 0x4770 @ Opcode für bx lr --> 2 Bytes
 80027ac:	f847 6d04 	str.w	r6, [r7, #-4]!
 80027b0:	f244 7670 	movw	r6, #18288	; 0x4770
  bl hkomma
 80027b4:	f7ff fe26 	bl	8002404 <Code_544>

  @ Amount of elements to write is in TOS.
  @ Write code and initialise elements.
  @ r1 is target location in RAM.

  popda r0   @ Fetch amount of cells
 80027b8:	0030      	movs	r0, r6
 80027ba:	cf40      	ldmia	r7!, {r6}
  movs r2, r0 @ Save the value for generating flags for catchflashpointers later
 80027bc:	0002      	movs	r2, r0
  cmp r0, #0 @ If nvariable is called with length zero... Maybe this could be useful sometimes.
 80027be:	2800      	cmp	r0, #0
  beq 2f
 80027c0:	d005      	beq.n	80027ce <Code_602+0x68>

1:str tos, [r1] @ Initialize RAM location
 80027c2:	600e      	str	r6, [r1, #0]
  adds r1, #4
 80027c4:	3104      	adds	r1, #4
  bl komma      @ Put initialisation value for catchflashpointers in place.
 80027c6:	f7ff fe37 	bl	8002438 <Code_550>
  subs r0, #1
 80027ca:	3801      	subs	r0, #1
  bne 1b
 80027cc:	d1f9      	bne.n	80027c2 <Code_602+0x5c>

2:@ Finished.

  pushdaconst Flag_ramallot & ~Flag_visible @ Finally (!) set Flags for RAM usage.
 80027ce:	f847 6d04 	str.w	r6, [r7, #-4]!
 80027d2:	2680      	movs	r6, #128	; 0x80
  orrs tos, r2               @ Or together with desired amount of cells.
 80027d4:	4316      	orrs	r6, r2
  bl setflags
 80027d6:	f7ff fd9c 	bl	8002312 <Code_536>
  bl smudge
 80027da:	f7ff fd64 	bl	80022a6 <Code_531>
  pop {pc}
 80027de:	bd00      	pop	{pc}

080027e0 <variable_ram>:
@  bl hkomma
@  pushdaconstw 0x4770 @ Opcode für bx lr --> 2 Bytes
@  bl hkomma

  @ This is to align dictionary pointer to have variable locations that are always 4-even
    bl here
 80027e0:	f000 f979 	bl	8002ad6 <Code_663>
    movs r0, #2
 80027e4:	2002      	movs	r0, #2
    ands tos, r0
 80027e6:	4006      	ands	r6, r0
    drop
 80027e8:	cf40      	ldmia	r7!, {r6}
    bne 1f
 80027ea:	d104      	bne.n	80027f6 <variable_ram+0x16>
      pushdaconst 0x0036  @ nop = movs tos, tos
 80027ec:	f847 6d04 	str.w	r6, [r7, #-4]!
 80027f0:	2636      	movs	r6, #54	; 0x36
      bl hkomma
 80027f2:	f7ff fe07 	bl	8002404 <Code_544>
1:

  pushdatos
 80027f6:	f847 6d04 	str.w	r6, [r7, #-4]!
  ldr tos, =0x3f04603e @ subs r7, #4    str r6, [r7, #0]
 80027fa:	4e43      	ldr	r6, [pc, #268]	; (8002908 <rambuffer_ram+0x5c>)
  bl reversekomma
 80027fc:	f7ff fe2a 	bl	8002454 <Code_553>
  pushdatos
 8002800:	f847 6d04 	str.w	r6, [r7, #-4]!
  ldr tos, =0x467e3602 @ mov r6, pc     adds r6, #2
 8002804:	4e41      	ldr	r6, [pc, #260]	; (800290c <rambuffer_ram+0x60>)
  bl reversekomma
 8002806:	f7ff fe25 	bl	8002454 <Code_553>
  pushdaconstw 0x4770  @ bx lr
 800280a:	f847 6d04 	str.w	r6, [r7, #-4]!
 800280e:	f244 7670 	movw	r6, #18288	; 0x4770
  bl hkomma
 8002812:	f7ff fdf7 	bl	8002404 <Code_544>

  @ Amount of elements to write is in TOS.

  popda r0   @ Fetch amount of cells
 8002816:	0030      	movs	r0, r6
 8002818:	cf40      	ldmia	r7!, {r6}
  cmp r0, #0 @ If nvariable is called with length zero... Maybe this could be useful sometimes.
 800281a:	2800      	cmp	r0, #0
  beq 2f
 800281c:	d003      	beq.n	8002826 <variable_ram+0x46>

1:bl komma
 800281e:	f7ff fe0b 	bl	8002438 <Code_550>
  subs r0, #1
 8002822:	3801      	subs	r0, #1
  bne 1b
 8002824:	d1fb      	bne.n	800281e <variable_ram+0x3e>

2:@ Finished.

  bl setze_faltbarflag @ Variables always are 0-foldable as their address never changes.
 8002826:	f7ff fcaf 	bl	8002188 <Code_502>
  bl smudge
 800282a:	f7ff fd3c 	bl	80022a6 <Code_531>
  pop {pc}
 800282e:	bd00      	pop	{pc}

08002830 <Dictionary_619>:
 8002830:	08002910 	.word	0x08002910
 8002834:	62070000 	.word	0x62070000
 8002838:	65666675 	.word	0x65666675
 800283c:	3a72      	.short	0x3a72

0800283e <Code_619>:
@------------------------------------------------------------------------------
  Wortbirne Flag_visible, "buffer:" @ ( Length -- )
  @ Creates an uninitialised buffer of given bytes length.
@------------------------------------------------------------------------------

  push {lr}
 800283e:	b500      	push	{lr}
  bl create
 8002840:	f7ff fef8 	bl	8002634 <Code_576>

  @ Round requested buffer length to next 4-Byte boundary to ensure alignment
  movs r0, #1
 8002844:	2001      	movs	r0, #1
  ands r0, tos
 8002846:	4030      	ands	r0, r6
  adds tos, r0
 8002848:	1836      	adds	r6, r6, r0

  movs r0, #2
 800284a:	2002      	movs	r0, #2
  ands r0, tos
 800284c:	4030      	ands	r0, r6
  adds tos, r0
 800284e:	1836      	adds	r6, r6, r0

  ldr r0, =Dictionarypointer
 8002850:	4827      	ldr	r0, [pc, #156]	; (80028f0 <rambuffer_ram+0x44>)
  ldr r1, [r0]
 8002852:	6801      	ldr	r1, [r0, #0]

  ldr r2, =Backlinkgrenze
 8002854:	4a26      	ldr	r2, [pc, #152]	; (80028f0 <rambuffer_ram+0x44>)
  cmp r1, r2
 8002856:	4291      	cmp	r1, r2
  bhs.n rambuffer_ram @ Befinde mich im Ram. Schalte um !
 8002858:	d228      	bcs.n	80028ac <rambuffer_ram>
  @ -----------------------------------------------------------------------------
  @ Buffer Flash

  @ Variablenpointer erniedrigen und zurückschreiben   Decrement variable pointer

  ldr r0, =VariablenPointer
 800285a:	4829      	ldr	r0, [pc, #164]	; (8002900 <rambuffer_ram+0x54>)
  ldr r1, [r0]
 800285c:	6801      	ldr	r1, [r0, #0]
  subs r1, tos  @ Ram voll ?  Check for enough RAM left ?
 800285e:	1b89      	subs	r1, r1, r6
    ldr r2, =RamDictionaryAnfang
 8002860:	4a28      	ldr	r2, [pc, #160]	; (8002904 <rambuffer_ram+0x58>)
    cmp r1, r2
 8002862:	4291      	cmp	r1, r2
    bhs 1f
 8002864:	d20b      	bcs.n	800287e <Code_619+0x40>
      Fehler_quit "Not enough RAM"
 8002866:	f7ff f851 	bl	800190c <dotgaensefuesschen>
 800286a:	4e0f      	.short	0x4e0f
 800286c:	6520746f 	.word	0x6520746f
 8002870:	67756f6e 	.word	0x67756f6e
 8002874:	41522068 	.word	0x41522068
 8002878:	0a4d      	.short	0x0a4d
 800287a:	f000 bf6a 	b.w	8003752 <Code_926>
1:str r1, [r0]
 800287e:	6001      	str	r1, [r0, #0]

  @ Code schreiben:  Write code
  pushda r1
 8002880:	f847 6d04 	str.w	r6, [r7, #-4]!
 8002884:	000e      	movs	r6, r1
  bl literalkomma    @ Adresse im Ram immer mit movt --> 12 Bytes
 8002886:	f7ff faeb 	bl	8001e60 <Code_440>
  pushdaconstw 0x4770 @ Opcode für bx lr --> 2 Bytes
 800288a:	f847 6d04 	str.w	r6, [r7, #-4]!
 800288e:	f244 7670 	movw	r6, #18288	; 0x4770
  bl hkomma
 8002892:	f7ff fdb7 	bl	8002404 <Code_544>

  @ Write desired size of buffer at the end of the definition
  bl komma
 8002896:	f7ff fdcf 	bl	8002438 <Code_550>

  @ Finished
  pushdaconstw Flag_buffer_foldable  @ Finally (!) set Flags for buffer usage.
 800289a:	f847 6d04 	str.w	r6, [r7, #-4]!
 800289e:	f240 1640 	movw	r6, #320	; 0x140
  bl setflags
 80028a2:	f7ff fd36 	bl	8002312 <Code_536>
  bl smudge
 80028a6:	f7ff fcfe 	bl	80022a6 <Code_531>
  pop {pc}
 80028aa:	bd00      	pop	{pc}

080028ac <rambuffer_ram>:
  @ Buffer RAM
rambuffer_ram:
  @ This is simple: Write code, allot space, a classic Forth buffer.

  @ This is to align dictionary pointer to have variable locations that are always 4-even
    bl here
 80028ac:	f000 f913 	bl	8002ad6 <Code_663>
    movs r0, #2
 80028b0:	2002      	movs	r0, #2
    ands tos, r0
 80028b2:	4006      	ands	r6, r0
    drop
 80028b4:	cf40      	ldmia	r7!, {r6}
    bne 1f
 80028b6:	d104      	bne.n	80028c2 <rambuffer_ram+0x16>
      pushdaconst 0x0036  @ nop = movs tos, tos
 80028b8:	f847 6d04 	str.w	r6, [r7, #-4]!
 80028bc:	2636      	movs	r6, #54	; 0x36
      bl hkomma
 80028be:	f7ff fda1 	bl	8002404 <Code_544>
1:

  pushdatos
 80028c2:	f847 6d04 	str.w	r6, [r7, #-4]!
  ldr tos, =0x3f04603e @ subs r7, #4    str r6, [r7, #0]
 80028c6:	4e10      	ldr	r6, [pc, #64]	; (8002908 <rambuffer_ram+0x5c>)
  bl reversekomma
 80028c8:	f7ff fdc4 	bl	8002454 <Code_553>
  pushdatos
 80028cc:	f847 6d04 	str.w	r6, [r7, #-4]!
  ldr tos, =0x467e3602 @ mov r6, pc     adds r6, #2
 80028d0:	4e0e      	ldr	r6, [pc, #56]	; (800290c <rambuffer_ram+0x60>)
  bl reversekomma
 80028d2:	f7ff fdbf 	bl	8002454 <Code_553>
  pushdaconstw 0x4770  @ bx lr
 80028d6:	f847 6d04 	str.w	r6, [r7, #-4]!
 80028da:	f244 7670 	movw	r6, #18288	; 0x4770
  bl hkomma
 80028de:	f7ff fd91 	bl	8002404 <Code_544>

  bl allot @ Reserve space. Allot checks for itself if there is enough RAM left.
 80028e2:	f7ff fdfa 	bl	80024da <Code_564>

  bl setze_faltbarflag @ Buffers always are 0-foldable as their address never changes.
 80028e6:	f7ff fc4f 	bl	8002188 <Code_502>
  bl smudge
 80028ea:	f7ff fcdc 	bl	80022a6 <Code_531>
  pop {pc}
 80028ee:	bd00      	pop	{pc}
  ldr r0, =Dictionarypointer
 80028f0:	20001000 	.word	0x20001000
  ldr r0, =FlashFlags
 80028f4:	20001020 	.word	0x20001020
  ldr r0, =Fadenende @ Hole das aktuelle Fadenende  Fetch old latest
 80028f8:	20001004 	.word	0x20001004
  ldr r0, =Einsprungpunkt
 80028fc:	20001014 	.word	0x20001014
  ldr r0, =VariablenPointer
 8002900:	20001024 	.word	0x20001024
    ldr r2, =RamDictionaryAnfang
 8002904:	200016d4 	.word	0x200016d4
  ldr tos, =0x3f04603e @ subs r7, #4    str r6, [r7, #0]
 8002908:	3f04603e 	.word	0x3f04603e
  ldr tos, =0x467e3602 @ mov r6, pc     adds r6, #2
 800290c:	467e3602 	.word	0x467e3602

08002910 <Dictionary_634>:
 8002910:	0800293e 	.word	0x0800293e
 8002914:	640f0000 	.word	0x640f0000
 8002918:	69746369 	.word	0x69746369
 800291c:	72616e6f 	.word	0x72616e6f
 8002920:	61747379 	.word	0x61747379
 8002924:	7472      	.short	0x7472

08002926 <Code_634>:
                 @ Entry point for dictionary searches.
                 @ This is different for RAM and for Flash and it changes with new definitions.
@ -----------------------------------------------------------------------------

  @ Prüfe, ob der Dictionarypointer im Ram oder im Flash ist:  Are we compiling into RAM or into Flash ?
  ldr r0, =Dictionarypointer
 8002926:	48ed      	ldr	r0, [pc, #948]	; (8002cdc <Code_706+0x10>)
  ldr r0, [r0]
 8002928:	6800      	ldr	r0, [r0, #0]

  ldr r1, =Backlinkgrenze
 800292a:	49ec      	ldr	r1, [pc, #944]	; (8002cdc <Code_706+0x10>)
  pushdatos
 800292c:	f847 6d04 	str.w	r6, [r7, #-4]!
  cmp r0, r1
 8002930:	4288      	cmp	r0, r1
  bhs 1f
 8002932:	d201      	bcs.n	8002938 <Code_634+0x12>
  ldr tos, =CoreDictionaryAnfang @ Befinde mich im Flash mit Backlinks. Muss beim CoreDictionary anfangen:        In Flash: Start with core dictionary.
 8002934:	4eea      	ldr	r6, [pc, #936]	; (8002ce0 <Code_706+0x14>)
  bx lr
 8002936:	4770      	bx	lr

1:ldr tos, =Fadenende
 8002938:	4eea      	ldr	r6, [pc, #936]	; (8002ce4 <Code_706+0x18>)
  ldr tos, [tos]                   @ Oberhalb der Backlinkgrenze bin ich im Ram, kann mit dem Fadenende beginnen.   In RAM:   Start with latest definition.
 800293a:	6836      	ldr	r6, [r6, #0]
  bx lr
 800293c:	4770      	bx	lr

0800293e <Dictionary_636>:
 800293e:	297a      	.short	0x297a
 8002940:	00000800 	.word	0x00000800
 8002944:	6369640e 	.word	0x6369640e
 8002948:	6e6f6974 	.word	0x6e6f6974
 800294c:	6e797261 	.word	0x6e797261
 8002950:	7865      	.short	0x7865
 8002952:	74          	.byte	0x74
	...

08002954 <Code_636>:

@ -----------------------------------------------------------------------------
  Wortbirne Flag_visible, "dictionarynext" @ ( address -- address flag )
dictionarynext: @ Scans dictionary chain and returns true if end is reached.
@ -----------------------------------------------------------------------------
  push {r0, r1, lr}
 8002954:	b503      	push	{r0, r1, lr}
  ldr r1, [tos]
 8002956:	6831      	ldr	r1, [r6, #0]
  ldr r0, =erasedword
 8002958:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  cmp r1, r0
 800295c:	4281      	cmp	r1, r0
  beq 1f
 800295e:	d007      	beq.n	8002970 <Code_636+0x1c>
    ldrb r0, [r1, #6]
 8002960:	7988      	ldrb	r0, [r1, #6]
    cmp r0, #erasedbyte
 8002962:	28ff      	cmp	r0, #255	; 0xff
    beq 1f
 8002964:	d004      	beq.n	8002970 <Code_636+0x1c>
      movs tos, r1
 8002966:	000e      	movs	r6, r1
      pushdaconst 0
 8002968:	f847 6d04 	str.w	r6, [r7, #-4]!
 800296c:	2600      	movs	r6, #0
      pop {r0, r1, pc}
 800296e:	bd03      	pop	{r0, r1, pc}

1:pushdatos
 8002970:	f847 6d04 	str.w	r6, [r7, #-4]!
  movs tos, #0
 8002974:	2600      	movs	r6, #0
  mvns tos, tos
 8002976:	43f6      	mvns	r6, r6
  pop {r0, r1, pc}
 8002978:	bd03      	pop	{r0, r1, pc}

0800297a <Dictionary_640>:
 800297a:	29ac      	.short	0x29ac
 800297c:	00000800 	.word	0x00000800
 8002980:	696b730a 	.word	0x696b730a
 8002984:	72747370 	.word	0x72747370
 8002988:	6e69      	.short	0x6e69
 800298a:	67          	.byte	0x67
	...

0800298c <Code_640>:

@ -----------------------------------------------------------------------------
  Wortbirne Flag_visible, "skipstring"
@ -----------------------------------------------------------------------------
    @ String überlesen und Pointer gerade machen
    ldrb r1, [tos] @ Länge des Strings holen      Fetch length
 800298c:	7831      	ldrb	r1, [r6, #0]
    adds r1, #1   @ Plus 1 Byte für die Länge   One more for length byte
 800298e:	3101      	adds	r1, #1

    movs r2, #1  @ Wenn es ungerade ist, noch einen mehr:   Maybe one more for aligning.
 8002990:	2201      	movs	r2, #1
    ands r2, r1
 8002992:	400a      	ands	r2, r1

    adds r1, r2
 8002994:	1889      	adds	r1, r1, r2
    adds tos, r1
 8002996:	1876      	adds	r6, r6, r1
    bx lr
 8002998:	4770      	bx	lr

0800299a <skipstring>:

@ -----------------------------------------------------------------------------
skipstring: @ Überspringt einen String, dessen Adresse in r0 liegt.  Skip string which address is in r0.
@ -----------------------------------------------------------------------------
  push {r1, r2}
 800299a:	b406      	push	{r1, r2}
    @ String überlesen und Pointer gerade machen
    ldrb r1, [r0] @ Länge des Strings holen      Fetch length
 800299c:	7801      	ldrb	r1, [r0, #0]
    adds r1, #1   @ Plus 1 Byte für die Länge   One more for length byte
 800299e:	3101      	adds	r1, #1

    movs r2, #1  @ Wenn es ungerade ist, noch einen mehr:   Maybe one more for aligning.
 80029a0:	2201      	movs	r2, #1
    ands r2, r1
 80029a2:	400a      	ands	r2, r1

    adds r1, r2
 80029a4:	1889      	adds	r1, r1, r2
    adds r0, r1
 80029a6:	1840      	adds	r0, r0, r1
  pop {r1, r2}
 80029a8:	bc06      	pop	{r1, r2}
  bx lr
 80029aa:	4770      	bx	lr

080029ac <Dictionary_641>:
 80029ac:	08002a32 	.word	0x08002a32
 80029b0:	66040000 	.word	0x66040000
 80029b4:	6e69      	.short	0x6e69
 80029b6:	64          	.byte	0x64
	...

080029b8 <Code_641>:
find: @ ( address length -- Code-Adresse Flags )
@ -----------------------------------------------------------------------------

.endif

  push {r4, r5, lr}
 80029b8:	b530      	push	{r4, r5, lr}
  @ r4  Adresse des zu suchenden Strings  Address of string that is searched for
  @ r5  Dessen Länge                      Length

  @ TOS Hangelpointer   Pointer for crawl the dictionary

  movs r2, #0  @ Noch keinen Treffer          No hits yet
 80029ba:	2200      	movs	r2, #0
  movs r3, #0  @ Und noch keine Trefferflags  No hits have no Flags
 80029bc:	2300      	movs	r3, #0

  popda r5 @ Fetch string length
 80029be:	0035      	movs	r5, r6
 80029c0:	cf40      	ldmia	r7!, {r6}
  popda r4 @ Fetch string address
 80029c2:	0034      	movs	r4, r6
 80029c4:	cf40      	ldmia	r7!, {r6}

  bl dictionarystart
 80029c6:	f7ff ffae 	bl	8002926 <Code_634>

1:@ Loop through the dictionary
  ldr r0, =Flag_invisible
 80029ca:	f64f 70ff 	movw	r0, #65535	; 0xffff
  ldrh r1, [tos, #4] @ Fetch Flags to see if this definition is visible.
 80029ce:	88b1      	ldrh	r1, [r6, #4]
  cmp r0, r1         @ Skip this definition if invisible
 80029d0:	4288      	cmp	r0, r1
  beq 2f
 80029d2:	d017      	beq.n	8002a04 <Code_641+0x4c>

  @ Definition is visible. Compare the name !
  dup
 80029d4:	f847 6d04 	str.w	r6, [r7, #-4]!
  adds tos, #6 @ Skip Link and Flags
 80029d8:	3606      	adds	r6, #6
  bl count     @ Prepare an address-length string
 80029da:	f7fe ffd3 	bl	8001984 <Code_370>

  pushda r4
 80029de:	f847 6d04 	str.w	r6, [r7, #-4]!
 80029e2:	0026      	movs	r6, r4
  pushda r5
 80029e4:	f847 6d04 	str.w	r6, [r7, #-4]!
 80029e8:	002e      	movs	r6, r5
  bl compare
 80029ea:	f7fe ff08 	bl	80017fe <Code_333>

  cmp tos, #0 @ Flag vom Vergleich prüfen  Ckeck for Flag from string comparision
 80029ee:	2e00      	cmp	r6, #0
  drop
 80029f0:	cf40      	ldmia	r7!, {r6}
  beq 2f
 80029f2:	d007      	beq.n	8002a04 <Code_641+0x4c>

    @ Gefunden ! Found !
    @ String überlesen und Pointer gerade machen   Skip name string
    adds r0, tos, #6
 80029f4:	1db0      	adds	r0, r6, #6
    bl skipstring
 80029f6:	f7ff ffd0 	bl	800299a <skipstring>

    movs r2, r0 @ Codestartadresse  Note Code start address
 80029fa:	0002      	movs	r2, r0
    movs r3, r1 @ Flags             Note Flags
 80029fc:	000b      	movs	r3, r1

    @ Prüfe, ob ich mich im Flash oder im Ram befinde.  Check if in RAM or in Flash.
    ldr r0, =Backlinkgrenze
 80029fe:	48b7      	ldr	r0, [pc, #732]	; (8002cdc <Code_706+0x10>)
    cmp r2, r0
 8002a00:	4282      	cmp	r2, r0
    bhs 3f @ Im Ram beim ersten Treffer ausspringen. Search is over in RAM with first hit.
 8002a02:	d204      	bcs.n	8002a0e <Code_641+0x56>
           @ Im Flash wird weitergesucht, ob es noch eine neuere Definition mit dem Namen gibt.
           @ If in Flash, whole dictionary has to be searched because of backwards link dictionary structure.

2:@ Weiterhangeln  Continue crawl.
  bl dictionarynext
 8002a04:	f7ff ffa6 	bl	8002954 <Code_636>
  popda r0
 8002a08:	0030      	movs	r0, r6
 8002a0a:	cf40      	ldmia	r7!, {r6}
  beq 1b
 8002a0c:	d0dd      	beq.n	80029ca <Code_641+0x12>


3:@ Durchgehangelt. Habe ich etwas gefunden ?  Finished. Found something ?
  @ Zieladresse gesetzt, also nicht Null bedeutet: Etwas gefunden !    Destination address <> 0 means successfully found.
  movs tos, r2  @ Zieladresse    oder 0, falls nichts gefunden            Address = 0 means: Not found. Check for that !
 8002a0e:	0016      	movs	r6, r2
  pushda r3     @ Zielflags      oder 0  --> @ ( 0 0 - Nicht gefunden )   Push Flags on Stack. ( Destination-Code Flags ) or ( 0 0 ).
 8002a10:	f847 6d04 	str.w	r6, [r7, #-4]!
 8002a14:	001e      	movs	r6, r3

  pop {r4, r5, pc}
 8002a16:	bd30      	pop	{r4, r5, pc}

08002a18 <find_not_found>:

@ -----------------------------------------------------------------------------
find_not_found: @ Internal use. Gives "not found." message if find is not successful.
@ -----------------------------------------------------------------------------
  push {lr}
 8002a18:	b500      	push	{lr}

  movs r1, tos  @ Save string address for later use
 8002a1a:	0031      	movs	r1, r6
  ldr r0, [psp]
 8002a1c:	6838      	ldr	r0, [r7, #0]

  push {r0, r1}
 8002a1e:	b403      	push	{r0, r1}
    bl find
 8002a20:	f7ff ffca 	bl	80029b8 <Code_641>
  pop {r0, r1}
 8002a24:	bc03      	pop	{r0, r1}

  ldr r2, [psp] @ Probe entry address
 8002a26:	683a      	ldr	r2, [r7, #0]
  cmp r2, #0
 8002a28:	2a00      	cmp	r2, #0
  bne 1f
 8002a2a:	d101      	bne.n	8002a30 <find_not_found+0x18>
    bl not_found_addr_r0_len_r1
 8002a2c:	f000 fd5c 	bl	80034e8 <not_found_addr_r0_len_r1>
1:pop {pc}
 8002a30:	bd00      	pop	{pc}

08002a32 <Dictionary_654>:
 8002a32:	2a90      	.short	0x2a90
 8002a34:	00000800 	.word	0x00000800
 8002a38:	756a6306 	.word	0x756a6306
 8002a3c:	706d      	.short	0x706d
 8002a3e:	2c          	.byte	0x2c
	...

08002a40 <Code_654>:
@------------------------------------------------------------------------------
  Wortbirne Flag_visible, "cjump," @ Fügt einen bedingten Sprung ein. Write a conditional jump into dictionary
cjumpgenerator: @ ( Adresse-der-Opcodelücke Sprungziel Bitmaske -- )
                @ ( Address-of-hole-for-jump Target Bitmask -- )
@------------------------------------------------------------------------------
  popda r2 @ Bitmaske    Bitmask for jump condition
 8002a40:	0032      	movs	r2, r6
 8002a42:	cf40      	ldmia	r7!, {r6}
  popda r1 @ Sprungziel  Target
 8002a44:	0031      	movs	r1, r6
 8002a46:	cf40      	ldmia	r7!, {r6}
  @ popda r0 @ Adresse-der-Opcodelücke - bleibt auf dem Stack  Hole to fill in opcode - keep that on stack

  @ Calculate jump offset.
  subs r3, r1, tos @ Differenz aus Lücken-Adresse und Sprungziel bilden  Calculate relative jump offset
 8002a48:	1b8b      	subs	r3, r1, r6
  subs r3, #4      @ Da der aktuelle Befehl noch läuft und es komischerweise andere Offsets beim ARM gibt.  Current instruction still running...
 8002a4a:	3b04      	subs	r3, #4
  @ also habe ich 7 freie Bits, das oberste muss mit dem restlichen Vorzeichen übereinstimmen.

  @ Short conditional B.. opcodes support 8 Bits jump range - one of that for sign.
  @ Check if opcodable range is enough to reach target:

  ldr r1, =0xFFFFFF01   @ 7 Bits frei
 8002a4c:	f06f 01fe 	mvn.w	r1, #254	; 0xfe
  ands r1, r3
 8002a50:	4019      	ands	r1, r3
  cmp r1, #0  @ Wenn dies Null ergibt, positive Distanz ok.
 8002a52:	2900      	cmp	r1, #0
  beq 1f
 8002a54:	d00e      	beq.n	8002a74 <jump_too_far+0x16>

  ldr r0, =0xFFFFFF00
 8002a56:	f06f 00ff 	mvn.w	r0, #255	; 0xff
  cmp r1, r0
 8002a5a:	4281      	cmp	r1, r0
  beq 1f  @ Wenn es gleich ist: Negative Distanz ok.
 8002a5c:	d00a      	beq.n	8002a74 <jump_too_far+0x16>

08002a5e <jump_too_far>:
    @ Ansonsten ist die Sprungdistanz einfach zu groß.
jump_too_far:
    Fehler_Quit "Jump too far"
 8002a5e:	f7fe ff55 	bl	800190c <dotgaensefuesschen>
 8002a62:	4a0d      	.short	0x4a0d
 8002a64:	20706d75 	.word	0x20706d75
 8002a68:	206f6f74 	.word	0x206f6f74
 8002a6c:	0a726166 	.word	0x0a726166
 8002a70:	f000 be6f 	b.w	8003752 <Code_926>
1:

  @ Generate proper jump opcode:
  asrs r3, #1 @ Schieben, da die Sprünge immer auf geraden Adressen beginnen und enden.  Shift one bit out as jumps always have an even offset
 8002a74:	105b      	asrs	r3, r3, #1
  movs r1, #0xFF @ Genau 8 Bits Sprungmaske.  Exactly 8 Bits available -
 8002a76:	21ff      	movs	r1, #255	; 0xff
  ands r3, r1    @ Ausschnitt anwenden          mask them to clip sign bits
 8002a78:	400b      	ands	r3, r1

  orrs r3, r2    @ Sprungbedingung und den Rest des Opcodes hinzufügen  Or together with jump condition
 8002a7a:	4313      	orrs	r3, r2
  movs r0, tos  @ Adresse-der-Opcodelücke in r0 holen                    Exchange registers
 8002a7c:	0030      	movs	r0, r6
  movs tos, r3  @ Sprungopcode stattdessen hineinlegen
 8002a7e:	001e      	movs	r6, r3

08002a80 <sprungbefehl_einfuegen>:

sprungbefehl_einfuegen: @ strh r3, [r0] over h, to handle Flash writes
  push {lr}
 8002a80:	b500      	push	{lr}
    @ Opcode auf dem Stack, Adresse in r0
    @ Dictionary-Pointer verbiegen:
      @ Dictionarypointer sichern
      ldr r2, =Dictionarypointer
 8002a82:	4a96      	ldr	r2, [pc, #600]	; (8002cdc <Code_706+0x10>)
      ldr r3, [r2] @ Alten Dictionarypointer auf jeden Fall bewahren
 8002a84:	6813      	ldr	r3, [r2, #0]

      str r0, [r2] @ Dictionarypointer umbiegen
 8002a86:	6010      	str	r0, [r2, #0]
      bl hkomma    @ Opcode einfügen
 8002a88:	f7ff fcbc 	bl	8002404 <Code_544>
      str r3, [r2] @ Dictionarypointer wieder zurücksetzen.
 8002a8c:	6013      	str	r3, [r2, #0]
  pop {pc}
 8002a8e:	bd00      	pop	{pc}

08002a90 <Dictionary_658>:
 8002a90:	08002aca 	.word	0x08002aca
 8002a94:	6a050000 	.word	0x6a050000
 8002a98:	2c706d75 	.word	0x2c706d75

08002a9c <Code_658>:
@------------------------------------------------------------------------------
  Wortbirne Flag_visible, "jump," @ Fügt einen unbedingten Sprung ein.  Write an unconditional jump into dictionary
jumpgenerator: @ ( Adresse-der-Opcodelücke Sprungziel -- )
               @ ( Address-of-hole-for-jump Target -- )
@------------------------------------------------------------------------------
  popda r1 @ Sprungziel  Target
 8002a9c:	0031      	movs	r1, r6
 8002a9e:	cf40      	ldmia	r7!, {r6}
  popda r0 @ Adresse-der-Opcodelücke  Hole to fill in opcode
 8002aa0:	0030      	movs	r0, r6
 8002aa2:	cf40      	ldmia	r7!, {r6}

  subs r3, r1, r0 @ Differenz aus Lücken-Adresse und Sprungziel bilden  Calculate relative jump offset
 8002aa4:	1a0b      	subs	r3, r1, r0
  subs r3, #4     @ Da der aktuelle Befehl noch läuft und es komischerweise andere Offsets beim ARM gibt.   Current instruction still running...
 8002aa6:	3b04      	subs	r3, #4
  @ also habe ich 10 freie Bits, das oberste muss mit dem restlichen Vorzeichen übereinstimmen.

  @ Short unconditional B opcodes support 11 Bits jump range - one of that for sign.
  @ Check if opcodable range is enough to reach target:

  ldr r1, =0xFFFFF801  @ 10 Bits frei
 8002aa8:	498f      	ldr	r1, [pc, #572]	; (8002ce8 <Code_706+0x1c>)
  ands r1, r3
 8002aaa:	4019      	ands	r1, r3
  cmp r1, #0  @ Wenn dies Null ergibt, positive Distanz ok.
 8002aac:	2900      	cmp	r1, #0
  beq 1f
 8002aae:	d002      	beq.n	8002ab6 <Code_658+0x1a>

  ldr r2, =0xFFFFF800
 8002ab0:	4a8e      	ldr	r2, [pc, #568]	; (8002cec <Code_706+0x20>)
  cmp r1, r2
 8002ab2:	4291      	cmp	r1, r2
  bne.n jump_too_far @ Wenn es gleich ist: Negative Distanz ok.
 8002ab4:	d1d3      	bne.n	8002a5e <jump_too_far>

1:

  asrs r3, #1 @ Schieben, da die Sprünge immer auf geraden Adressen beginnen und enden. Shift one bit out as jumps always have an even offset
 8002ab6:	105b      	asrs	r3, r3, #1
  ldr r2, =0x7FF @ Genau 11 Bits Sprungmaske.  Exactly 11 Bits available -
 8002ab8:	f240 72ff 	movw	r2, #2047	; 0x7ff
  ands r3, r2     @ Ausschnitt anwenden          mask them to clip sign bits
 8002abc:	4013      	ands	r3, r2

  .ifdef m0core
    ldr r2, =0xE000
    orrs r3, r2
  .else
    orrs r3, 0xE000  @ Rest des Opcodes hinzufügen  Or together with B opcode
 8002abe:	f453 4360 	orrs.w	r3, r3, #57344	; 0xe000
  .endif
  pushda r3
 8002ac2:	f847 6d04 	str.w	r6, [r7, #-4]!
 8002ac6:	001e      	movs	r6, r3
  b.n sprungbefehl_einfuegen @  Befehl einfügen. strh r3, [r0] over h, to handle Flash writes
 8002ac8:	e7da      	b.n	8002a80 <sprungbefehl_einfuegen>

08002aca <Dictionary_663>:
 8002aca:	2ae0      	.short	0x2ae0
 8002acc:	00000800 	.word	0x00000800
 8002ad0:	72656804 	.word	0x72656804
 8002ad4:	65          	.byte	0x65
	...

08002ad6 <Code_663>:

@ -----------------------------------------------------------------------------
  Wortbirne Flag_visible, "here" @ ( -- addr ) Gives Dictionarypointer
here: @ Gibt den Dictionarypointer zurück
@ -----------------------------------------------------------------------------
  pushdatos    @ Platz auf dem Datenstack schaffen
 8002ad6:	f847 6d04 	str.w	r6, [r7, #-4]!
  ldr tos, =Dictionarypointer
 8002ada:	4e80      	ldr	r6, [pc, #512]	; (8002cdc <Code_706+0x10>)
  ldr tos, [tos] @ Hole den Dictionarypointer
 8002adc:	6836      	ldr	r6, [r6, #0]
  bx lr
 8002ade:	4770      	bx	lr

08002ae0 <Dictionary_665>:
 8002ae0:	08002bdc 	.word	0x08002bdc
 8002ae4:	660d0000 	.word	0x660d0000
 8002ae8:	6873616c 	.word	0x6873616c
 8002aec:	2d726176 	.word	0x2d726176
 8002af0:	65726568 	.word	0x65726568

08002af4 <Code_665>:

@ -----------------------------------------------------------------------------
  Wortbirne Flag_visible, "flashvar-here" @ ( -- a-addr ) Gives RAM management pointer
flashvarhere:
@ -----------------------------------------------------------------------------
  pushdatos
 8002af4:	f847 6d04 	str.w	r6, [r7, #-4]!
  ldr tos, =VariablenPointer
 8002af8:	4e7d      	ldr	r6, [pc, #500]	; (8002cf0 <Code_706+0x24>)
  ldr tos, [tos]
 8002afa:	6836      	ldr	r6, [r6, #0]
  bx lr
 8002afc:	4770      	bx	lr

08002afe <nullprobekomma>:
@ Verschiedene Sprünge, die von den Kontrollstrukturen gebracht werden.
@ Some jump primitives that are useful for building control structures
@------------------------------------------------------------------------------

nullprobekomma: @ Write code for comparing TOS to zero.
  push {lr}
 8002afe:	b500      	push	{lr}
  pushdaconstw 0x2e00 @ cmp tos, #0
 8002b00:	f847 6d04 	str.w	r6, [r7, #-4]!
 8002b04:	f642 6600 	movw	r6, #11776	; 0x2e00
  bl hkomma
 8002b08:	f7ff fc7c 	bl	8002404 <Code_544>
  pushdaconstw 0xcf40 @ drop
 8002b0c:	f847 6d04 	str.w	r6, [r7, #-4]!
 8002b10:	f64c 7640 	movw	r6, #53056	; 0xcf40
  bl hkomma
 8002b14:	f7ff fc76 	bl	8002404 <Code_544>
  pop {pc}
 8002b18:	bd00      	pop	{pc}

08002b1a <branch_r>:

branch_r:     @ ( -- Sprungziel )  Einleitung bedingter und unbedingter Rückwärtssprung
    b.n here  @ ( -- Target )      Intro of conditional and unconditional backwards jump
 8002b1a:	e7dc      	b.n	8002ad6 <Code_663>

08002b1c <r_branch_jne>:

r_branch_jne: @ ( Sprungziel -- )  Abschluss besonderer bedingter Rückwärtssprung für loop
  push {lr}   @ ( Target -- )      Finalisation of special conditional backwards jump for loop
 8002b1c:	b500      	push	{lr}
  bl branch_v @ ( pushda Dictionaryinter und 2 allot )
 8002b1e:	f000 f83a 	bl	8002b96 <branch_v>
  swap
 8002b22:	6839      	ldr	r1, [r7, #0]
 8002b24:	603e      	str	r6, [r7, #0]
 8002b26:	460e      	mov	r6, r1
  pushdaconstw 0xD100 @ Opcode für den bedingten Sprung bne  Opcode for conditional jump BNE
 8002b28:	f847 6d04 	str.w	r6, [r7, #-4]!
 8002b2c:	f24d 1600 	movw	r6, #53504	; 0xd100
  bl cjumpgenerator
 8002b30:	f7ff ff86 	bl	8002a40 <Code_654>
  pop {pc}
 8002b34:	bd00      	pop	{pc}

08002b36 <r_branch_jvc>:

r_branch_jvc: @ ( Sprungziel -- )  Abschluss besonderer bedingter Rückwärtssprung bei Überlauf für +loop
  push {lr}   @ ( Target -- )      Finalisation of conditional backwards jump on overflow for +loop
 8002b36:	b500      	push	{lr}
  bl branch_v @ ( pushda Dictionaryinter und 2 allot )
 8002b38:	f000 f82d 	bl	8002b96 <branch_v>
  swap
 8002b3c:	6839      	ldr	r1, [r7, #0]
 8002b3e:	603e      	str	r6, [r7, #0]
 8002b40:	460e      	mov	r6, r1
  pushdaconstw 0xD700 @ Opcode für den bedingten Sprung bvc  Opcode for conditional jump BVC, used for +loop
 8002b42:	f847 6d04 	str.w	r6, [r7, #-4]!
 8002b46:	f24d 7600 	movw	r6, #55040	; 0xd700
  bl cjumpgenerator
 8002b4a:	f7ff ff79 	bl	8002a40 <Code_654>
  pop {pc}
 8002b4e:	bd00      	pop	{pc}

08002b50 <r_nullbranch>:

r_nullbranch: @ ( Sprungziel -- )  Abschluss bedingter Rückwärtssprung
  push {lr}   @ ( Target -- )      Finalisation of conditional backwards jump
 8002b50:	b500      	push	{lr}
  bl nullprobekomma
 8002b52:	f7ff ffd4 	bl	8002afe <nullprobekomma>
  bl branch_v @ ( pushda Dictionaryinter und 2 allot )
 8002b56:	f000 f81e 	bl	8002b96 <branch_v>
  swap
 8002b5a:	6839      	ldr	r1, [r7, #0]
 8002b5c:	603e      	str	r6, [r7, #0]
 8002b5e:	460e      	mov	r6, r1
  pushdaconstw 0xD000 @ Opcode für den bedingten Sprung beq  Opcode for conditional jump BEQ
 8002b60:	f847 6d04 	str.w	r6, [r7, #-4]!
 8002b64:	f24d 0600 	movw	r6, #53248	; 0xd000
  bl cjumpgenerator
 8002b68:	f7ff ff6a 	bl	8002a40 <Code_654>
  pop {pc}
 8002b6c:	bd00      	pop	{pc}

08002b6e <r_branch>:

r_branch:     @ ( Sprungziel -- )  Abschluss unbedingter Rückwärtssprung
  push {lr}   @ ( Target -- )      Finalisation of unconditional backwards jump
 8002b6e:	b500      	push	{lr}
  bl branch_v @ ( pushda Dictionaryinter und 2 allot )
 8002b70:	f000 f811 	bl	8002b96 <branch_v>
  swap
 8002b74:	6839      	ldr	r1, [r7, #0]
 8002b76:	603e      	str	r6, [r7, #0]
 8002b78:	460e      	mov	r6, r1
  bl jumpgenerator
 8002b7a:	f7ff ff8f 	bl	8002a9c <Code_658>
  pop {pc}
 8002b7e:	bd00      	pop	{pc}

08002b80 <nullbranch_v>:


nullbranch_v: @ ( -- Adresse-für-Sprungbefehl )  Einleitung bedingter Vorwärtssprung
  push {lr}   @ ( -- Address-for-Opcode )        Intro of conditional forward jump
 8002b80:	b500      	push	{lr}
  bl nullprobekomma
 8002b82:	f7ff ffbc 	bl	8002afe <nullprobekomma>
  bl here
 8002b86:	f7ff ffa6 	bl	8002ad6 <Code_663>
  pushdaconst 2 @ Platz für die Opcodelücke schaffen  Allot space for filling in Opcode later
 8002b8a:	f847 6d04 	str.w	r6, [r7, #-4]!
 8002b8e:	2602      	movs	r6, #2
  bl allot
 8002b90:	f7ff fca3 	bl	80024da <Code_564>
  pop {pc}
 8002b94:	bd00      	pop	{pc}

08002b96 <branch_v>:

branch_v:     @ ( -- Adresse-für-Sprungbefehl )  Einleitung unbedingter Vorwärtssprung
  push {lr}   @ ( -- Address-for-Opcode )        Intro of unconditional forward jump
 8002b96:	b500      	push	{lr}
  bl here
 8002b98:	f7ff ff9d 	bl	8002ad6 <Code_663>
  pushdaconst 2 @ Platz für die Opcodelücke schaffen  Allot space for filling in Opcode later
 8002b9c:	f847 6d04 	str.w	r6, [r7, #-4]!
 8002ba0:	2602      	movs	r6, #2
  bl allot
 8002ba2:	f7ff fc9a 	bl	80024da <Code_564>
  pop {pc}
 8002ba6:	bd00      	pop	{pc}

08002ba8 <v_branch>:


v_branch:      @ ( Adresse-für-Sprungbefehl -- ) Abschluss unbedingter Vorwärtssprung
  push {lr}    @ ( Address-for-Opcode -- )       Finalisation of unconditional forward jump
 8002ba8:	b500      	push	{lr}
  bl here @ Sprungziel auf den Stack legen  Put target for jump on datastack
 8002baa:	f7ff ff94 	bl	8002ad6 <Code_663>
  bl jumpgenerator
 8002bae:	f7ff ff75 	bl	8002a9c <Code_658>
  pop {pc}
 8002bb2:	bd00      	pop	{pc}

08002bb4 <v_nullbranch>:

v_nullbranch:  @ ( Adresse-für-Sprungbefehl -- ) Abschluss bedingter Vorwärtssprung
  push {lr}    @ ( Address-for-Opcode -- )       Finalisation of conditional forward jump
 8002bb4:	b500      	push	{lr}
  bl here @ Sprungziel auf den Stack legen  Put target for jump on datastack
 8002bb6:	f7ff ff8e 	bl	8002ad6 <Code_663>
  pushdaconstw 0xD000 @ Opcode für den bedingten Sprung beq  Opcode for conditional jump BEQ
 8002bba:	f847 6d04 	str.w	r6, [r7, #-4]!
 8002bbe:	f24d 0600 	movw	r6, #53248	; 0xd000
  bl cjumpgenerator
 8002bc2:	f7ff ff3d 	bl	8002a40 <Code_654>
  pop {pc}
 8002bc6:	bd00      	pop	{pc}

08002bc8 <v_casebranch>:

v_casebranch:  @ ( Adresse-für-Sprungbefehl -- ) Abschluss besonderer bedingter Vorwärtssprung für case
  push {lr}    @ ( Address-for-Opcode -- )       Finalisation of special conditional forward jump for case
 8002bc8:	b500      	push	{lr}
  bl here @ Sprungziel auf den Stack legen  Put target for jump on datastack
 8002bca:	f7ff ff84 	bl	8002ad6 <Code_663>
  pushdaconstw 0xD100 @ Opcode für den bedingten Sprung bne  Opcode for conditional jump BNE
 8002bce:	f847 6d04 	str.w	r6, [r7, #-4]!
 8002bd2:	f24d 1600 	movw	r6, #53504	; 0xd100
  bl cjumpgenerator
 8002bd6:	f7ff ff33 	bl	8002a40 <Code_654>
  pop {pc}
 8002bda:	bd00      	pop	{pc}

08002bdc <Dictionary_689>:
 8002bdc:	08002c18 	.word	0x08002c18
 8002be0:	74040030 	.word	0x74040030
 8002be4:	6568      	.short	0x6568
 8002be6:	6e          	.byte	0x6e
	...

08002be8 <Code_689>:
  Wortbirne Flag_immediate_compileonly, "then"
  @ ( Adresse-für-Sprung 2 | Adresse-für-Sprung 5 -- )
  @ ( Address-for-Jump 2   | Address-for-Jump 5 --)
struktur_then:
@------------------------------------------------------------------------------
  cmp tos, #5 @ Unbedingten Vorwärtssprung einfügen
 8002be8:	2e05      	cmp	r6, #5
  bne 1f
 8002bea:	d101      	bne.n	8002bf0 <Code_689+0x8>
    drop @ ( Sprunglücke )
 8002bec:	cf40      	ldmia	r7!, {r6}
    b.n v_branch @ Abschluss unbedingter Vorwärtssprung  Fill in unconditional forward jummp
 8002bee:	e7db      	b.n	8002ba8 <v_branch>

1:cmp tos, #2 @ Bedingten Vorwärtssprung einfügen
 8002bf0:	2e02      	cmp	r6, #2
  bne.n strukturen_passen_nicht
 8002bf2:	d101      	bne.n	8002bf8 <strukturen_passen_nicht>
    drop @ ( Sprunglücke )
 8002bf4:	cf40      	ldmia	r7!, {r6}
    b.n v_nullbranch @ Abschluss bedingter Vorwärtssprung v_nullbranch  Fill in conditional forward jump
 8002bf6:	e7dd      	b.n	8002bb4 <v_nullbranch>

08002bf8 <strukturen_passen_nicht>:

strukturen_passen_nicht:
  Fehler_Quit "Structures don't match"
 8002bf8:	f7fe fe88 	bl	800190c <dotgaensefuesschen>
 8002bfc:	72745317 	.word	0x72745317
 8002c00:	75746375 	.word	0x75746375
 8002c04:	20736572 	.word	0x20736572
 8002c08:	276e6f64 	.word	0x276e6f64
 8002c0c:	616d2074 	.word	0x616d2074
 8002c10:	0a686374 	.word	0x0a686374
 8002c14:	f000 bd9d 	b.w	8003752 <Code_926>

08002c18 <Dictionary_693>:
 8002c18:	08002c34 	.word	0x08002c34
 8002c1c:	65040030 	.word	0x65040030
 8002c20:	736c      	.short	0x736c
 8002c22:	65          	.byte	0x65
	...

08002c24 <Code_693>:

@------------------------------------------------------------------------------
  Wortbirne Flag_immediate_compileonly, "else"
@------------------------------------------------------------------------------
  push {lr}
 8002c24:	b500      	push	{lr}
  bl struktur_ahead
 8002c26:	f000 f817 	bl	8002c58 <Code_697>
  bl dswap
 8002c2a:	f7fd fad7 	bl	80001dc <Code_25>
  bl struktur_then
 8002c2e:	f7ff ffdb 	bl	8002be8 <Code_689>
  pop {pc}
 8002c32:	bd00      	pop	{pc}

08002c34 <Dictionary_694>:
 8002c34:	08002c4c 	.word	0x08002c4c
 8002c38:	69020030 	.word	0x69020030
 8002c3c:	66          	.byte	0x66
	...

08002c3e <Code_694>:

@------------------------------------------------------------------------------
  Wortbirne Flag_immediate_compileonly, "if"
struktur_if: @ ( -- Adresse-für-Sprung 2 )   ( -- Address-for-Jump 2 )
@------------------------------------------------------------------------------
  push {lr}
 8002c3e:	b500      	push	{lr}
  bl nullbranch_v
 8002c40:	f7ff ff9e 	bl	8002b80 <nullbranch_v>
  pushdaconst 2           @ Strukturerkennung  Structure matching
 8002c44:	f847 6d04 	str.w	r6, [r7, #-4]!
 8002c48:	2602      	movs	r6, #2
  pop {pc}
 8002c4a:	bd00      	pop	{pc}

08002c4c <Dictionary_697>:
 8002c4c:	08002c66 	.word	0x08002c66
 8002c50:	61050030 	.word	0x61050030
 8002c54:	64616568 	.word	0x64616568

08002c58 <Code_697>:

@------------------------------------------------------------------------------
  Wortbirne Flag_immediate_compileonly, "ahead"
struktur_ahead: @ ( -- Adresse-für-Sprung 5 )   ( -- Address-for-Jump 5 )
@------------------------------------------------------------------------------
  push {lr}
 8002c58:	b500      	push	{lr}
  bl branch_v
 8002c5a:	f7ff ff9c 	bl	8002b96 <branch_v>
  pushdaconst 5           @ Strukturerkennung  Structure matching
 8002c5e:	f847 6d04 	str.w	r6, [r7, #-4]!
 8002c62:	2605      	movs	r6, #5
  pop {pc}
 8002c64:	bd00      	pop	{pc}

08002c66 <Dictionary_700>:
 8002c66:	2c80      	.short	0x2c80
 8002c68:	00300800 	.word	0x00300800
 8002c6c:	70657206 	.word	0x70657206
 8002c70:	6165      	.short	0x6165
 8002c72:	74          	.byte	0x74
	...

08002c74 <Code_700>:

@------------------------------------------------------------------------------
  Wortbirne Flag_immediate_compileonly, "repeat"
@------------------------------------------------------------------------------
  push {lr}
 8002c74:	b500      	push	{lr}
  bl struktur_again
 8002c76:	f000 f81f 	bl	8002cb8 <Code_704>
  bl struktur_then
 8002c7a:	f7ff ffb5 	bl	8002be8 <Code_689>
  pop {pc}
 8002c7e:	bd00      	pop	{pc}

08002c80 <Dictionary_701>:
 8002c80:	08002c98 	.word	0x08002c98
 8002c84:	77050030 	.word	0x77050030
 8002c88:	656c6968 	.word	0x656c6968

08002c8c <Code_701>:

@------------------------------------------------------------------------------
  Wortbirne Flag_immediate_compileonly, "while"
@------------------------------------------------------------------------------
  push {lr}
 8002c8c:	b500      	push	{lr}
  bl struktur_if
 8002c8e:	f7ff ffd6 	bl	8002c3e <Code_694>
  bl dswap
 8002c92:	f7fd faa3 	bl	80001dc <Code_25>
  pop {pc}
 8002c96:	bd00      	pop	{pc}

08002c98 <Dictionary_702>:
 8002c98:	08002cac 	.word	0x08002cac
 8002c9c:	75050030 	.word	0x75050030
 8002ca0:	6c69746e 	.word	0x6c69746e

08002ca4 <Code_702>:

@------------------------------------------------------------------------------
  Wortbirne Flag_immediate_compileonly, "until"  @ Bedingte Schleife
  @ ( Sprungziel 1 -- )                          @ Conditional loop
@------------------------------------------------------------------------------
  cmp tos, #1
 8002ca4:	2e01      	cmp	r6, #1
  bne.n strukturen_passen_nicht
 8002ca6:	d1a7      	bne.n	8002bf8 <strukturen_passen_nicht>
  drop
 8002ca8:	cf40      	ldmia	r7!, {r6}
  b.n r_nullbranch  @ Write conditional jump
 8002caa:	e751      	b.n	8002b50 <r_nullbranch>

08002cac <Dictionary_704>:
 8002cac:	08002cc0 	.word	0x08002cc0
 8002cb0:	61050030 	.word	0x61050030
 8002cb4:	6e696167 	.word	0x6e696167

08002cb8 <Code_704>:

@------------------------------------------------------------------------------
  Wortbirne Flag_immediate_compileonly, "again"  @ Endlosschleife
struktur_again:  @ ( Sprungziel 1 -- )           @ Unconditional loop
@------------------------------------------------------------------------------
  cmp tos, #1
 8002cb8:	2e01      	cmp	r6, #1
  bne.n strukturen_passen_nicht
 8002cba:	d19d      	bne.n	8002bf8 <strukturen_passen_nicht>
  drop
 8002cbc:	cf40      	ldmia	r7!, {r6}
  b.n r_branch      @ Write unconditional jump
 8002cbe:	e756      	b.n	8002b6e <r_branch>

08002cc0 <Dictionary_706>:
 8002cc0:	08002cf4 	.word	0x08002cf4
 8002cc4:	62050030 	.word	0x62050030
 8002cc8:	6e696765 	.word	0x6e696765

08002ccc <Code_706>:

@------------------------------------------------------------------------------
  Wortbirne Flag_immediate_compileonly, "begin"
  @ ( -- Sprungziel 1 )  ( -- Jump-destination 1 )
@------------------------------------------------------------------------------
  push {lr}
 8002ccc:	b500      	push	{lr}
  bl branch_r
 8002cce:	f7ff ff24 	bl	8002b1a <branch_r>
  pushdaconst 1  @ Strukturerkennung  Structure matching
 8002cd2:	f847 6d04 	str.w	r6, [r7, #-4]!
 8002cd6:	2601      	movs	r6, #1
  pop {pc}
 8002cd8:	bd00      	pop	{pc}
 8002cda:	0000      	.short	0x0000
  ldr r0, =Dictionarypointer
 8002cdc:	20001000 	.word	0x20001000
  ldr tos, =CoreDictionaryAnfang @ Befinde mich im Flash mit Backlinks. Muss beim CoreDictionary anfangen:        In Flash: Start with core dictionary.
 8002ce0:	08000180 	.word	0x08000180
1:ldr tos, =Fadenende
 8002ce4:	20001004 	.word	0x20001004
  ldr r1, =0xFFFFF801  @ 10 Bits frei
 8002ce8:	fffff801 	.word	0xfffff801
  ldr r2, =0xFFFFF800
 8002cec:	fffff800 	.word	0xfffff800
  ldr tos, =VariablenPointer
 8002cf0:	20001024 	.word	0x20001024

08002cf4 <Dictionary_709>:
 8002cf4:	08002d04 	.word	0x08002d04
 8002cf8:	6b010020 	.word	0x6b010020

08002cfc <Code_709>:

@------------------------------------------------------------------------------
  Wortbirne Flag_inline, "k" @ Kopiert den drittobersten Schleifenindex  Third loop index
@------------------------------------------------------------------------------
  @ Returnstack ( Limit Index Limit Index )
  pushdatos
 8002cfc:	f847 6d04 	str.w	r6, [r7, #-4]!
  ldr tos, [sp, #8]
 8002d00:	9e02      	ldr	r6, [sp, #8]
  bx lr
 8002d02:	4770      	bx	lr

08002d04 <Dictionary_711>:
 8002d04:	08002d14 	.word	0x08002d14
 8002d08:	6a010020 	.word	0x6a010020

08002d0c <Code_711>:

@------------------------------------------------------------------------------
  Wortbirne Flag_inline, "j" @ Kopiert den zweitobersten Schleifenindex  Second loop index
@------------------------------------------------------------------------------
  @ Returnstack ( Limit Index )
  pushdatos
 8002d0c:	f847 6d04 	str.w	r6, [r7, #-4]!
  ldr tos, [sp]
 8002d10:	9e00      	ldr	r6, [sp, #0]
  bx lr
 8002d12:	4770      	bx	lr

08002d14 <Dictionary_713>:
 8002d14:	08002d24 	.word	0x08002d24
 8002d18:	69010020 	.word	0x69010020

08002d1c <Code_713>:

@------------------------------------------------------------------------------
  Wortbirne Flag_inline, "i" @ Kopiert den obersten Schleifenindex       Innermost loop index
@------------------------------------------------------------------------------
  @ Returnstack ( )
  pushda rloopindex @ Ist immer im Register.
 8002d1c:	f847 6d04 	str.w	r6, [r7, #-4]!
 8002d20:	0026      	movs	r6, r4
  bx lr
 8002d22:	4770      	bx	lr

08002d24 <Dictionary_716>:
 8002d24:	08002d62 	.word	0x08002d62
 8002d28:	6c050030 	.word	0x6c050030
 8002d2c:	65766165 	.word	0x65766165

08002d30 <Code_716>:
  @ Alle Stackelemente weiterschieben, Sprungadresse einfügen, Zähler erhöhen, Lücke anlegen.

  @ LeavePointer points to the location which counts the number of jumps that have to be inserted later.
  @ Leave moves all elements of stack further, inserts address for jump opcode, increments counter and allots space.

  push {lr}
 8002d30:	b500      	push	{lr}
  @ Muss eine Lücke im Stack schaffen, alles NACH der Position des leavepointers muss weiterrücken.

  @ Make a hole in datastack at the lcoation the leavepointer points to for inserting the new location a jump opcode has to be patched in later
  @ by moving all other elements further one place in datastack.

  ldr r0, =leavepointer
 8002d32:	48d8      	ldr	r0, [pc, #864]	; (8003094 <Code_799+0x46>)
  ldr r1, [r0] @ Die Stelle, wohin er zeigt = Inhalt der Variable Leavepointer
 8002d34:	6801      	ldr	r1, [r0, #0]

  movs r3, psp @ Alter Stackpointer  Old stackpointer
 8002d36:	003b      	movs	r3, r7
  subs psp, #4 @ Ein Element mehr auf dem Stack  One more element on stack after this
 8002d38:	3f04      	subs	r7, #4

1:@ Lückenschiebeschleife
  ldr r2, [r3]  @ mov @r10, -2(r10)
 8002d3a:	681a      	ldr	r2, [r3, #0]
  subs r3, #4 
 8002d3c:	3b04      	subs	r3, #4
  str r2, [r3]
 8002d3e:	601a      	str	r2, [r3, #0]
@  adds r3, #4

  adds r3, #8
 8002d40:	3308      	adds	r3, #8
  cmp r3, r1 @ r1 enthält die Stelle am Ende
 8002d42:	428b      	cmp	r3, r1
  bne 1b 
 8002d44:	d1f9      	bne.n	8002d3a <Code_716+0xa>

  @ Muss jetzt die Stelle auf dem Stack, wo die Sprünge gezählt werden um Eins erhöhen
  @ und an der freigewordenen Stelle die Lückenadresse einfügen.
  @ Increment the number of jumps to be filled in later

  push {r0, r1}
 8002d46:	b403      	push	{r0, r1}
  bl branch_v
 8002d48:	f7ff ff25 	bl	8002b96 <branch_v>
  pop {r0, r1}
 8002d4c:	bc03      	pop	{r0, r1}

  popda r3 @ Die Lückenadresse
 8002d4e:	0033      	movs	r3, r6
 8002d50:	cf40      	ldmia	r7!, {r6}

  @ Insert the address of location for jump opcode in datastack
  subs r1, #4  @ Weiter in Richtung Spitze des Stacks wandern
 8002d52:	3904      	subs	r1, #4
  str r3, [r1] @ Lückenadresse einfügen
 8002d54:	600b      	str	r3, [r1, #0]

  @ Den neuen Leavepointer vermerken  Update leavepointer
  str r1, [r0]
 8002d56:	6001      	str	r1, [r0, #0]

  @ Increment counter for number of jumps to be generated later
  subs r1, #4   @ Weiter in Richtung Spitze des Stacks wandern
 8002d58:	3904      	subs	r1, #4
  ldr r2, [r1]  @ Sprungzähler aus dem Stack kopieren
 8002d5a:	680a      	ldr	r2, [r1, #0]

  adds r2, #1   @ Den Sprungzähler um eins erhöhen
 8002d5c:	3201      	adds	r2, #1
  str r2, [r1]  @ und zurückschreiben.
 8002d5e:	600a      	str	r2, [r1, #0]

  pop {pc}
 8002d60:	bd00      	pop	{pc}

08002d62 <Dictionary_718>:
 8002d62:	2d74      	.short	0x2d74
 8002d64:	00200800 	.word	0x00200800
 8002d68:	6c6e7506 	.word	0x6c6e7506
 8002d6c:	6f6f      	.short	0x6f6f
 8002d6e:	70          	.byte	0x70
	...

08002d70 <Code_718>:

@------------------------------------------------------------------------------
  Wortbirne Flag_inline, "unloop" @ Wirft die Schleifenstruktur vom Returnstack
unloop:                           @ Remove loop structure from returnstack
@------------------------------------------------------------------------------
  pop {rloopindex, rlooplimit}  @ Hole die alten Schleifenwerte zurück  Fetch back old loop values
 8002d70:	bc30      	pop	{r4, r5}
  bx lr
 8002d72:	4770      	bx	lr

08002d74 <Dictionary_719>:
 8002d74:	08002dac 	.word	0x08002dac
 8002d78:	2b050030 	.word	0x2b050030
 8002d7c:	706f6f6c 	.word	0x706f6f6c

08002d80 <Code_719>:
  @ ( AlterLeavePointer ... ZahlderAdressen Sprungziel 3 -- )

  @ Usage: ( Increment -- ).
  @ ( OldLeavePointer ... NumberofJumps Target 3 -- )
  @------------------------------------------------------------------------------
  cmp tos, #3 @ Structure matching
 8002d80:	2e03      	cmp	r6, #3
  beq 1f
 8002d82:	d000      	beq.n	8002d86 <Code_719+0x6>
  b.n strukturen_passen_nicht
 8002d84:	e738      	b.n	8002bf8 <strukturen_passen_nicht>
1:drop
 8002d86:	cf40      	ldmia	r7!, {r6}

  push {lr} 
 8002d88:	b500      	push	{lr}
  pushdatos
 8002d8a:	f847 6d04 	str.w	r6, [r7, #-4]!
  ldr tos, =struktur_plusloop
 8002d8e:	4ec2      	ldr	r6, [pc, #776]	; (8003098 <Code_799+0x4a>)
  bl inlinekomma  @ Inline the code needed for +loop
 8002d90:	f7ff f926 	bl	8001fe0 <Code_469>
  bl r_branch_jvc @ +loop entscheidet mit dem arithmetrischen Überlauf
 8002d94:	f7ff fecf 	bl	8002b36 <r_branch_jvc>
                  @ Insert a jump on overflow for +loop logic

  b.n loop_intern
 8002d98:	e01a      	b.n	8002dd0 <loop_intern>

08002d9a <struktur_plusloop>:
  bx lr

  .else

struktur_plusloop:
  adds rloopindex, #0x80000000  @ Index + $8000
 8002d9a:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
  subs rloopindex, rlooplimit   @ Index + $8000 - Limit
 8002d9e:	1b64      	subs	r4, r4, r5

  adds rloopindex, tos         @ Index + $8000 - Limit + Schritt  Hier werden die Flags gesetzt. Überlauf bedeutet: Schleife beenden.  
 8002da0:	19a4      	adds	r4, r4, r6
                               @ Flags are set here, Overflow means: Terminate loop.
  drop                         @ Runterwerfen, dabei Flags nicht verändern  Drop, but don't change Flags anymore.
 8002da2:	cf40      	ldmia	r7!, {r6}

  add rloopindex, rlooplimit   @ Index + $8000 + Schritt   Flags nicht verändern !
 8002da4:	442c      	add	r4, r5
  sub rloopindex, #0x80000000  @ Index + Schritt           Flags nicht verändern !
 8002da6:	f1a4 4400 	sub.w	r4, r4, #2147483648	; 0x80000000
  bx lr
 8002daa:	4770      	bx	lr

08002dac <Dictionary_723>:
 8002dac:	08002dee 	.word	0x08002dee
 8002db0:	6c040030 	.word	0x6c040030
 8002db4:	6f6f      	.short	0x6f6f
 8002db6:	70          	.byte	0x70
	...

08002db8 <Code_723>:
  @ ( AlterLeavePointer ... ZahlderAdressen Sprungziel 3 -- )

  @ Usage: ( -- ).
  @ ( OldLeavePointer ... NumberofJumps Target 3 -- )
@------------------------------------------------------------------------------
  cmp tos, #3 @ Structure matching
 8002db8:	2e03      	cmp	r6, #3
  beq 1f
 8002dba:	d000      	beq.n	8002dbe <Code_723+0x6>
  b.n strukturen_passen_nicht
 8002dbc:	e71c      	b.n	8002bf8 <strukturen_passen_nicht>
1:drop
 8002dbe:	cf40      	ldmia	r7!, {r6}

  push {lr} 
 8002dc0:	b500      	push	{lr}
  pushdatos
 8002dc2:	f847 6d04 	str.w	r6, [r7, #-4]!
  ldr tos, =struktur_loop
 8002dc6:	4eb5      	ldr	r6, [pc, #724]	; (800309c <Code_799+0x4e>)
  bl inlinekomma  @ Inline the code needed for +loop
 8002dc8:	f7ff f90a 	bl	8001fe0 <Code_469>
  bl r_branch_jne @ Jump if Limit and Index are not equal this time
 8002dcc:	f7ff fea6 	bl	8002b1c <r_branch_jne>

08002dd0 <loop_intern>:

loop_intern:
  bl spruenge_einpflegen @ Die gleiche Routine ist in Endcase am Werk
 8002dd0:	f000 f919 	bl	8003006 <spruenge_einpflegen>
                         @ Code to fill in jump opcodes is the same as in endcase.
  ldr r0, =leavepointer
 8002dd4:	48af      	ldr	r0, [pc, #700]	; (8003094 <Code_799+0x46>)
  popda r1               @ Zurückholen für die nächste Schleifenebene
 8002dd6:	0031      	movs	r1, r6
 8002dd8:	cf40      	ldmia	r7!, {r6}
  str r1, [r0]           @ Fetch back old leavepointer for next loop layer.
 8002dda:	6001      	str	r1, [r0, #0]

  pushdatos
 8002ddc:	f847 6d04 	str.w	r6, [r7, #-4]!
  ldr tos, =unloop      @ Inline unloop code
 8002de0:	4eaf      	ldr	r6, [pc, #700]	; (80030a0 <Code_799+0x52>)
  bl inlinekomma
 8002de2:	f7ff f8fd 	bl	8001fe0 <Code_469>
  pop {pc}
 8002de6:	bd00      	pop	{pc}

08002de8 <struktur_loop>:

struktur_loop:
  adds rloopindex, #1          @ Index erhöhen           Increment Index
 8002de8:	3401      	adds	r4, #1
  cmp rloopindex, rlooplimit   @ Mit Limit vergleichen   Compare with Limit
 8002dea:	42ac      	cmp	r4, r5
  bx lr @ Ende für inline,   End marker for inline,
 8002dec:	4770      	bx	lr

08002dee <Dictionary_728>:
 8002dee:	2e36      	.short	0x2e36
 8002df0:	00780800 	.word	0x00780800
 8002df4:	6402      	.short	0x6402
 8002df6:	6f          	.byte	0x6f
	...

08002df8 <Code_728>:
  @ ( -- AlterLeavePointer 0 Sprungziel 3 )

  @ Usage: ( Limit Index -- ).
  @ ( -- OldLeavePointer 0 Target 3 )
@------------------------------------------------------------------------------
  push {lr}
 8002df8:	b500      	push	{lr}

  pushdatos
 8002dfa:	f847 6d04 	str.w	r6, [r7, #-4]!
  ldr tos, =struktur_do  @ Inline opcodes for do
 8002dfe:	4ea9      	ldr	r6, [pc, #676]	; (80030a4 <Code_799+0x56>)
  bl inlinekomma
 8002e00:	f7ff f8ee 	bl	8001fe0 <Code_469>

08002e04 <do_rest_der_schleifenstruktur>:

do_rest_der_schleifenstruktur:
  ldr r0, =leavepointer
 8002e04:	48a3      	ldr	r0, [pc, #652]	; (8003094 <Code_799+0x46>)
  ldr r1, [r0]
 8002e06:	6801      	ldr	r1, [r0, #0]
  pushda r1     @ Alten Leavepointer sichern  Save old leavepointer
 8002e08:	f847 6d04 	str.w	r6, [r7, #-4]!
 8002e0c:	000e      	movs	r6, r1
  pushdaconst 0
 8002e0e:	f847 6d04 	str.w	r6, [r7, #-4]!
 8002e12:	2600      	movs	r6, #0
  str psp, [r0] @ Aktuelle Position im Stack sichern  Save current position on datastack
 8002e14:	6007      	str	r7, [r0, #0]

  bl branch_r    @ Schleifen-Rücksprung vorbereiten  Prepare loop jump back to the beginning
 8002e16:	f7ff fe80 	bl	8002b1a <branch_r>
  pushdaconst 3  @ Strukturerkennung  Structure matching
 8002e1a:	f847 6d04 	str.w	r6, [r7, #-4]!
 8002e1e:	2603      	movs	r6, #3
  pop {pc}
 8002e20:	bd00      	pop	{pc}

@------------------------------------------------------------------------------
  @ Opcodable optimisations enter here. At least one folding constant available.
  push {lr}
 8002e22:	b500      	push	{lr}
  bl gemeinsame_schleifenoptimierung
 8002e24:	f000 f82f 	bl	8002e86 <gemeinsame_schleifenoptimierung>
  b.n do_rest_der_schleifenstruktur
 8002e28:	e7ec      	b.n	8002e04 <do_rest_der_schleifenstruktur>

08002e2a <struktur_do>:

struktur_do:
  push {rloopindex, rlooplimit}
 8002e2a:	b430      	push	{r4, r5}
  popda rloopindex
 8002e2c:	0034      	movs	r4, r6
 8002e2e:	cf40      	ldmia	r7!, {r6}
  popda rlooplimit
 8002e30:	0035      	movs	r5, r6
 8002e32:	cf40      	ldmia	r7!, {r6}
  bx lr @ Ende für inline,  End for inline,
 8002e34:	4770      	bx	lr

08002e36 <Dictionary_738>:
 8002e36:	2ed0      	.short	0x2ed0
 8002e38:	00780800 	.word	0x00780800
 8002e3c:	6f643f03 	.word	0x6f643f03

08002e40 <Code_738>:

  @ Usage: ( Limit Index -- ).
  @ ( -- OldLeavePointer Forward-Jump-Target 1 Target 3 )
  @ This loop terminates immediately if Limit=Index.
@------------------------------------------------------------------------------
  push {lr}
 8002e40:	b500      	push	{lr}
  pushdatos
 8002e42:	f847 6d04 	str.w	r6, [r7, #-4]!
  ldr tos, =struktur_do  @ Inline opcodes for do
 8002e46:	4e97      	ldr	r6, [pc, #604]	; (80030a4 <Code_799+0x56>)
  bl inlinekomma
 8002e48:	f7ff f8ca 	bl	8001fe0 <Code_469>

08002e4c <qdo_rest_der_schleifenstruktur>:

qdo_rest_der_schleifenstruktur:
  pushdaconstw 0x42AC @ cmp rloopindex, rlooplimit @ Vergleiche die beiden Schleifenparameter  Compare both loop registers
 8002e4c:	f847 6d04 	str.w	r6, [r7, #-4]!
 8002e50:	f244 26ac 	movw	r6, #17068	; 0x42ac
  bl hkomma
 8002e54:	f7ff fad6 	bl	8002404 <Code_544>

  ldr r0, =leavepointer
 8002e58:	488e      	ldr	r0, [pc, #568]	; (8003094 <Code_799+0x46>)
  ldr r1, [r0]
 8002e5a:	6801      	ldr	r1, [r0, #0]
  pushda r1     @ Alten Leavepointer sichern  Save old leavepointer
 8002e5c:	f847 6d04 	str.w	r6, [r7, #-4]!
 8002e60:	000e      	movs	r6, r1

  @ An diese Stelle nun die Vorwärtssprunglücke einfügen:
  @ Allot an hole in which a forward jump is inserted later.
  bl branch_v    @ here 2 allot
 8002e62:	f7ff fe98 	bl	8002b96 <branch_v>
  adds tos, #1   @ Markierung anbringen, dass ich mir einen bedingten Sprung wünsche
 8002e66:	3601      	adds	r6, #1
                 @ This bit indicates that we need a conditional jump to be filled in here later.

  pushdaconst 1
 8002e68:	f847 6d04 	str.w	r6, [r7, #-4]!
 8002e6c:	2601      	movs	r6, #1
  ldr r0, =leavepointer
 8002e6e:	4889      	ldr	r0, [pc, #548]	; (8003094 <Code_799+0x46>)
  str psp, [r0] @ Aktuelle Position im Stack sichern  Save current position on datastack
 8002e70:	6007      	str	r7, [r0, #0]

  bl branch_r    @ Schleifen-Rücksprung vorbereiten  Prepare loop jump back to the beginning
 8002e72:	f7ff fe52 	bl	8002b1a <branch_r>
  pushdaconst 3  @ Strukturerkennung  Structure matching
 8002e76:	f847 6d04 	str.w	r6, [r7, #-4]!
 8002e7a:	2603      	movs	r6, #3
  pop {pc}
 8002e7c:	bd00      	pop	{pc}

@------------------------------------------------------------------------------
  @ Opcodable optimisations enter here. At least one folding constant available.
  push {lr}
 8002e7e:	b500      	push	{lr}
  bl gemeinsame_schleifenoptimierung
 8002e80:	f000 f801 	bl	8002e86 <gemeinsame_schleifenoptimierung>
  b.n qdo_rest_der_schleifenstruktur
 8002e84:	e7e2      	b.n	8002e4c <qdo_rest_der_schleifenstruktur>

08002e86 <gemeinsame_schleifenoptimierung>:


@------------------------------------------------------------------------------
gemeinsame_schleifenoptimierung: @ This is a common part for opcoding optimized do and ?do
@------------------------------------------------------------------------------
  push {lr}
 8002e86:	b500      	push	{lr}

  @ Write Opcodes !
  pushdaconstw 0xB430 @ push {rloopindex, rlooplimit}
 8002e88:	f847 6d04 	str.w	r6, [r7, #-4]!
 8002e8c:	f24b 4630 	movw	r6, #46128	; 0xb430
  bl hkomma
 8002e90:	f7ff fab8 	bl	8002404 <Code_544>

  pushdaconst 4 @ Register 4 = rloopindex
 8002e94:	f847 6d04 	str.w	r6, [r7, #-4]!
 8002e98:	2604      	movs	r6, #4
  bl registerliteralkomma
 8002e9a:	f7fe ff4f 	bl	8001d3c <Code_423>

  subs r3, #1 @ One constant less
 8002e9e:	3b01      	subs	r3, #1
  beq.n 1f
 8002ea0:	d008      	beq.n	8002eb4 <gemeinsame_schleifenoptimierung+0x2e>

    @ Second constant available
    pushdaconst 5 @ Register 4 = rlooplimit
 8002ea2:	f847 6d04 	str.w	r6, [r7, #-4]!
 8002ea6:	2605      	movs	r6, #5
    bl registerliteralkomma
 8002ea8:	f7fe ff48 	bl	8001d3c <Code_423>
    subs r3, #1 @ Another constant consumed
 8002eac:	3b01      	subs	r3, #1

    bl konstantenschreiben @ Maybe there are some more folding constants, then have to be written now.
 8002eae:	f000 fc29 	bl	8003704 <konstantenschreiben>
    pop {pc}
 8002eb2:	bd00      	pop	{pc}

1:@ No more constants available

  @ popda rlooplimit
  pushdaconst  0x0035 
 8002eb4:	f847 6d04 	str.w	r6, [r7, #-4]!
 8002eb8:	2635      	movs	r6, #53	; 0x35
  bl hkomma
 8002eba:	f7ff faa3 	bl	8002404 <Code_544>
  pushdaconstw 0xCF40
 8002ebe:	f847 6d04 	str.w	r6, [r7, #-4]!
 8002ec2:	f64c 7640 	movw	r6, #53056	; 0xcf40
  bl hkomma
 8002ec6:	f7ff fa9d 	bl	8002404 <Code_544>

  bl konstantenschreiben @ Maybe there are some more folding constants, then have to be written now.
 8002eca:	f000 fc1b 	bl	8003704 <konstantenschreiben>
  pop {pc}
 8002ece:	bd00      	pop	{pc}

08002ed0 <Dictionary_758>:
 8002ed0:	08002eea 	.word	0x08002eea
 8002ed4:	63040030 	.word	0x63040030
 8002ed8:	7361      	.short	0x7361
 8002eda:	65          	.byte	0x65
	...

08002edc <Code_758>:
@------------------------------------------------------------------------------
  Wortbirne Flag_immediate_compileonly, "case"
  @ ( -- 0 8 )
case:
@------------------------------------------------------------------------------
  pushdaconst 0 @ Zahl der Zweige    Current number of branches
 8002edc:	f847 6d04 	str.w	r6, [r7, #-4]!
 8002ee0:	2600      	movs	r6, #0
  pushdaconst 8 @ Strukturerkennung  Structure pattern
 8002ee2:	f847 6d04 	str.w	r6, [r7, #-4]!
 8002ee6:	2608      	movs	r6, #8
  bx lr
 8002ee8:	4770      	bx	lr

08002eea <Dictionary_763>:
 8002eea:	2f00      	.short	0x2f00
 8002eec:	00300800 	.word	0x00300800
 8002ef0:	666f3f03 	.word	0x666f3f03

08002ef4 <Code_763>:
  @ ( ... #of 8 -- ... addr #of+1 9 )
  @ Nimmt einen Flag statt einer Konstanten entgegen.
  @ Kann so eigene Vergleiche aufbauen.
  @ Takes flag instead of constant to build your own comparisions.
@------------------------------------------------------------------------------
  ldr r0, =struktur_qof
 8002ef4:	486c      	ldr	r0, [pc, #432]	; (80030a8 <Code_799+0x5a>)
  b.n of_inneneinsprung
 8002ef6:	e009      	b.n	8002f0c <of_inneneinsprung>

08002ef8 <struktur_qof>:

struktur_qof: @ Will be inlined.
  subs tos, #1
 8002ef8:	3e01      	subs	r6, #1
  sbcs tos, tos
 8002efa:	41b6      	sbcs	r6, r6
  drop
 8002efc:	cf40      	ldmia	r7!, {r6}
  @ bne... is generated here.
  bx lr
 8002efe:	4770      	bx	lr

08002f00 <Dictionary_765>:
 8002f00:	08002fa6 	.word	0x08002fa6
 8002f04:	6f020078 	.word	0x6f020078
 8002f08:	66          	.byte	0x66
	...

08002f0a <Code_765>:

@------------------------------------------------------------------------------
  Wortbirne Flag_immediate_compileonly|Flag_opcodierbar_Spezialfall, "of"
  @ ( ... #of 8 -- ... addr #of+1 9 )
@------------------------------------------------------------------------------
  ldr r0, =struktur_of
 8002f0a:	4868      	ldr	r0, [pc, #416]	; (80030ac <Code_799+0x5e>)

08002f0c <of_inneneinsprung>:

of_inneneinsprung:
  cmp tos, #8                  @ Check for structure pattern: Give error message and quit if wrong.
 8002f0c:	2e08      	cmp	r6, #8
  beq 1f
 8002f0e:	d000      	beq.n	8002f12 <of_inneneinsprung+0x6>
  b.n strukturen_passen_nicht
 8002f10:	e672      	b.n	8002bf8 <strukturen_passen_nicht>
1:drop
 8002f12:	cf40      	ldmia	r7!, {r6}

  push {lr}
 8002f14:	b500      	push	{lr}

  pushda r0
 8002f16:	f847 6d04 	str.w	r6, [r7, #-4]!
 8002f1a:	0006      	movs	r6, r0
  bl inlinekomma  @ Insert opcodes for structure
 8002f1c:	f7ff f860 	bl	8001fe0 <Code_469>

08002f20 <of_opcodiereinsprung>:

of_opcodiereinsprung:
  @ ( #of --> Addr #of+1)

  bl branch_v @ here 2 allot
 8002f20:	f7ff fe39 	bl	8002b96 <branch_v>
  swap
 8002f24:	6839      	ldr	r1, [r7, #0]
 8002f26:	603e      	str	r6, [r7, #0]
 8002f28:	460e      	mov	r6, r1
  adds tos, #1 @ Eine Adresse mehr, die abzuarbeiten ist  One more location a branch opcode has to be written in later.
 8002f2a:	3601      	adds	r6, #1

  pushdaconst 9 @ Strukturerkennung bereitlegen  Structure pattern
 8002f2c:	f847 6d04 	str.w	r6, [r7, #-4]!
 8002f30:	2609      	movs	r6, #9

  pushdaconstw 0xcf40 @ Opcode for ldmia r7!, {r6}
 8002f32:	f847 6d04 	str.w	r6, [r7, #-4]!
 8002f36:	f64c 7640 	movw	r6, #53056	; 0xcf40
  bl hkomma
 8002f3a:	f7ff fa63 	bl	8002404 <Code_544>

  pop {pc}
 8002f3e:	bd00      	pop	{pc}

@------------------------------------------------------------------------------
  @ Opcodable optimisations enter here.
  push {lr}
 8002f40:	b500      	push	{lr}

  popda r0 @ Fetch constant for folding
 8002f42:	0030      	movs	r0, r6
 8002f44:	cf40      	ldmia	r7!, {r6}
  subs r3, #1 @ One constant less
 8002f46:	3b01      	subs	r3, #1
  push {r0}
 8002f48:	b401      	push	{r0}
  bl konstantenschreiben @ Write all other constants in dictionary
 8002f4a:	f000 fbdb 	bl	8003704 <konstantenschreiben>
  pop {r0}
 8002f4e:	bc01      	pop	{r0}

  @ Generate opcodes

  cmp tos, #8                  @ Check for structure pattern: Give error message and quit if wrong.
 8002f50:	2e08      	cmp	r6, #8
  beq 1f
 8002f52:	d000      	beq.n	8002f56 <of_opcodiereinsprung+0x36>
  b.n strukturen_passen_nicht
 8002f54:	e650      	b.n	8002bf8 <strukturen_passen_nicht>
1:drop
 8002f56:	cf40      	ldmia	r7!, {r6}

  @ r0 contains constant for this case comparision.
  pushda r0
 8002f58:	f847 6d04 	str.w	r6, [r7, #-4]!
 8002f5c:	0006      	movs	r6, r0

    @ Is constant small enough to fit in one Byte ?
    movs r1, #0xFF  @ Mask for 8 Bits
 8002f5e:	21ff      	movs	r1, #255	; 0xff
    ands r1, tos
 8002f60:	4031      	ands	r1, r6
    cmp r1, tos
 8002f62:	42b1      	cmp	r1, r6
    bne.n 2f
 8002f64:	d105      	bne.n	8002f72 <of_opcodiereinsprung+0x52>
    @ Equal ? Constant fits in 8 Bits.

    ldr r1, =0x2E00 @ Opcode cmp r6, #0
 8002f66:	f44f 5138 	mov.w	r1, #11776	; 0x2e00
    orrs tos, r1     @ Or together with constant
 8002f6a:	430e      	orrs	r6, r1
    bl hkomma
 8002f6c:	f7ff fa4a 	bl	8002404 <Code_544>
    b.n of_opcodiereinsprung
 8002f70:	e7d6      	b.n	8002f20 <of_opcodiereinsprung>

2:  

    .ifndef m0core
      @ M3/M4 cores offer additional opcodes with 12-bit encoded constants.
      bl twelvebitencoding
 8002f72:	f7fe fe2f 	bl	8001bd4 <Code_414>

      cmp tos, #0
 8002f76:	2e00      	cmp	r6, #0
      drop   @ Preserves Flags !
 8002f78:	cf40      	ldmia	r7!, {r6}
      beq 3f
 8002f7a:	d004      	beq.n	8002f86 <of_opcodiereinsprung+0x66>
        @ Encoding of constant within 12 bits is possible.
        ldr r0, =0xF1B60F00 @ Opcode subs pc, tos, #imm12 = cmp tos, #imm12
 8002f7c:	484c      	ldr	r0, [pc, #304]	; (80030b0 <Code_799+0x62>)
        orrs tos, r0
 8002f7e:	4306      	orrs	r6, r0
        bl reversekomma
 8002f80:	f7ff fa68 	bl	8002454 <Code_553>
        b.n of_opcodiereinsprung
 8002f84:	e7cc      	b.n	8002f20 <of_opcodiereinsprung>
3:
    .endif  

  @ Generate constant for comparision
  pushdaconst 0
 8002f86:	f847 6d04 	str.w	r6, [r7, #-4]!
 8002f8a:	2600      	movs	r6, #0
  bl registerliteralkomma
 8002f8c:	f7fe fed6 	bl	8001d3c <Code_423>

  pushdaconstw 0x42B0 @ cmp r0, tos  
 8002f90:	f847 6d04 	str.w	r6, [r7, #-4]!
 8002f94:	f244 26b0 	movw	r6, #17072	; 0x42b0
  bl hkomma
 8002f98:	f7ff fa34 	bl	8002404 <Code_544>
  b.n of_opcodiereinsprung
 8002f9c:	e7c0      	b.n	8002f20 <of_opcodiereinsprung>

08002f9e <struktur_of>:


struktur_of:
  popda r0
 8002f9e:	0030      	movs	r0, r6
 8002fa0:	cf40      	ldmia	r7!, {r6}
  cmp r0, tos
 8002fa2:	42b0      	cmp	r0, r6
  bx lr
 8002fa4:	4770      	bx	lr

08002fa6 <Dictionary_784>:
 8002fa6:	2fdc      	.short	0x2fdc
 8002fa8:	00300800 	.word	0x00300800
 8002fac:	646e6505 	.word	0x646e6505
 8002fb0:	666f      	.short	0x666f

08002fb2 <Code_784>:
@------------------------------------------------------------------------------
  Wortbirne Flag_immediate_compileonly, "endof"
  @ ( ... addr-jne #of 9 -- ... addr-jmp #of 8 )
strukturendof:
@------------------------------------------------------------------------------
  cmp tos, #9
 8002fb2:	2e09      	cmp	r6, #9
  beq 1f
 8002fb4:	d000      	beq.n	8002fb8 <Code_784+0x6>
  b.n strukturen_passen_nicht
 8002fb6:	e61f      	b.n	8002bf8 <strukturen_passen_nicht>
1:drop
 8002fb8:	cf40      	ldmia	r7!, {r6}

  push {lr}
 8002fba:	b500      	push	{lr}
  to_r @ #of auf Returnstack  Move #of to Returnstack and out of the way
 8002fbc:	b440      	push	{r6}
 8002fbe:	cf40      	ldmia	r7!, {r6}

    bl branch_v @ here 2 allot
 8002fc0:	f7ff fde9 	bl	8002b96 <branch_v>
    swap @ ( here Addr-jne )
 8002fc4:	6839      	ldr	r1, [r7, #0]
 8002fc6:	603e      	str	r6, [r7, #0]
 8002fc8:	460e      	mov	r6, r1
    bl v_casebranch @ Den aktuellen of-Block mit bne überspringen   Skip current of-block with a bne opcode
 8002fca:	f7ff fdfd 	bl	8002bc8 <v_casebranch>

  r_from @ #of zurückholen fetch back of#
 8002fce:	f847 6d04 	str.w	r6, [r7, #-4]!
 8002fd2:	bc40      	pop	{r6}
  pushdaconst 8
 8002fd4:	f847 6d04 	str.w	r6, [r7, #-4]!
 8002fd8:	2608      	movs	r6, #8
  pop {pc}
 8002fda:	bd00      	pop	{pc}

08002fdc <Dictionary_792>:
 8002fdc:	0800302e 	.word	0x0800302e
 8002fe0:	65070030 	.word	0x65070030
 8002fe4:	6163646e 	.word	0x6163646e
 8002fe8:	6573      	.short	0x6573

08002fea <Code_792>:
@------------------------------------------------------------------------------
  Wortbirne Flag_immediate_compileonly, "endcase"
  @ ( ... addrs-jmp #of 8 -- )
strukturendcase:
@------------------------------------------------------------------------------
  cmp tos, #8
 8002fea:	2e08      	cmp	r6, #8
  beq 1f
 8002fec:	d000      	beq.n	8002ff0 <Code_792+0x6>
  b.n strukturen_passen_nicht
 8002fee:	e603      	b.n	8002bf8 <strukturen_passen_nicht>
1:drop
 8002ff0:	cf40      	ldmia	r7!, {r6}

  push {lr}
 8002ff2:	b500      	push	{lr}
  pushdaconstw 0xcf40 @ Opcode for ldmia r7!, {r6}
 8002ff4:	f847 6d04 	str.w	r6, [r7, #-4]!
 8002ff8:	f64c 7640 	movw	r6, #53056	; 0xcf40
  bl hkomma
 8002ffc:	f7ff fa02 	bl	8002404 <Code_544>

  bl spruenge_einpflegen
 8003000:	f000 f801 	bl	8003006 <spruenge_einpflegen>
  pop {pc}
 8003004:	bd00      	pop	{pc}

08003006 <spruenge_einpflegen>:


@------------------------------------------------------------------------------
spruenge_einpflegen: @ Internal use only.
@------------------------------------------------------------------------------
  push {lr}
 8003006:	b500      	push	{lr}
  @ Einpflegen der gesammelten Sprünge
  @ Fill in collected jumps.
  popda r0 @ Zahl der einzupflegenden Sprünge holen Fetch number of jumps that need to be generated
 8003008:	0030      	movs	r0, r6
 800300a:	cf40      	ldmia	r7!, {r6}

1:cmp r0, #0 @ Sind noch Sprünge zu bearbeiten ? Any jumps left ?
 800300c:	2800      	cmp	r0, #0
  beq 2f
 800300e:	d00d      	beq.n	800302c <spruenge_einpflegen+0x26>
  
  push {r0, r1}
 8003010:	b403      	push	{r0, r1}
  movs r1, #1          @ Check if this shall be a conditional jump instead. Needed for ?do which reuses this code. 
 8003012:	2101      	movs	r1, #1
  ands r1, tos         @ Prüfe, ob es ein bedingter Sprung werden soll - ?do benötigt solche.
 8003014:	4031      	ands	r1, r6

  cmp r1, #0
 8003016:	2900      	cmp	r1, #0
  beq 3f
 8003018:	d003      	beq.n	8003022 <spruenge_einpflegen+0x1c>
    subs tos, #1 @ Markierung für den bedingten Sprung entfernen  Remove temporary bit for this beeing a conditional jump
 800301a:	3e01      	subs	r6, #1
    bl v_nullbranch  @ Insert conditional jump
 800301c:	f7ff fdca 	bl	8002bb4 <v_nullbranch>
    b 4f
 8003020:	e001      	b.n	8003026 <spruenge_einpflegen+0x20>
  
3:bl v_branch @ Unbedingten Sprung einpflegen  Insert unconditional jump
 8003022:	f7ff fdc1 	bl	8002ba8 <v_branch>

4:pop {r0, r1}
 8003026:	bc03      	pop	{r0, r1}

  subs r0, #1 @ Ein Sprung weniger übrig  One jump less to do.
 8003028:	3801      	subs	r0, #1
  b 1b
 800302a:	e7ef      	b.n	800300c <spruenge_einpflegen+0x6>

2: pop {pc}
 800302c:	bd00      	pop	{pc}

0800302e <Dictionary_797>:
 800302e:	3042      	.short	0x3042
 8003030:	00000800 	.word	0x00000800
 8003034:	6b6f7405 	.word	0x6b6f7405
 8003038:	6e65      	.short	0x6e65

0800303a <Code_797>:

@ -----------------------------------------------------------------------------
  Wortbirne Flag_visible, "token" @ ( -- c-addr length )
token:
@ -----------------------------------------------------------------------------
  pushdatos
 800303a:	f847 6d04 	str.w	r6, [r7, #-4]!
  movs tos, #32 @ Leerzeichen  Space
 800303e:	2620      	movs	r6, #32
  b.n parse
 8003040:	e005      	b.n	800304e <Code_799>

08003042 <Dictionary_799>:
 8003042:	30bc      	.short	0x30bc
 8003044:	00000800 	.word	0x00000800
 8003048:	72617005 	.word	0x72617005
 800304c:	6573      	.short	0x6573

0800304e <Code_799>:

@ -----------------------------------------------------------------------------
  Wortbirne Flag_visible, "parse" @ ( c -- c-addr length )
parse:
@ -----------------------------------------------------------------------------
  push {r4, lr} @ Eigentlich nur r4 nötig
 800304e:	b510      	push	{r4, lr}
  @ Parse nochmal neu überdenken:
     
  ldr r0, =current_source
 8003050:	4818      	ldr	r0, [pc, #96]	; (80030b4 <Code_799+0x66>)
  ldr r1, [r0]     @ Length  of input buffer
 8003052:	6801      	ldr	r1, [r0, #0]
  ldr r0, [r0, #4] @ Pointer to input buffer
 8003054:	6840      	ldr	r0, [r0, #4]

  ldr r2, =Pufferstand
 8003056:	4a18      	ldr	r2, [pc, #96]	; (80030b8 <Code_799+0x6a>)
  ldr r2, [r2] @ Current >IN gauge
 8003058:	6812      	ldr	r2, [r2, #0]

  adds r4, r0, r2 @ Start address of parsed string
 800305a:	1884      	adds	r4, r0, r2

  @ Speziell for Token, falls das Trennzeichen das Leerzeichen ist:
  cmp tos, #32
 800305c:	2e20      	cmp	r6, #32
  bne 2f
 800305e:	d107      	bne.n	8003070 <Code_799+0x22>

1:  cmp r1, r2 @ Any characters left ?
 8003060:	4291      	cmp	r1, r2
    beq 3f
 8003062:	d00f      	beq.n	8003084 <Code_799+0x36>
      ldrb r3, [r0, r2] @ Fetch character
 8003064:	5c83      	ldrb	r3, [r0, r2]
      cmp r3, tos @ Ist es das Leerzeichen ? Is this the delimiter which is space in this loop ?
 8003066:	42b3      	cmp	r3, r6
      bne 2f
 8003068:	d102      	bne.n	8003070 <Code_799+0x22>
        adds r2, #1     @ Don't collect spaces, advance >IN to skip.
 800306a:	3201      	adds	r2, #1
        adds r4, r0, r2 @ Recalculate start address of parsed string
 800306c:	1884      	adds	r4, r0, r2
        b 1b
 800306e:	e7f7      	b.n	8003060 <Code_799+0x12>

2:@ Sammelschleife. Collecting loop.
  cmp r1, r2 @ Any characters left ?
 8003070:	4291      	cmp	r1, r2
  beq 3f
 8003072:	d007      	beq.n	8003084 <Code_799+0x36>
    ldrb r3, [r0, r2] @ Fetch character
 8003074:	5c83      	ldrb	r3, [r0, r2]
    adds r2, #1       @ Advance >IN
 8003076:	3201      	adds	r2, #1
    cmp r3, tos @ Is this the delimiter ?
 8003078:	42b3      	cmp	r3, r6
    bne 2b
 800307a:	d1f9      	bne.n	8003070 <Code_799+0x22>
      @ Finished, fallthrough for delimiter detected.
      adds tos, r0, r2
 800307c:	1886      	adds	r6, r0, r2
      subs tos, r4
 800307e:	1b36      	subs	r6, r6, r4
      subs tos, #1 @ Delimiter should not be part of the parsed string but needs to be count in >IN
 8003080:	3e01      	subs	r6, #1
      b 4f
 8003082:	e001      	b.n	8003088 <Code_799+0x3a>

3:@ Finished. Fallthrough for end-of-string. Calculate length of parsed string
  adds tos, r0, r2
 8003084:	1886      	adds	r6, r0, r2
  subs tos, r4
 8003086:	1b36      	subs	r6, r6, r4

4:@ Store start address
  subs psp, #4
 8003088:	3f04      	subs	r7, #4
  str r4, [psp]
 800308a:	603c      	str	r4, [r7, #0]

  @ Store new >IN
  ldr r0, =Pufferstand
 800308c:	480a      	ldr	r0, [pc, #40]	; (80030b8 <Code_799+0x6a>)
  str r2, [r0] @ Fresh >IN gauge
 800308e:	6002      	str	r2, [r0, #0]

  pop {r4, pc}
 8003090:	bd10      	pop	{r4, pc}
 8003092:	0000      	.short	0x0000
  ldr r0, =leavepointer
 8003094:	2000100c 	.word	0x2000100c
  ldr tos, =struktur_plusloop
 8003098:	08002d9a 	.word	0x08002d9a
  ldr tos, =struktur_loop
 800309c:	08002de8 	.word	0x08002de8
  ldr tos, =unloop      @ Inline unloop code
 80030a0:	08002d70 	.word	0x08002d70
  ldr tos, =struktur_do  @ Inline opcodes for do
 80030a4:	08002e2a 	.word	0x08002e2a
  ldr r0, =struktur_qof
 80030a8:	08002ef8 	.word	0x08002ef8
  ldr r0, =struktur_of
 80030ac:	08002f9e 	.word	0x08002f9e
        ldr r0, =0xF1B60F00 @ Opcode subs pc, tos, #imm12 = cmp tos, #imm12
 80030b0:	f1b60f00 	.word	0xf1b60f00
  ldr r0, =current_source
 80030b4:	2001ffdc 	.word	0x2001ffdc
  ldr r2, =Pufferstand
 80030b8:	2001ffe4 	.word	0x2001ffe4

080030bc <Dictionary_800>:
 80030bc:	080030fa 	.word	0x080030fa
 80030c0:	64050000 	.word	0x64050000
 80030c4:	74696769 	.word	0x74696769

080030c8 <Code_800>:

@ -----------------------------------------------------------------------------
  Wortbirne Flag_visible, "digit" @ ( Zeichen -- false / Ziffer true )
digit:  @ ( c -- false / u true ) Converts a character into a digit.
@ -----------------------------------------------------------------------------
  ldr r3, =base
 80030c8:	4bcf      	ldr	r3, [pc, #828]	; (8003408 <Code_863+0xa>)
  ldr r3, [r3]
 80030ca:	681b      	ldr	r3, [r3, #0]

080030cc <digit_base_r3>:

digit_base_r3:  @ Erwartet Base in r3  Base has to be in r3 if you enter here.
  subs tos, #48 @ "0" abziehen.  Subtract "0"
 80030cc:	3e30      	subs	r6, #48	; 0x30
  blo 5f        @ negativ --> Zeichen war "unter Null"  Negative ? --> Invalid character.
 80030ce:	d30b      	bcc.n	80030e8 <digit_base_r3+0x1c>

  cmp tos, #10  @ Im Bereich bis "9" ?  In range up to "9" ?
 80030d0:	2e0a      	cmp	r6, #10
  blo 4f        @ Ziffer korrekt erkannt.  Digit recognized properly.
 80030d2:	d30b      	bcc.n	80030ec <digit_base_r3+0x20>

  @ Nein: Also ist die Ziffer nicht in den Zahlen 0-9 enthalten gewesen.
  @ Prüfe Buchstaben.
  @ Character is a letter.

  subs tos, #7  @ Anfang der Großbuchstaben, "A"   Beginning of capital letters "A"
 80030d4:	3e07      	subs	r6, #7
  cmp tos, #10  @ Buchstabenwerte beginnen bei 10  Values of letters start with 10
 80030d6:	2e0a      	cmp	r6, #10
  blo 5f        @ --> Zeichen war ein Sonderzeichen zwischen Ziffern und Großbuchstaben.
 80030d8:	d306      	bcc.n	80030e8 <digit_base_r3+0x1c>
                @ --> Character has been a special one between numbers and capital letters.

  cmp tos, #36  @ Es gibt 26 Buchstaben.  26 letters available.
 80030da:	2e24      	cmp	r6, #36	; 0x24
  blo 4f        @ In dem Bereich: Ziffer korrekt erkannt.  In this range ? Digit recognized properly.
 80030dc:	d306      	bcc.n	80030ec <digit_base_r3+0x20>

  @ Für den Fall, dass die Ziffer immer noch nicht erkannt ist, probiere es mit den Kleinbuchstaben.
  @ Try to recognize small letters.

  subs tos, #32 @ Schiebe zum Anfang der Kleinbuchstaben, "a"  Beginning of small letters "a"
 80030de:	3e20      	subs	r6, #32
  cmp tos, #10  @ Buchstabenwerte beginnen bei 10  Values of letters start with 10
 80030e0:	2e0a      	cmp	r6, #10
  blo 5f        @ --> Zeichen war ein Sonderzeichen zwischen Großbuchstaben und Kleinbuchstaben.
 80030e2:	d301      	bcc.n	80030e8 <digit_base_r3+0x1c>
                @ --> Character has been a special one between small and capital letters.

  cmp tos, #36  @ Es gibt 26 Buchstaben.  26 letters available.
 80030e4:	2e24      	cmp	r6, #36	; 0x24
  blo 4f        @ In dem Bereich: Ziffer korrekt erkannt.  In this range ? Digit recognized properly.
 80030e6:	d301      	bcc.n	80030ec <digit_base_r3+0x20>
  @ Not yet recognized ? --> Character has been a special one above small letters or in Unicode.
  @ No valid digit then..


5: @ Aussprung mit Fehler  Error.
  movs tos, #0    @ False-Flag
 80030e8:	2600      	movs	r6, #0
  bx lr
 80030ea:	4770      	bx	lr

4: @ Korrekt erkannt. Ziffer in tos

  @ Prüfe nun noch, ob die Ziffer innerhalb der Basis liegt !
  @ Do not accept digits greater than current base
  cmp tos, r3 @ r3 enthält von number aus die Basis.
 80030ec:	429e      	cmp	r6, r3
  bhs 5b     @ Außerhalb der Basis werden keine Buchstaben als Zahlen akzeptiert.
 80030ee:	d2fb      	bcs.n	80030e8 <digit_base_r3+0x1c>

  pushdatos
 80030f0:	f847 6d04 	str.w	r6, [r7, #-4]!
  movs tos, #0
 80030f4:	2600      	movs	r6, #0
  mvns tos, tos @ True-Flag bereitlegen
 80030f6:	43f6      	mvns	r6, r6
  bx lr
 80030f8:	4770      	bx	lr

080030fa <Dictionary_802>:
 80030fa:	3204      	.short	0x3204
 80030fc:	00000800 	.word	0x00000800
 8003100:	6d756e06 	.word	0x6d756e06
 8003104:	6562      	.short	0x6562
 8003106:	72          	.byte	0x72
	...

08003108 <Code_802>:
  @ r2: Character or helper
  @ r3: Base
  @ r4: Result-Low
  @ r5: Result-High

  push {r0, r1, r2, r3, r4, r5, lr}
 8003108:	b53f      	push	{r0, r1, r2, r3, r4, r5, lr}

  popda r1          @ Hole die Länge des Strings  Fetch length of string
 800310a:	0031      	movs	r1, r6
 800310c:	cf40      	ldmia	r7!, {r6}
  subs r0, tos, #1  @ Hole die Stringadresse      Fetch string address
 800310e:	1e70      	subs	r0, r6, #1

  movs tos, #1  @ Single length result
 8003110:	2601      	movs	r6, #1

  movs r2, #1   @ Positive Sign
 8003112:	2201      	movs	r2, #1
  push {r2}
 8003114:	b404      	push	{r2}

  ldr r3, =base
 8003116:	4bbc      	ldr	r3, [pc, #752]	; (8003408 <Code_863+0xa>)
  ldr r3, [r3]
 8003118:	681b      	ldr	r3, [r3, #0]

  movs r4, #0   @ Clear result low
 800311a:	2400      	movs	r4, #0
  movs r5, #0   @              high
 800311c:	2500      	movs	r5, #0

  @ ( Single R: Positive )


1: @ Sind noch Zeichen da ?  Any characters left ?
  cmp r1, #0
 800311e:	2900      	cmp	r1, #0
  beq 4f @ String ist leer, bin fertig !
 8003120:	d03c      	beq.n	800319c <Code_802+0x94>

  @ Hole ein Zeichen:  Fetch a character
  adds r0, #1 @ Pointer weiterrücken
 8003122:	3001      	adds	r0, #1
  subs r1, #1 @ Länge um eins verringern
 8003124:	3901      	subs	r1, #1
  ldrb r2, [r0] @ Zeichen holen.
 8003126:	7802      	ldrb	r2, [r0, #0]

  @ Vorzeichen und Basisvorsilben:  Sign and base prefixes:
  cmp r2, #45   @ Minus ?
 8003128:	2a2d      	cmp	r2, #45	; 0x2d
  bne 2f
 800312a:	d104      	bne.n	8003136 <Code_802+0x2e>
    add sp, #4   @ rdrop
 800312c:	b001      	add	sp, #4
    movs r2, #0
 800312e:	2200      	movs	r2, #0
    mvns r2, r2   @ -1
 8003130:	43d2      	mvns	r2, r2
    push {r2}
 8003132:	b404      	push	{r2}
    b 1b
 8003134:	e7f3      	b.n	800311e <Code_802+0x16>

2:cmp r2, #35   @ # ?
 8003136:	2a23      	cmp	r2, #35	; 0x23
  bne 2f
 8003138:	d101      	bne.n	800313e <Code_802+0x36>
    movs r3, #10 @ Umschalten auf Dezimal
 800313a:	230a      	movs	r3, #10
    b 1b
 800313c:	e7ef      	b.n	800311e <Code_802+0x16>

2:cmp r2, #36   @ $ ?
 800313e:	2a24      	cmp	r2, #36	; 0x24
  bne 2f
 8003140:	d101      	bne.n	8003146 <Code_802+0x3e>
    movs r3, #16 @ Umschalten auf Hexadezimal
 8003142:	2310      	movs	r3, #16
    b 1b
 8003144:	e7eb      	b.n	800311e <Code_802+0x16>

2:cmp r2, #37   @ % ?
 8003146:	2a25      	cmp	r2, #37	; 0x25
  bne 2f
 8003148:	d101      	bne.n	800314e <Code_802+0x46>
    movs r3, #2  @ Umschalten auf Binär
 800314a:	2302      	movs	r3, #2
    b 1b
 800314c:	e7e7      	b.n	800311e <Code_802+0x16>

2:cmp r2, #46   @ . ?
 800314e:	2a2e      	cmp	r2, #46	; 0x2e
  bne 2f
 8003150:	d101      	bne.n	8003156 <Code_802+0x4e>
    movs tos, #2   @ Double length result !
 8003152:	2602      	movs	r6, #2
    b 1b
 8003154:	e7e3      	b.n	800311e <Code_802+0x16>

2:cmp r2, #44  @ , ?
 8003156:	2a2c      	cmp	r2, #44	; 0x2c
  beq.n number_nachkommastellen
 8003158:	d036      	beq.n	80031c8 <number_nachkommastellen>


  @ Wandele das Zeichen  Convert character
  pushda r2
 800315a:	f847 6d04 	str.w	r6, [r7, #-4]!
 800315e:	0016      	movs	r6, r2
  bl digit_base_r3
 8003160:	f7ff ffb4 	bl	80030cc <digit_base_r3>
  cmp tos, #0 @ Bei false mochte digit das Zeichen nicht.  Error ?
 8003164:	2e00      	cmp	r6, #0
  drop        @ Flag runterwerfen  Drop the Flag from digit
 8003166:	cf40      	ldmia	r7!, {r6}
    beq 5f      @ Aussprung mit Fehler.
 8003168:	d02b      	beq.n	80031c2 <Code_802+0xba>

  @ Zeichen wurde gemocht.  Character has been successfully converted to a digit.

  @ Multiply old result with base:
  pushda r4 @ Low
 800316a:	f847 6d04 	str.w	r6, [r7, #-4]!
 800316e:	0026      	movs	r6, r4
  pushda r5 @ High
 8003170:	f847 6d04 	str.w	r6, [r7, #-4]!
 8003174:	002e      	movs	r6, r5
  pushda r3 @ Base-Low
 8003176:	f847 6d04 	str.w	r6, [r7, #-4]!
 800317a:	001e      	movs	r6, r3
  pushdaconst 0 @ Base-High
 800317c:	f847 6d04 	str.w	r6, [r7, #-4]!
 8003180:	2600      	movs	r6, #0

  push {r0, r1, r2, r3}
 8003182:	b40f      	push	{r0, r1, r2, r3}
    bl ud_star
 8003184:	f7fd f928 	bl	80003d8 <Code_53>
  pop {r0, r1, r2, r3}
 8003188:	bc0f      	pop	{r0, r1, r2, r3}

  popda r5 @ High
 800318a:	0035      	movs	r5, r6
 800318c:	cf40      	ldmia	r7!, {r6}
  popda r4 @ Low
 800318e:	0034      	movs	r4, r6
 8003190:	cf40      	ldmia	r7!, {r6}

  movs r2, #0 @ For addition with Carry
 8003192:	2200      	movs	r2, #0
  adds r4, tos
 8003194:	19a4      	adds	r4, r4, r6
  adcs r5, r2
 8003196:	4155      	adcs	r5, r2
  drop
 8003198:	cf40      	ldmia	r7!, {r6}

  b 1b
 800319a:	e7c0      	b.n	800311e <Code_802+0x16>


4:@ String ist leer und wurde korrekt umgewandelt.  String is empty. Almost done...
  @ Vorzeichen beachten:  Take care of sign.
  pop {r2} @ Fetch back sign
 800319c:	bc04      	pop	{r2}
  cmp r2, #0
 800319e:	2a00      	cmp	r2, #0
  bpl 3f
 80031a0:	d504      	bpl.n	80031ac <Code_802+0xa4>

    @ dnegate in Register:
    movs r2, #0
 80031a2:	2200      	movs	r2, #0
    mvns r4, r4
 80031a4:	43e4      	mvns	r4, r4
    mvns r5, r5
 80031a6:	43ed      	mvns	r5, r5
    adds r4, #1
 80031a8:	3401      	adds	r4, #1
    adcs r5, r2
 80031aa:	4155      	adcs	r5, r2

3:movs r3, tos  @ Length of result:
 80031ac:	0033      	movs	r3, r6
  movs tos, r4  @ Low or single result
 80031ae:	0026      	movs	r6, r4
  cmp r3, #1
 80031b0:	2b01      	cmp	r3, #1
  beq 3f
 80031b2:	d002      	beq.n	80031ba <Code_802+0xb2>
    pushda r5   @ High result
 80031b4:	f847 6d04 	str.w	r6, [r7, #-4]!
 80031b8:	002e      	movs	r6, r5
3:pushda r3     @ Length on Stack
 80031ba:	f847 6d04 	str.w	r6, [r7, #-4]!
 80031be:	001e      	movs	r6, r3

  pop {r0, r1, r2, r3, r4, r5, pc}
 80031c0:	bd3f      	pop	{r0, r1, r2, r3, r4, r5, pc}


5: @ Digit mochte das Zeichen nicht. Return without success.
  add sp, #4   @ Forget sign
 80031c2:	b001      	add	sp, #4
  movs tos, #0  @ No result
 80031c4:	2600      	movs	r6, #0
  pop {r0, r1, r2, r3, r4, r5, pc}
 80031c6:	bd3f      	pop	{r0, r1, r2, r3, r4, r5, pc}

080031c8 <number_nachkommastellen>:



number_nachkommastellen: @ Digits after the decimal point.
  movs r5, r4   @ Low part is "high" part before comma now.
 80031c8:	0025      	movs	r5, r4
  movs r4, #0   @ Clear low part. To be filled with digits after comma.
 80031ca:	2400      	movs	r4, #0
  movs tos, #2  @ Double length result !
 80031cc:	2602      	movs	r6, #2

1: @ Sind noch Zeichen da ?  Any characters left ?
  cmp r1, #0
 80031ce:	2900      	cmp	r1, #0
  beq 4b @ String ist leer, bin fertig !
 80031d0:	d0e4      	beq.n	800319c <Code_802+0x94>

  @ Fetch a character from end of string:
  ldrb r2, [r0, r1] @ Zeichen holen.
 80031d2:	5c42      	ldrb	r2, [r0, r1]
  subs r1, #1 @ Länge um eins verringern
 80031d4:	3901      	subs	r1, #1

  cmp r2, #46   @ . ?
 80031d6:	2a2e      	cmp	r2, #46	; 0x2e
  beq 1b        @ Accept more dots for clarity, already double result.
 80031d8:	d0f9      	beq.n	80031ce <number_nachkommastellen+0x6>


 @ Wandele das Zeichen  Convert character
  pushda r2
 80031da:	f847 6d04 	str.w	r6, [r7, #-4]!
 80031de:	0016      	movs	r6, r2
  bl digit_base_r3
 80031e0:	f7ff ff74 	bl	80030cc <digit_base_r3>
  cmp tos, #0 @ Bei false mochte digit das Zeichen nicht.  Error ?
 80031e4:	2e00      	cmp	r6, #0
  drop        @ Flag runterwerfen  Drop the Flag from digit
 80031e6:	cf40      	ldmia	r7!, {r6}
    beq 5b      @ Aussprung mit Fehler.
 80031e8:	d0eb      	beq.n	80031c2 <Code_802+0xba>

  @ Zeichen wurde gemocht.  Character has been successfully converted to a digit.

  subs psp, #4
 80031ea:	3f04      	subs	r7, #4
  str r4, [psp] @ Low-Old
 80031ec:	603c      	str	r4, [r7, #0]
  pushda r3 @ Base
 80031ee:	f847 6d04 	str.w	r6, [r7, #-4]!
 80031f2:	001e      	movs	r6, r3

  @ ( Old New-Digit Base )
  push {r0, r1, r2, r3}
 80031f4:	b40f      	push	{r0, r1, r2, r3}
  bl um_slash_mod @ ( Remainder New.. )
 80031f6:	f7fd f99e 	bl	8000536 <Code_89>
  pop {r0, r1, r2, r3}
 80031fa:	bc0f      	pop	{r0, r1, r2, r3}
  popda r4
 80031fc:	0034      	movs	r4, r6
 80031fe:	cf40      	ldmia	r7!, {r6}
  drop
 8003200:	cf40      	ldmia	r7!, {r6}

  b 1b
 8003202:	e7e4      	b.n	80031ce <number_nachkommastellen+0x6>

08003204 <Dictionary_829>:
 8003204:	08003226 	.word	0x08003226
 8003208:	2e060000 	.word	0x2e060000
 800320c:	69676964 	.word	0x69676964
 8003210:	74          	.byte	0x74
	...

08003212 <Code_829>:
               @ Wenn ein Zahlensystem größer 36 angestrebt wird,
               @ werden nicht druckbare Zeichen einfach mit # beschrieben.
digitausgeben: @ ( u -- c ) Converts a digit into a character.
               @ If base is bigger than 36, unprintable digits are written as #
@ -----------------------------------------------------------------------------
  cmp tos, #10   @ Von 0-9:
 8003212:	2e0a      	cmp	r6, #10
  bhs 1f
 8003214:	d201      	bcs.n	800321a <Code_829+0x8>
    adds tos, #48 @ Schiebe zum Anfang der Zahlen  Shift to beginning of ASCII numbers
 8003216:	3630      	adds	r6, #48	; 0x30
    bx lr
 8003218:	4770      	bx	lr

1:cmp tos, #36   @ Von A-Z:
 800321a:	2e24      	cmp	r6, #36	; 0x24
  bhs 2f
 800321c:	d201      	bcs.n	8003222 <Code_829+0x10>
    adds tos, #55 @ Alternative für Kleinbuchstaben: 87.                 For small letters: 87.
 800321e:	3637      	adds	r6, #55	; 0x37
    bx lr
 8003220:	4770      	bx	lr

2:movs tos, #35 @ Zeichen #, falls diese Ziffer nicht darstellbar ist. Character #, if digit is not printable
 8003222:	2623      	movs	r6, #35	; 0x23
  bx lr
 8003224:	4770      	bx	lr

08003226 <Dictionary_830>:
 8003226:	325c      	.short	0x325c
 8003228:	00000800 	.word	0x00000800
 800322c:	6c6f6804 	.word	0x6c6f6804
 8003230:	64          	.byte	0x64
	...

08003232 <Code_830>:
  @ New String:  | Length + 1 | New |

  @ Old String:  | Length     | I   | II  | III |     |
  @ New String:  | Length + 1 | New | I   | II  | III |

  popda r3 @ Das einzufügende Zeichen
 8003232:	0033      	movs	r3, r6
 8003234:	cf40      	ldmia	r7!, {r6}

  ldr r0, =Zahlenpuffer
 8003236:	4875      	ldr	r0, [pc, #468]	; (800340c <Code_863+0xe>)
  ldrb r1, [r0] @ Länge holen
 8003238:	7801      	ldrb	r1, [r0, #0]

  cmp r1, #Zahlenpufferlaenge  @ Ist der Puffer voll ? Number buffer full ?
 800323a:	293f      	cmp	r1, #63	; 0x3f
  bhs 3f                       @ Keine weiteren Zeichen mehr annehmen.
 800323c:	d20d      	bcs.n	800325a <Code_830+0x28>

  @ Länge des Puffers um 1 erhöhen  Increment length
  adds r1, #1
 800323e:	3101      	adds	r1, #1
  strb r1, [r0] @ Aktualisierte Länge schreiben
 8003240:	7001      	strb	r1, [r0, #0]

  @ Am Ende anfangen:  Start moving with the end
  adds r0, r1 @ Zeiger an die freie Stelle für das neue Zeichen
 8003242:	1840      	adds	r0, r0, r1

  @ Ist die Länge jetzt genau 1 Zeichen ? Dann muss ich nichs schieben.
  cmp r1, #1  @ Check if at least one character has to be moved
 8003244:	2901      	cmp	r1, #1
  beq 2f
 8003246:	d007      	beq.n	8003258 <Code_830+0x26>

1:@ Schiebeschleife:  Move characters !
  subs r0, #1
 8003248:	3801      	subs	r0, #1
  ldrb r2, [r0] @ Holen an der Stelle-1  Fetch from current location-1
 800324a:	7802      	ldrb	r2, [r0, #0]
  adds r0, #1
 800324c:	3001      	adds	r0, #1
  strb r2, [r0] @ Schreiben an der Stelle  Write current location
 800324e:	7002      	strb	r2, [r0, #0]
  subs r0, #1 @ Weiterrücken  Advance Pointers
 8003250:	3801      	subs	r0, #1

  subs r1, #1
 8003252:	3901      	subs	r1, #1
  cmp r1, #1 @ Bis nur noch ein Zeichen bleibt. Das ist das Neue.
 8003254:	2901      	cmp	r1, #1
  bne 1b     @ Until there is only one character left - the new one.
 8003256:	d1f7      	bne.n	8003248 <Code_830+0x16>

2:@ Das neue Zeichen an seinen Platz legen
  strb r3, [r0] @ Insert new character
 8003258:	7003      	strb	r3, [r0, #0]

3:bx lr
 800325a:	4770      	bx	lr

0800325c <Dictionary_832>:
 800325c:	0800327c 	.word	0x0800327c
 8003260:	68050000 	.word	0x68050000
 8003264:	3c646c6f 	.word	0x3c646c6f

08003268 <Code_832>:

@------------------------------------------------------------------------------
 Wortbirne Flag_visible, "hold<"
zahlanhaengen: @ ( Character -- ) Insert one character at the end of number buffer
@------------------------------------------------------------------------------
  popda r3 @ Das einzufügende Zeichen
 8003268:	0033      	movs	r3, r6
 800326a:	cf40      	ldmia	r7!, {r6}

  ldr r0, =Zahlenpuffer
 800326c:	4867      	ldr	r0, [pc, #412]	; (800340c <Code_863+0xe>)
  ldrb r1, [r0] @ Länge holen
 800326e:	7801      	ldrb	r1, [r0, #0]

  cmp r1, #Zahlenpufferlaenge  @ Ist der Puffer voll ? Number buffer full ?
 8003270:	293f      	cmp	r1, #63	; 0x3f
  bhs 3f                       @ Keine weiteren Zeichen mehr annehmen.
 8003272:	d202      	bcs.n	800327a <Code_832+0x12>

    adds r1, #1 @ Ein Zeichen mehr
 8003274:	3101      	adds	r1, #1
    strb r1, [r0] @ Neue Länge schreiben
 8003276:	7001      	strb	r1, [r0, #0]
    strb r3, [r0, r1] @ Neues Zeichen am Ende anhängen
 8003278:	5443      	strb	r3, [r0, r1]
3:bx lr
 800327a:	4770      	bx	lr

0800327c <Dictionary_834>:
 800327c:	08003294 	.word	0x08003294
 8003280:	73040000 	.word	0x73040000
 8003284:	6769      	.short	0x6769
 8003286:	6e          	.byte	0x6e
	...

08003288 <Code_834>:
vorzeichen: @ ( Vorzeichen -- )
      @ Prüft die Zahl auf dem Stack auf ihr Vorzeichen hin und
      @ fügt bei Bedarf ein Minus an den Ziffernstring an.
      @ Checks flag of number on stack and adds a minus to number buffer if it is negative.
@------------------------------------------------------------------------------
  cmp tos, #0
 8003288:	2e00      	cmp	r6, #0
  bmi 1f
 800328a:	d401      	bmi.n	8003290 <Code_834+0x8>
  drop
 800328c:	cf40      	ldmia	r7!, {r6}
  bx lr
 800328e:	4770      	bx	lr

1:movs tos, #45  @ Minuszeichen  ASCII for minus
 8003290:	262d      	movs	r6, #45	; 0x2d
  b.n hold         @ an den Zahlenpuffer anhängen  put it into number buffer
 8003292:	e7ce      	b.n	8003232 <Code_830>

08003294 <Dictionary_836>:
 8003294:	080032a8 	.word	0x080032a8
 8003298:	23020000 	.word	0x23020000
 800329c:	3e          	.byte	0x3e
	...

0800329e <Code_836>:
  Wortbirne Flag_visible, "#>" @ ( ZahlenrestL (ZahlenrestH) -- Addr Len )
zifferstringende:  @ Schließt einen neuen Ziffernstring ab und gibt seine Adresse zurück.
                   @ Benutzt dafür einfach den Zahlenpuffer.
                   @ Finishes a number string and gives back its address.
@------------------------------------------------------------------------------
  ldr r0, =Zahlenpuffer
 800329e:	485b      	ldr	r0, [pc, #364]	; (800340c <Code_863+0xe>)
  ldrb tos, [r0]
 80032a0:	7806      	ldrb	r6, [r0, #0]
  adds r0, #1
 80032a2:	3001      	adds	r0, #1
  str r0, [psp]
 80032a4:	6038      	str	r0, [r7, #0]
  bx lr
 80032a6:	4770      	bx	lr

080032a8 <Dictionary_837>:
 80032a8:	080032c0 	.word	0x080032c0
 80032ac:	66030000 	.word	0x66030000
 80032b0:	5323      	.short	0x5323

080032b2 <Code_837>:
@------------------------------------------------------------------------------
  Wortbirne Flag_visible, "f#S"
falleziffern: @ ( u -- u=0 )
      @ Inserts all digits, at least one, into number buffer.
@------------------------------------------------------------------------------
  push {r4, lr}
 80032b2:	b510      	push	{r4, lr}
  movs r4, #32
 80032b4:	2420      	movs	r4, #32

1:bl fziffer
 80032b6:	f000 f808 	bl	80032ca <Code_838>
  subs r4, #1
 80032ba:	3c01      	subs	r4, #1
  bne 1b
 80032bc:	d1fb      	bne.n	80032b6 <Code_837+0x4>

  pop {r4, pc}
 80032be:	bd10      	pop	{r4, pc}

080032c0 <Dictionary_838>:
 80032c0:	080032e2 	.word	0x080032e2
 80032c4:	66020000 	.word	0x66020000
 80032c8:	23          	.byte	0x23
	...

080032ca <Code_838>:
fziffer: @ ( u -- u )
      @ Insert one more digit into number buffer
@------------------------------------------------------------------------------
  @ Handles parts after decimal point
  @ Idea: Multiply with base, next digit will be shifted into high-part of multiplication result.
  push {lr}
 80032ca:	b500      	push	{lr}
    pushdatos
 80032cc:	f847 6d04 	str.w	r6, [r7, #-4]!
    ldr tos, =base
 80032d0:	4e4d      	ldr	r6, [pc, #308]	; (8003408 <Code_863+0xa>)
    ldr tos, [tos] @ Base
 80032d2:	6836      	ldr	r6, [r6, #0]
    bl um_star     @ ( After-Decimal-Point Base -- Low High )
 80032d4:	f7fd f86c 	bl	80003b0 <Code_51>
    bl digitausgeben @ ( Low=Still-after-decimal-point Character )
 80032d8:	f7ff ff9b 	bl	8003212 <Code_829>
    bl zahlanhaengen @ Add character to number buffer
 80032dc:	f7ff ffc4 	bl	8003268 <Code_832>
  pop {pc}
 80032e0:	bd00      	pop	{pc}

080032e2 <Dictionary_840>:
 80032e2:	32fe      	.short	0x32fe
 80032e4:	00000800 	.word	0x00000800
 80032e8:	2302      	.short	0x2302
 80032ea:	53          	.byte	0x53
	...

080032ec <Code_840>:
alleziffern: @ ( d-Zahl -- d-Zahl=0 )
      @ Fügt alle Ziffern, jedoch mindestens eine,
      @ an den im Aufbau befindlichen String an.
      @ Inserts all digits, at least one, into number buffer.
@------------------------------------------------------------------------------
  push {lr}
 80032ec:	b500      	push	{lr}
1:bl ziffer
 80032ee:	f000 f80a 	bl	8003306 <Code_841>
  cmp tos, #0
 80032f2:	2e00      	cmp	r6, #0
  bne 1b
 80032f4:	d1fb      	bne.n	80032ee <Code_840+0x2>

  ldr r0, [psp]
 80032f6:	6838      	ldr	r0, [r7, #0]
  cmp r0, #0
 80032f8:	2800      	cmp	r0, #0
  bne 1b
 80032fa:	d1f8      	bne.n	80032ee <Code_840+0x2>
  pop {pc}
 80032fc:	bd00      	pop	{pc}

080032fe <Dictionary_841>:
 80032fe:	332a      	.short	0x332a
 8003300:	00000800 	.word	0x00000800
 8003304:	2301      	.short	0x2301

08003306 <Code_841>:
@------------------------------------------------------------------------------
  @ Idea: Divide by base. Remainder is digit, Result is to be handled in next run.
  @ Idee dahinter: Teile durch die Basis.
  @ Bekomme einen Rest, und einen Teil, den ich im nächsten Durchlauf
  @ behandeln muss. Der Rest ist die Ziffer.
  push {lr}
 8003306:	b500      	push	{lr}
    pushdatos
 8003308:	f847 6d04 	str.w	r6, [r7, #-4]!
    ldr tos, =base
 800330c:	4e3e      	ldr	r6, [pc, #248]	; (8003408 <Code_863+0xa>)
    ldr tos, [tos] @ Base-Low
 800330e:	6836      	ldr	r6, [r6, #0]
    pushdaconst 0  @ Base-High
 8003310:	f847 6d04 	str.w	r6, [r7, #-4]!
 8003314:	2600      	movs	r6, #0
    @ ( uL uH BaseL BaseH )
    bl ud_slash_mod
 8003316:	f7fd f92d 	bl	8000574 <Code_98>
    @ ( RemainderL RemainderH uL uH )
    bl dswap
 800331a:	f7fc ff5f 	bl	80001dc <Code_25>
    @ ( uL uH RemainderL RemainderH )
    drop
 800331e:	cf40      	ldmia	r7!, {r6}
    @ ( uL uH RemainderL )
    bl digitausgeben
 8003320:	f7ff ff77 	bl	8003212 <Code_829>
    @ ( uL uH digit )
    bl hold
 8003324:	f7ff ff85 	bl	8003232 <Code_830>
    @ ( uL uH )
  pop {pc}
 8003328:	bd00      	pop	{pc}

0800332a <Dictionary_846>:
 800332a:	333c      	.short	0x333c
 800332c:	00000800 	.word	0x00000800
 8003330:	3c02      	.short	0x3c02
 8003332:	23          	.byte	0x23
	...

08003334 <Code_846>:
@------------------------------------------------------------------------------
  Wortbirne Flag_visible, "<#" @ ( d-Zahl -- d-Zahl )
zifferstringanfang: @ Eröffnet einen neuen Ziffernstring.
                    @ Opens a number string
@------------------------------------------------------------------------------
  ldr r0, =Zahlenpuffer @ Länge löschen, bisherige Länge Null.
 8003334:	4835      	ldr	r0, [pc, #212]	; (800340c <Code_863+0xe>)
  movs r1, #0
 8003336:	2100      	movs	r1, #0
  strb r1, [r0]
 8003338:	7001      	strb	r1, [r0, #0]
  bx lr
 800333a:	4770      	bx	lr

0800333c <Dictionary_847>:
 800333c:	0800334e 	.word	0x0800334e
 8003340:	66020000 	.word	0x66020000
 8003344:	2e          	.byte	0x2e
	...

08003346 <Code_847>:
@------------------------------------------------------------------------------
  Wortbirne Flag_visible, "f."
      @ ( Low High -- )
      @ Prints a s31.32 number
@------------------------------------------------------------------------------
  pushdaconst 32
 8003346:	f847 6d04 	str.w	r6, [r7, #-4]!
 800334a:	2620      	movs	r6, #32
  b.n fdotn
 800334c:	e004      	b.n	8003358 <Code_850>

0800334e <Dictionary_850>:
 800334e:	339c      	.short	0x339c
 8003350:	00000800 	.word	0x00000800
 8003354:	6e2e6603 	.word	0x6e2e6603

08003358 <Code_850>:
  Wortbirne Flag_visible, "f.n"
      @ ( Low High n -- )
      @ Prints a s31.32 number with given number of fractional digits
fdotn:
@------------------------------------------------------------------------------
  push {lr}
 8003358:	b500      	push	{lr}
  push {r4}
 800335a:	b410      	push	{r4}
  popda r4
 800335c:	0034      	movs	r4, r6
 800335e:	cf40      	ldmia	r7!, {r6}

  @ ( Low High -- )
  bl tuck @ ( Sign Low High )
 8003360:	f7fd fa84 	bl	800086c <Code_135>
  bl dabs @ ( Sign uLow uHigh )
 8003364:	f7fc ffed 	bl	8000342 <Code_45>

  pushdaconst 0  @ ( Sign After-decimal-point=uL Before-decimal-point-low=uH Before-decimal-point-high=0 )
 8003368:	f847 6d04 	str.w	r6, [r7, #-4]!
 800336c:	2600      	movs	r6, #0
  bl zifferstringanfang
 800336e:	f7ff ffe1 	bl	8003334 <Code_846>

  bl alleziffern @ Processing of high-part finished. ( Sign uL 0 0 )
 8003372:	f7ff ffbb 	bl	80032ec <Code_840>
  drop @ ( Sign uL 0 )
 8003376:	cf40      	ldmia	r7!, {r6}

  movs tos, #44 @ Add a comma to number buffer ( Sign uL 44 )
 8003378:	262c      	movs	r6, #44	; 0x2c
  bl zahlanhaengen @ ( Sign uL )
 800337a:	f7ff ff75 	bl	8003268 <Code_832>

  cmp r4, #0
 800337e:	2c00      	cmp	r4, #0
  beq 2f
 8003380:	d003      	beq.n	800338a <Code_850+0x32>

1:bl fziffer   @ Processing of fractional parts ( Sign 0 )
 8003382:	f7ff ffa2 	bl	80032ca <Code_838>
  subs r4, #1
 8003386:	3c01      	subs	r4, #1
  bne 1b
 8003388:	d1fb      	bne.n	8003382 <Code_850+0x2a>

2:pop {r4}
 800338a:	bc10      	pop	{r4}
  drop
 800338c:	cf40      	ldmia	r7!, {r6}
  bl vorzeichen
 800338e:	f7ff ff7b 	bl	8003288 <Code_834>

  pushdatos @ Will be removed later
 8003392:	f847 6d04 	str.w	r6, [r7, #-4]!
  pushdatos
 8003396:	f847 6d04 	str.w	r6, [r7, #-4]!
  b.n abschluss_zahlenausgabe
 800339a:	e01c      	b.n	80033d6 <abschluss_zahlenausgabe>

0800339c <Dictionary_858>:
 800339c:	080033b2 	.word	0x080033b2
 80033a0:	75030000 	.word	0x75030000
 80033a4:	2e64      	.short	0x2e64

080033a6 <Code_858>:
@------------------------------------------------------------------------------
  Wortbirne Flag_visible, "ud." @ ( ud -- )
uddot:  @ Prints an unsigned double number
@------------------------------------------------------------------------------
  @ In Forth: <# #S #>
  push {lr}
 80033a6:	b500      	push	{lr}
  bl zifferstringanfang
 80033a8:	f7ff ffc4 	bl	8003334 <Code_846>
  bl alleziffern
 80033ac:	f7ff ff9e 	bl	80032ec <Code_840>
  b.n abschluss_zahlenausgabe
 80033b0:	e011      	b.n	80033d6 <abschluss_zahlenausgabe>

080033b2 <Dictionary_859>:
 80033b2:	33e4      	.short	0x33e4
 80033b4:	00000800 	.word	0x00000800
 80033b8:	6402      	.short	0x6402
 80033ba:	2e          	.byte	0x2e
	...

080033bc <Code_859>:

@------------------------------------------------------------------------------
  Wortbirne Flag_visible, "d." @ ( d -- )
ddot:   @ Prints a signed double number
@------------------------------------------------------------------------------
  push {lr}
 80033bc:	b500      	push	{lr}
  bl tuck
 80033be:	f7fd fa55 	bl	800086c <Code_135>
  bl dabs
 80033c2:	f7fc ffbe 	bl	8000342 <Code_45>

  bl zifferstringanfang
 80033c6:	f7ff ffb5 	bl	8003334 <Code_846>
  bl alleziffern @ ( Sign 0 0 )
 80033ca:	f7ff ff8f 	bl	80032ec <Code_840>
  bl rot
 80033ce:	f7fd fa57 	bl	8000880 <Code_136>
  bl vorzeichen
 80033d2:	f7ff ff59 	bl	8003288 <Code_834>

080033d6 <abschluss_zahlenausgabe>:

abschluss_zahlenausgabe:
  bl zifferstringende
 80033d6:	f7ff ff62 	bl	800329e <Code_836>
  bl stype
 80033da:	f7fe faeb 	bl	80019b4 <Code_374>
  bl space
 80033de:	f7fe fa44 	bl	800186a <Code_342>
  pop {pc}
 80033e2:	bd00      	pop	{pc}

080033e4 <Dictionary_860>:
 80033e4:	080033f6 	.word	0x080033f6
 80033e8:	75020000 	.word	0x75020000
 80033ec:	2e          	.byte	0x2e
	...

080033ee <Code_860>:
      @ ( Zahl -- )
      @ Gibt eine vorzeichenlose Zahl aus.
      @ Prints an unsigned single number
@ -----------------------------------------------------------------------------
udot:
  pushdaconst 0 @ Convert to unsigned double
 80033ee:	f847 6d04 	str.w	r6, [r7, #-4]!
 80033f2:	2600      	movs	r6, #0
  b.n uddot
 80033f4:	e7d7      	b.n	80033a6 <Code_858>

080033f6 <Dictionary_863>:
 80033f6:	3410      	.short	0x3410
 80033f8:	00000800 	.word	0x00000800
 80033fc:	2e01      	.short	0x2e01

080033fe <Code_863>:
  Wortbirne Flag_visible, "." @ ( Zahl -- )
     @ Gibt eine vorzeichenbehaftete Zahl aus.
     @ Prints a signed single number
@ -----------------------------------------------------------------------------
dot:
  pushdatos
 80033fe:	f847 6d04 	str.w	r6, [r7, #-4]!
  movs tos, tos, asr #31    @ s>d - Turn MSB into 0xffffffff or 0x00000000
 8003402:	17f6      	asrs	r6, r6, #31
  b.n ddot
 8003404:	e7da      	b.n	80033bc <Code_859>
 8003406:	0000      	.short	0x0000
  ldr r3, =base
 8003408:	2001fffc 	.word	0x2001fffc
  ldr r0, =Zahlenpuffer
 800340c:	20001028 	.word	0x20001028

08003410 <Dictionary_865>:
 8003410:	08003458 	.word	0x08003458
 8003414:	65080000 	.word	0x65080000
 8003418:	756c6176 	.word	0x756c6176
 800341c:	7461      	.short	0x7461
 800341e:	65          	.byte	0x65
	...

08003420 <Code_865>:
@ Interpreter and optimisations

@ -----------------------------------------------------------------------------
  Wortbirne Flag_visible, "evaluate" @ ( -- )
@ -----------------------------------------------------------------------------
  push {lr}
 8003420:	b500      	push	{lr}
  bl source             @ Save current source
 8003422:	f7fe f9c0 	bl	80017a6 <Code_326>

  @ 2>r
  ldm psp!, {r0}
 8003426:	cf01      	ldmia	r7!, {r0}
  push {r0}
 8003428:	b401      	push	{r0}
  push {tos}
 800342a:	b440      	push	{r6}
  ldm psp!, {tos}
 800342c:	cf40      	ldmia	r7!, {r6}

  ldr r0, =Pufferstand  @ Save >in and set to zero
 800342e:	48d9      	ldr	r0, [pc, #868]	; (8003794 <quit_innenschleife+0x16>)
  ldr r1, [r0]
 8003430:	6801      	ldr	r1, [r0, #0]
  push {r1}
 8003432:	b402      	push	{r1}
  movs r1, #0
 8003434:	2100      	movs	r1, #0
  str r1, [r0]
 8003436:	6001      	str	r1, [r0, #0]

  bl setsource          @ Set new source
 8003438:	f7fe f9a8 	bl	800178c <Code_324>
  bl interpret          @ Interpret
 800343c:	f000 f814 	bl	8003468 <Code_867>

  ldr r0, =Pufferstand  @ Restore >in
 8003440:	48d4      	ldr	r0, [pc, #848]	; (8003794 <quit_innenschleife+0x16>)
  pop {r1}
 8003442:	bc02      	pop	{r1}
  str r1, [r0]
 8003444:	6001      	str	r1, [r0, #0]

  @ 2r>
  pushdatos
 8003446:	f847 6d04 	str.w	r6, [r7, #-4]!
  pop {tos}
 800344a:	bc40      	pop	{r6}
  pop {r0}
 800344c:	bc01      	pop	{r0}
  subs psp, #4
 800344e:	3f04      	subs	r7, #4
  str r0, [psp]
 8003450:	6038      	str	r0, [r7, #0]

  bl setsource          @ Restore old source
 8003452:	f7fe f99b 	bl	800178c <Code_324>

  pop {pc}
 8003456:	bd00      	pop	{pc}

08003458 <Dictionary_867>:
 8003458:	0800372a 	.word	0x0800372a
 800345c:	69090000 	.word	0x69090000
 8003460:	7265746e 	.word	0x7265746e
 8003464:	74657270 	.word	0x74657270

08003468 <Code_867>:

@ -----------------------------------------------------------------------------
  Wortbirne Flag_visible, "interpret" @ ( -- )
interpret:
@ -----------------------------------------------------------------------------
  push {r4, r5, lr}
 8003468:	b530      	push	{r4, r5, lr}
  @ Stay in loop as long token can fetch something from input buffer.

  @ Probe des Datenstackpointers.
  @ Check pointer for datastack.

  ldr r0, =datenstackanfang   @ Stacks fangen oben an und wachsen nach unten.
 800346a:	48cb      	ldr	r0, [pc, #812]	; (8003798 <quit_innenschleife+0x1a>)
  cmp psp, r0                 @ Wenn die Adresse kleiner oder gleich der Anfangsadresse ist, ist alles okay.
 800346c:	4287      	cmp	r7, r0
  bls.n 2f
 800346e:	d90b      	bls.n	8003488 <Code_867+0x20>
    Fehler_Quit_n "Stack underflow"
 8003470:	f7fe fa4c 	bl	800190c <dotgaensefuesschen>
 8003474:	61745310 	.word	0x61745310
 8003478:	75206b63 	.word	0x75206b63
 800347c:	7265646e 	.word	0x7265646e
 8003480:	776f6c66 	.word	0x776f6c66
 8003484:	0a          	.byte	0x0a
 8003485:	00          	.byte	0x00
 8003486:	e164      	b.n	8003752 <Code_926>

2:ldr r0, =datenstackende     @ Solange der Stackzeiger oberhalb des Endes liegt, ist alles okay.
 8003488:	48c4      	ldr	r0, [pc, #784]	; (800379c <quit_innenschleife+0x1e>)
  cmp psp, r0
 800348a:	4287      	cmp	r7, r0
  bhs.n 3f
 800348c:	d20a      	bcs.n	80034a4 <Code_867+0x3c>
    Fehler_Quit_N "Stack overflow"
 800348e:	f7fe fa3d 	bl	800190c <dotgaensefuesschen>
 8003492:	530f      	.short	0x530f
 8003494:	6b636174 	.word	0x6b636174
 8003498:	65766f20 	.word	0x65766f20
 800349c:	6f6c6672 	.word	0x6f6c6672
 80034a0:	0a77      	.short	0x0a77
 80034a2:	e156      	b.n	8003752 <Code_926>

@ -----------------------------------------------------------------------------

  @ Konstantenfaltungszeiger setzen, falls er das noch nicht ist.
  @ Set Constant-Folding-Pointer
  ldr r4, =konstantenfaltungszeiger
 80034a4:	4cbe      	ldr	r4, [pc, #760]	; (80037a0 <quit_innenschleife+0x22>)
  ldr r5, [r4]
 80034a6:	6825      	ldr	r5, [r4, #0]
  cmp r5, #0
 80034a8:	2d00      	cmp	r5, #0
  bne.n 3f
 80034aa:	d101      	bne.n	80034b0 <Code_867+0x48>
    @ Konstantenfaltungszeiger setzen.
    @ If not set yet, set it now.
    movs r5, psp
 80034ac:	003d      	movs	r5, r7
    str r5, [r4]
 80034ae:	6025      	str	r5, [r4, #0]
3:

@ -----------------------------------------------------------------------------
  bl token
 80034b0:	f7ff fdc3 	bl	800303a <Code_797>
  @ ( Address Length )

  @ Prüfe, ob der String leer ist  Check if token is empty - that designates an empty input buffer.
  cmp tos, #0
 80034b4:	2e00      	cmp	r6, #0
  bne.n 2f
 80034b6:	d102      	bne.n	80034be <Code_867+0x56>
    ddrop
 80034b8:	3704      	adds	r7, #4
 80034ba:	cf40      	ldmia	r7!, {r6}
    pop {r4, r5, pc}
 80034bc:	bd30      	pop	{r4, r5, pc}

  @ Registerkarte:
  @  r4: Adresse des Konstantenfaltungszeigers  Address of constant folding pointer
  @  r5: Konstantenfaltungszeiger               Constant folding pointer

  ddup
 80034be:	6838      	ldr	r0, [r7, #0]
 80034c0:	f847 6d04 	str.w	r6, [r7, #-4]!
 80034c4:	3f04      	subs	r7, #4
 80034c6:	6038      	str	r0, [r7, #0]
  bl find @ Probe, ob es sich um ein Wort aus dem Dictionary handelt:  Attemp to find token in dictionary.
 80034c8:	f7ff fa76 	bl	80029b8 <Code_641>
  @ ( Token-Addr Token-Length Addr Flags )

  popda r1 @ Flags
 80034cc:	0031      	movs	r1, r6
 80034ce:	cf40      	ldmia	r7!, {r6}
  popda r2 @ Einsprungadresse
 80034d0:	0032      	movs	r2, r6
 80034d2:	cf40      	ldmia	r7!, {r6}
  @  r1: Flags                                  Flags
  @  r2: Einsprungadresse                       Code entry point
  @  r4: Adresse des Konstantenfaltungszeigers  Address of constant folding pointer
  @  r5: Konstantenfaltungszeiger               Constant folding pointer

  cmp r2, #0
 80034d4:	2a00      	cmp	r2, #0
  bne.n 4f
 80034d6:	d119      	bne.n	800350c <not_found_addr_r0_len_r1+0x24>
    @ Nicht gefunden. Ein Fall für Number.
    @ Entry-Address is zero if not found ! Note that Flags have very special meanings in Mecrisp !

    ldr r0, [psp]
 80034d8:	6838      	ldr	r0, [r7, #0]
    movs r1, tos
 80034da:	0031      	movs	r1, r6

    bl number
 80034dc:	f7ff fe14 	bl	8003108 <Code_802>
  @ Number gives back ( 0 ) or ( x 1 ).
  @ Zero means: Not recognized.
  @ Note that literals actually are not written/compiled here.
  @ They are simply placed on stack and constant folding takes care of them later.

    popda r2   @ Flag von Number holen
 80034e0:	0032      	movs	r2, r6
 80034e2:	cf40      	ldmia	r7!, {r6}
    cmp r2, #0 @ Did number recognize the string ?
 80034e4:	2a00      	cmp	r2, #0
    bne.n 1b   @ Zahl gefunden, alles gut. Interpretschleife fortsetzen.  Finished.
 80034e6:	d1c0      	bne.n	800346a <Code_867+0x2>

080034e8 <not_found_addr_r0_len_r1>:

    @ Number mochte das Token auch nicht.
not_found_addr_r0_len_r1:
    pushda r0
 80034e8:	f847 6d04 	str.w	r6, [r7, #-4]!
 80034ec:	0006      	movs	r6, r0
    pushda r1
 80034ee:	f847 6d04 	str.w	r6, [r7, #-4]!
 80034f2:	000e      	movs	r6, r1
    bl stype
 80034f4:	f7fe fa5e 	bl	80019b4 <Code_374>
    Fehler_Quit_n " not found."
 80034f8:	f7fe fa08 	bl	800190c <dotgaensefuesschen>
 80034fc:	6f6e200c 	.word	0x6f6e200c
 8003500:	6f662074 	.word	0x6f662074
 8003504:	2e646e75 	.word	0x2e646e75
 8003508:	0a          	.byte	0x0a
 8003509:	00          	.byte	0x00
 800350a:	e122      	b.n	8003752 <Code_926>
  @  r1: Flags                                  Flags
  @  r2: Einsprungadresse                       Code entry point
  @  r4: Adresse des Konstantenfaltungszeigers  Address of constant folding pointer
  @  r5: Konstantenfaltungszeiger               Constant folding pointer

  ldr r3, =state
 800350c:	4ba5      	ldr	r3, [pc, #660]	; (80037a4 <quit_innenschleife+0x26>)
  ldr r3, [r3]
 800350e:	681b      	ldr	r3, [r3, #0]
  cmp r3, #0
 8003510:	2b00      	cmp	r3, #0
  bne.n 5f
 8003512:	d11d      	bne.n	8003550 <.ausfuehren+0x12>
    @ Im Ausführzustand.  Execute.
    movs r5, #0   @ Konstantenfaltungszeiger löschen  Clear constant folding pointer
 8003514:	2500      	movs	r5, #0
    str r5, [r4]  @ Do not collect literals for folding in execute mode. They simply stay on stack.
 8003516:	6025      	str	r5, [r4, #0]

    movs r3, #Flag_immediate_compileonly & ~Flag_visible
 8003518:	2330      	movs	r3, #48	; 0x30
    ands r3, r1
 800351a:	400b      	ands	r3, r1
    cmp r3, #Flag_immediate_compileonly & ~Flag_visible
 800351c:	2b30      	cmp	r3, #48	; 0x30
    bne.n .ausfuehren
 800351e:	d10e      	bne.n	800353e <.ausfuehren>
      bl stype
 8003520:	f7fe fa48 	bl	80019b4 <Code_374>
      Fehler_Quit_n " is compile-only."
 8003524:	f7fe f9f2 	bl	800190c <dotgaensefuesschen>
 8003528:	73692012 	.word	0x73692012
 800352c:	6d6f6320 	.word	0x6d6f6320
 8003530:	656c6970 	.word	0x656c6970
 8003534:	6c6e6f2d 	.word	0x6c6e6f2d
 8003538:	2e79      	.short	0x2e79
 800353a:	0a          	.byte	0x0a
 800353b:	00          	.byte	0x00
 800353c:	e109      	b.n	8003752 <Code_926>

0800353e <.ausfuehren>:

.ausfuehren:
    ddrop
 800353e:	3704      	adds	r7, #4
 8003540:	cf40      	ldmia	r7!, {r6}
    pushda r2    @ Adresse zum Ausführen   Code entry point
 8003542:	f847 6d04 	str.w	r6, [r7, #-4]!
 8003546:	0016      	movs	r6, r2
    bl execute   @                         Execute it
 8003548:	f7fe fdee 	bl	8002128 <Code_491>
    bl 1b @ Interpretschleife fortsetzen.  Finished.
 800354c:	f7ff ff8d 	bl	800346a <Code_867+0x2>
  @  r4: Adresse des Konstantenfaltungszeigers.  Address of constant folding pointer
  @  r5: Konstantenfaltungszeiger                Constant folding pointer

@ -----------------------------------------------------------------------------
5:@ Im Kompilierzustand.  In compile state.
    ddrop
 8003550:	3704      	adds	r7, #4
 8003552:	cf40      	ldmia	r7!, {r6}
    @ Prüfe das Ramallot-Flag, das automatisch 0-faltbar bedeutet:
    @ Ramallot-Words always are 0-foldable !
    @ Check this first, as Ramallot is set together with foldability,
    @ but the meaning of the lower 4 bits is different.

    movs r0, #Flag_ramallot & ~Flag_visible
 8003554:	2080      	movs	r0, #128	; 0x80
    ands r0, r1 @ Flagfeld auf Faltbarkeit hin prüfen
 8003556:	4008      	ands	r0, r1
    bne.n .interpret_faltoptimierung
 8003558:	d10e      	bne.n	8003578 <.interpret_faltoptimierung>

    @ Bestimme die Anzahl der zur Faltung bereitliegenden Konstanten:
    @ Calculate number of folding constants available.

    subs r3, r5, psp @ Konstantenfüllstandszeiger - Aktuellen Stackpointer
 800355a:	1beb      	subs	r3, r5, r7
    lsrs r3, #2      @ Durch 4 teilen  Divide by 4 to get number of stack elements.
 800355c:	089b      	lsrs	r3, r3, #2
    @ Number of folding constants now available in r3.

    @ Prüfe die Faltbarkeit des aktuellen Tokens:
    @ Check for foldability.

    movs r0, #Flag_foldable & ~Flag_visible
 800355e:	2040      	movs	r0, #64	; 0x40
    ands r0, r1 @ Flagfeld auf Faltbarkeit hin prüfen
 8003560:	4008      	ands	r0, r1
    beq.n .konstantenschleife
 8003562:	d00f      	beq.n	8003584 <.konstantenschleife>

      @ Check for opcodability.
      movs r0, #Flag_opcodable & ~Flag_visible
 8003564:	2008      	movs	r0, #8
      ands r0, r1
 8003566:	4008      	ands	r0, r1
      beq.n .interpret_genugkonstanten @ Flag is set
 8003568:	d002      	beq.n	8003570 <.interpret_genugkonstanten>
      cmp r3, #0 @ And at least one constant is available for folding.
 800356a:	2b00      	cmp	r3, #0
      beq.n .interpret_genugkonstanten
 800356c:	d000      	beq.n	8003570 <.interpret_genugkonstanten>
        b.n .interpret_opcodierbar
 800356e:	e01d      	b.n	80035ac <.interpret_opcodierbar>

08003570 <.interpret_genugkonstanten>:

.interpret_genugkonstanten: @ Not opcodable. Maybe foldable.
      @ Prüfe, ob genug Konstanten da sind:
      @ How many constants are necessary to fold this word ?
      movs r0, #0x0F
 8003570:	200f      	movs	r0, #15
      ands r0, r1 @ Zahl der benötigten Konstanten maskieren
 8003572:	4008      	ands	r0, r1

      cmp r3, r0
 8003574:	4283      	cmp	r3, r0
      blo.n .konstantenschleife
 8003576:	d305      	bcc.n	8003584 <.konstantenschleife>

08003578 <.interpret_faltoptimierung>:

.interpret_faltoptimierung:
        @ Do folding by running the definition.
        @ Note that Constant-Folding-Pointer is already set to keep track of results calculated.
        pushda r2 @ Einsprungadresse bereitlegen  Code entry point
 8003578:	f847 6d04 	str.w	r6, [r7, #-4]!
 800357c:	0016      	movs	r6, r2
        bl execute @ Durch Ausführung falten      Fold by executing
 800357e:	f7fe fdd3 	bl	8002128 <Code_491>
        b.n 1b @ Interpretschleife weitermachen     Finished.
 8003582:	e772      	b.n	800346a <Code_867+0x2>

08003584 <.konstantenschleife>:

    @ No optimizations possible. Compile the normal way.
    @ Write all folding constants left into dictionary.

.konstantenschleife:
    bl konstantenschreiben
 8003584:	f000 f8be 	bl	8003704 <konstantenschreiben>

@ -----------------------------------------------------------------------------
  @ Classic compilation.
  pushda r2 @ Adresse zum klassischen Bearbeiten. Put code entry point on datastack.
 8003588:	f847 6d04 	str.w	r6, [r7, #-4]!
 800358c:	0016      	movs	r6, r2

  movs r2, #Flag_immediate & ~Flag_visible
 800358e:	2210      	movs	r2, #16
  ands r2, r1
 8003590:	400a      	ands	r2, r1
  beq.n 6f
 8003592:	d002      	beq.n	800359a <.konstantenschleife+0x16>
    @ Es ist immediate. Immer ausführen. Always execute immediate definitions.
    bl execute @ Ausführen.
 8003594:	f7fe fdc8 	bl	8002128 <Code_491>
    b.n 1b @ Zurück in die Interpret-Schleife.  Finished.
 8003598:	e767      	b.n	800346a <Code_867+0x2>

6:movs r2, #Flag_inline & ~Flag_visible
 800359a:	2220      	movs	r2, #32
  ands r2, r1
 800359c:	400a      	ands	r2, r1
  beq.n 7f
 800359e:	d002      	beq.n	80035a6 <.konstantenschleife+0x22>

  bl inlinekomma @ Direkt einfügen.        Inline the code
 80035a0:	f7fe fd1e 	bl	8001fe0 <Code_469>
  b.n 1b @ Zurück in die Interpret-Schleife  Finished.
 80035a4:	e761      	b.n	800346a <Code_867+0x2>

7:bl callkomma @ Klassisch einkompilieren  Simply compile a BL or Call.
 80035a6:	f7fe fc26 	bl	8001df6 <Code_435>
  b.n 1b @ Zurück in die Interpret-Schleife  Finished.
 80035aa:	e75e      	b.n	800346a <Code_867+0x2>

080035ac <.interpret_opcodierbar>:
  @ Flags of Definition in r1
  @ Entry-Point of Definition in r2
  @ Number of folding constants available in r3, at least one

  @ Decide on the different cases. As I don't return, I can change Flag register freely.
  movs r0, #7 @ Mask for opcoding cases
 80035ac:	2007      	movs	r0, #7
  ands r1, r0
 80035ae:	4001      	ands	r1, r0

  @ Most opcodable cases have special opcodes at the end of the definition.
  @ Prepare this place to be available in r0
  movs r0, r2 @ Entry point
 80035b0:	0010      	movs	r0, r2
  bl suchedefinitionsende @ Search for end of Definition
 80035b2:	f7fe fd2c 	bl	800200e <suchedefinitionsende>

  cmp r1, #1
 80035b6:	2901      	cmp	r1, #1
  bne.n .interpret_opcodierbar_rechenlogik
 80035b8:	d11f      	bne.n	80035fa <.interpret_opcodierbar_rechenlogik>
    @------------------------------------------------------------------------------
    @ Plus and Minus
    @ Available as short Opcode on all Cores

    cmp r3, #1
 80035ba:	2b01      	cmp	r3, #1
    bne.n .interpret_faltoptimierung @ Opcode only with exactly one constant. Do folding with two constants or more in this case !
 80035bc:	d1dc      	bne.n	8003578 <.interpret_faltoptimierung>
    @ Exactly one constant.

    @ Is constant small enough to fit in one Byte ?
    movs r1, #0xFF  @ Mask for 8 Bits
 80035be:	21ff      	movs	r1, #255	; 0xff
    ands r1, tos
 80035c0:	4031      	ands	r1, r6
    cmp r1, tos
 80035c2:	42b1      	cmp	r1, r6
    bne.n 2f
 80035c4:	d104      	bne.n	80035d0 <.interpret_opcodierbar+0x24>
    @ Equal ? Constant fits in 8 Bits.

      ldrh r0, [r0, #2] @ Fetch Opcode, two more for Register-Opcode
 80035c6:	8840      	ldrh	r0, [r0, #2]
      orrs tos, r0 @ Put constant into Opcode
 80035c8:	4306      	orrs	r6, r0
      bl hkomma
 80035ca:	f7fe ff1b 	bl	8002404 <Code_544>
      b.n 1b @ Finished.
 80035ce:	e74c      	b.n	800346a <Code_867+0x2>

2:

    .ifndef m0core
      @ M3/M4 cores offer additional opcodes with 12-bit encoded constants.
      bl twelvebitencoding
 80035d0:	f7fe fb00 	bl	8001bd4 <Code_414>

      cmp tos, #0
 80035d4:	2e00      	cmp	r6, #0
      drop   @ Preserves Flags !
 80035d6:	cf40      	ldmia	r7!, {r6}
      beq 3f
 80035d8:	d004      	beq.n	80035e4 <.interpret_opcodieren_ueber_r0>
        @ Encoding of constant within 12 bits is possible. Generate Opcode !
        ldr r0, [r0, #4] @ Fetch 32-Bit-Opcode, this is possible without alignment here,
 80035da:	6840      	ldr	r0, [r0, #4]
                         @ Four more for M3/M4-Opcodes
        orrs tos, r0
 80035dc:	4306      	orrs	r6, r0
        bl reversekomma
 80035de:	f7fe ff39 	bl	8002454 <Code_553>
        b.n 1b @ Finished.
 80035e2:	e742      	b.n	800346a <Code_867+0x2>

080035e4 <.interpret_opcodieren_ueber_r0>:
3:
    .endif

.interpret_opcodieren_ueber_r0:
    @ Large constant without short encoding possibility. Put it in register first.
    pushdaconst 0
 80035e4:	f847 6d04 	str.w	r6, [r7, #-4]!
 80035e8:	2600      	movs	r6, #0
    bl registerliteralkomma
 80035ea:	f7fe fba7 	bl	8001d3c <Code_423>

    pushdatos
 80035ee:	f847 6d04 	str.w	r6, [r7, #-4]!
    ldrh tos, [r0] @ Fetch Opcode
 80035f2:	8806      	ldrh	r6, [r0, #0]
    bl hkomma
 80035f4:	f7fe ff06 	bl	8002404 <Code_544>
    b.n 1b @ Finished.
 80035f8:	e737      	b.n	800346a <Code_867+0x2>

080035fa <.interpret_opcodierbar_rechenlogik>:


.interpret_opcodierbar_rechenlogik:
  cmp r1, #2
 80035fa:	2902      	cmp	r1, #2
  bne.n .interpret_opcodierbar_gleichungleich
 80035fc:	d102      	bne.n	8003604 <.interpret_opcodierbar_gleichungleich>
    @------------------------------------------------------------------------------
    @ Calculus and Logic (Rechenlogik)
    @ M0 only supports logic with register operands.

    cmp r3, #1
 80035fe:	2b01      	cmp	r3, #1
    bne.n .interpret_faltoptimierung @ Opcode only with exactly one constant. Do folding with two constants or more in this case !
 8003600:	d1ba      	bne.n	8003578 <.interpret_faltoptimierung>
    @ Exactly one constant. M0 needs all constant sizes available in registers.
    b.n .interpret_opcodieren_ueber_r0 @ Simply reuse code as for plus and minus.
 8003602:	e7ef      	b.n	80035e4 <.interpret_opcodieren_ueber_r0>

08003604 <.interpret_opcodierbar_gleichungleich>:


.interpret_opcodierbar_gleichungleich:
  cmp r1, #3
 8003604:	2903      	cmp	r1, #3
  bne.n .interpret_opcodierbar_schieben
 8003606:	d127      	bne.n	8003658 <.interpret_opcodierbar_schieben>
    @------------------------------------------------------------------------------
    @ Equal and Unequal.

    cmp r3, #1
 8003608:	2b01      	cmp	r3, #1
    bne.n .interpret_faltoptimierung @ Opcode only with exactly one constant. Do folding with two constants or more in this case !
 800360a:	d1b5      	bne.n	8003578 <.interpret_faltoptimierung>
    @ Exactly one constant.

    @ Is constant small enough to fit in one Byte ?
    movs r1, #0xFF  @ Mask for 8 Bits
 800360c:	21ff      	movs	r1, #255	; 0xff
    ands r1, tos
 800360e:	4031      	ands	r1, r6
    cmp r1, tos
 8003610:	42b1      	cmp	r1, r6
    bne.n 2f
 8003612:	d10b      	bne.n	800362c <.interpret_opcodierbar_gleichungleich+0x28>
    @ Equal ? Constant fits in 8 Bits.

      ldr r1, =0x3E00 @ Opcode subs r6, #0
 8003614:	f44f 5178 	mov.w	r1, #15872	; 0x3e00
      orrs tos, r1
 8003618:	430e      	orrs	r6, r1
      bl hkomma
 800361a:	f7fe fef3 	bl	8002404 <Code_544>

4:    adds r2, #4 @ Skip first two instructions of definition
 800361e:	3204      	adds	r2, #4
      pushda r2
 8003620:	f847 6d04 	str.w	r6, [r7, #-4]!
 8003624:	0016      	movs	r6, r2
      bl inlinekomma
 8003626:	f7fe fcdb 	bl	8001fe0 <Code_469>
      b.n 1b @ Finished.
 800362a:	e71e      	b.n	800346a <Code_867+0x2>

2:

    .ifndef m0core
      @ M3/M4 cores offer additional opcodes with 12-bit encoded constants.
      bl twelvebitencoding
 800362c:	f7fe fad2 	bl	8001bd4 <Code_414>

      cmp tos, #0
 8003630:	2e00      	cmp	r6, #0
      drop   @ Preserves Flags !
 8003632:	cf40      	ldmia	r7!, {r6}
      beq 3f
 8003634:	d004      	beq.n	8003640 <.interpret_opcodierbar_gleichungleich+0x3c>
        @ Encoding of constant within 12 bits is possible.
        ldr r1, =0xF1B60600 @ Opcode subs tos, tos, #imm12
 8003636:	495c      	ldr	r1, [pc, #368]	; (80037a8 <quit_innenschleife+0x2a>)
        orrs tos, r1
 8003638:	430e      	orrs	r6, r1
        bl reversekomma
 800363a:	f7fe ff0b 	bl	8002454 <Code_553>
        b.n 4b
 800363e:	e7ee      	b.n	800361e <.interpret_opcodierbar_gleichungleich+0x1a>
3:
    .endif

    @ Larger constant. Put it in register first.
    pushdaconst 0
 8003640:	f847 6d04 	str.w	r6, [r7, #-4]!
 8003644:	2600      	movs	r6, #0
    bl registerliteralkomma
 8003646:	f7fe fb79 	bl	8001d3c <Code_423>

    adds r2, #2 @ Skip first instruction of definition
 800364a:	3202      	adds	r2, #2
    pushda r2
 800364c:	f847 6d04 	str.w	r6, [r7, #-4]!
 8003650:	0016      	movs	r6, r2
    bl inlinekomma
 8003652:	f7fe fcc5 	bl	8001fe0 <Code_469>
    b.n 1b @ Finished.
 8003656:	e708      	b.n	800346a <Code_867+0x2>

08003658 <.interpret_opcodierbar_schieben>:


.interpret_opcodierbar_schieben:
  cmp r1, #4
 8003658:	2904      	cmp	r1, #4
  bne.n .interpret_opcodierbar_speicherschreiben
 800365a:	d118      	bne.n	800368e <.interpret_opcodierbar_speicherschreiben>
    @------------------------------------------------------------------------------
    @ Logical Shifts.

    cmp r3, #1
 800365c:	2b01      	cmp	r3, #1
    bne.n .interpret_faltoptimierung @ Opcode only with exactly one constant. Do folding with two constants or more in this case !
 800365e:	d18b      	bne.n	8003578 <.interpret_faltoptimierung>
    @ Exactly one constant.

    popda r3 @ Fetch constant
 8003660:	0033      	movs	r3, r6
 8003662:	cf40      	ldmia	r7!, {r6}
    cmp r3, #0
 8003664:	2b00      	cmp	r3, #0
    bne.n 2f
 8003666:	d100      	bne.n	800366a <.interpret_opcodierbar_schieben+0x12>
    b.n 1b @ Shift by zero ? No Opcode to generate. Finished !
 8003668:	e6ff      	b.n	800346a <Code_867+0x2>

2:  movs r2, #0x1F @ 5 Bits
 800366a:	221f      	movs	r2, #31
    ands r2, r3
 800366c:	401a      	ands	r2, r3
    cmp r2, r3 @ Does shift fit in 5 Bits ?
 800366e:	429a      	cmp	r2, r3
    beq.n 3f
 8003670:	d005      	beq.n	800367e <.interpret_opcodierbar_schieben+0x26>
      @ Shift more than 31 Places - Zero out TOS or replace by an asrs tos, #31 opcode:
      pushdatos
 8003672:	f847 6d04 	str.w	r6, [r7, #-4]!
      ldrh tos, [r0, #2] @ Fetch next opcode
 8003676:	8846      	ldrh	r6, [r0, #2]
      bl hkomma
 8003678:	f7fe fec4 	bl	8002404 <Code_544>
      b.n 1b @ Finished.
 800367c:	e6f5      	b.n	800346a <Code_867+0x2>

3:  pushdatos
 800367e:	f847 6d04 	str.w	r6, [r7, #-4]!
    ldrh tos, [r0] @ Fetch Opcode
 8003682:	8806      	ldrh	r6, [r0, #0]
    lsls r3, #6  @ Shift places accordingly
 8003684:	019b      	lsls	r3, r3, #6
    orrs tos, r3  @ Build shift opcode
 8003686:	431e      	orrs	r6, r3
    bl hkomma
 8003688:	f7fe febc 	bl	8002404 <Code_544>
    b.n 1b @ Finished.
 800368c:	e6ed      	b.n	800346a <Code_867+0x2>

0800368e <.interpret_opcodierbar_speicherschreiben>:


.interpret_opcodierbar_speicherschreiben:
  cmp r1, #5
 800368e:	2905      	cmp	r1, #5
  bne.n .interpret_opcodierbar_andere
 8003690:	d124      	bne.n	80036dc <.interpret_opcodierbar_andere>
    @------------------------------------------------------------------------------
    @ Write memory

    cmp r3, #1
 8003692:	2b01      	cmp	r3, #1
    bne.n 2f @ Exactly one constant
 8003694:	d110      	bne.n	80036b8 <.interpret_opcodierbar_speicherschreiben+0x2a>

    pushdaconst 0
 8003696:	f847 6d04 	str.w	r6, [r7, #-4]!
 800369a:	2600      	movs	r6, #0
    bl registerliteralkomma
 800369c:	f7fe fb4e 	bl	8001d3c <Code_423>

    pushda r0
 80036a0:	f847 6d04 	str.w	r6, [r7, #-4]!
 80036a4:	0006      	movs	r6, r0
    bl inlinekomma
 80036a6:	f7fe fc9b 	bl	8001fe0 <Code_469>

    @ Compile Drop-Opcode
    pushdaconstw 0xcf40 @ Opcode for ldmia r7!, {r6}
 80036aa:	f847 6d04 	str.w	r6, [r7, #-4]!
 80036ae:	f64c 7640 	movw	r6, #53056	; 0xcf40
    bl hkomma
 80036b2:	f7fe fea7 	bl	8002404 <Code_544>
    b.n 1b @ Finished.
 80036b6:	e6d8      	b.n	800346a <Code_867+0x2>

2:  @ Two or more constants.
    pushdaconst 0
 80036b8:	f847 6d04 	str.w	r6, [r7, #-4]!
 80036bc:	2600      	movs	r6, #0
    bl registerliteralkomma
 80036be:	f7fe fb3d 	bl	8001d3c <Code_423>

    pushdaconst 1
 80036c2:	f847 6d04 	str.w	r6, [r7, #-4]!
 80036c6:	2601      	movs	r6, #1
    bl registerliteralkomma
 80036c8:	f7fe fb38 	bl	8001d3c <Code_423>

    bl suchedefinitionsende
 80036cc:	f7fe fc9f 	bl	800200e <suchedefinitionsende>

    pushda r0
 80036d0:	f847 6d04 	str.w	r6, [r7, #-4]!
 80036d4:	0006      	movs	r6, r0
    bl inlinekomma
 80036d6:	f7fe fc83 	bl	8001fe0 <Code_469>
    b.n 1b @ Finished.
 80036da:	e6c6      	b.n	800346a <Code_867+0x2>

080036dc <.interpret_opcodierbar_andere>:

  .ifndef m0core @ This is for M3/M4 only
  @------------------------------------------------------------------------------
  @ Check for architecture-specific special cases:

  cmp r1, #6
 80036dc:	2906      	cmp	r1, #6
  bne.n 2f
 80036de:	d10e      	bne.n	80036fe <.interpret_opcodierbar_andere+0x22>
    @------------------------------------------------------------------------------
    @ Logic with special opcodings available on M3/M4 only
    cmp r3, #1
 80036e0:	2b01      	cmp	r3, #1
    bne .interpret_faltoptimierung @ Opcode only with exactly one constant. Do folding with two constants or more in this case !
 80036e2:	f47f af49 	bne.w	8003578 <.interpret_faltoptimierung>

    @ Check if constant available can be encoded as 12-bit-bitmask
    bl twelvebitencoding
 80036e6:	f7fe fa75 	bl	8001bd4 <Code_414>

    cmp tos, #0
 80036ea:	2e00      	cmp	r6, #0
    drop   @ Preserves Flags !
 80036ec:	cf40      	ldmia	r7!, {r6}
    beq .interpret_opcodieren_ueber_r0 @ Simply reuse code as for plus and minus.
 80036ee:	f43f af79 	beq.w	80035e4 <.interpret_opcodieren_ueber_r0>

      @ 12-bit-encoding is possible. Generate the opcode :-)

      ldr r0, [r0, #2] @ Fetch 32-Bit Thumb-2 Opcode, this can be done on M3/M4 without alignment
 80036f2:	f8d0 0002 	ldr.w	r0, [r0, #2]
                   @ Two more for the advanced M3-Opcode
      orrs tos, r0
 80036f6:	4306      	orrs	r6, r0
      bl reversekomma
 80036f8:	f7fe feac 	bl	8002454 <Code_553>
      b.n 1b @ Finished.
 80036fc:	e6b5      	b.n	800346a <Code_867+0x2>

  @------------------------------------------------------------------------------
  @ Special cases that do not have their own handling in interpret.
  @ They have their own handlers at the end of definition that is called here.

  adds r0, #1 @ One more for Thumb
 80036fe:	3001      	adds	r0, #1
  blx r0
 8003700:	4780      	blx	r0
  b.n 1b @ Finished.
 8003702:	e6b2      	b.n	800346a <Code_867+0x2>

08003704 <konstantenschreiben>:


@ -----------------------------------------------------------------------------
konstantenschreiben: @ Special internal entry point with register dependencies.
@ -----------------------------------------------------------------------------
    push {lr}
 8003704:	b500      	push	{lr}
    cmp r3, #0   @ Null Konstanten liegen bereit ? Zero constants available ?
 8003706:	2b00      	cmp	r3, #0
    beq.n 7f     @ Dann ist nichts zu tun.         Nothing to write.
 8003708:	d00c      	beq.n	8003724 <.konstanteninnenschleife+0x1a>

0800370a <.konstanteninnenschleife>:

.konstanteninnenschleife:
    @ Schleife über r5 :-)
    @ Loop for writing all folding constants left.
    subs r3, #1 @ Weil Pick das oberste Element mit Null addressiert.
 800370a:	3b01      	subs	r3, #1
    .ifdef m0core
    pushdatos
    lsls tos, r3, #2
    ldr tos, [psp, tos]
    .else
    pushda r3
 800370c:	f847 6d04 	str.w	r6, [r7, #-4]!
 8003710:	001e      	movs	r6, r3
    ldr tos, [psp, tos, lsl #2] @ pick
 8003712:	f857 6026 	ldr.w	r6, [r7, r6, lsl #2]
    .endif

    bl literalkomma
 8003716:	f7fe fba3 	bl	8001e60 <Code_440>

    cmp r3, #0
 800371a:	2b00      	cmp	r3, #0
    bne.n .konstanteninnenschleife
 800371c:	d1f5      	bne.n	800370a <.konstanteninnenschleife>

    @ Die geschriebenen Konstanten herunterwerfen.
    @ Drop constants written.
    subs r5, #4  @ TOS wurde beim drauflegen der Konstanten gesichert.
 800371e:	3d04      	subs	r5, #4
    movs psp, r5  @ Pointer zurückholen
 8003720:	002f      	movs	r7, r5
    drop         @ Das alte TOS aus seinem Platz auf dem Stack zurückholen.
 8003722:	cf40      	ldmia	r7!, {r6}

7:movs r5, #0   @ Konstantenfaltungszeiger löschen  Clear constant folding pointer.
 8003724:	2500      	movs	r5, #0
  str r5, [r4]
 8003726:	6025      	str	r5, [r4, #0]
  pop {pc}
 8003728:	bd00      	pop	{pc}

0800372a <Dictionary_923>:
 800372a:	3746      	.short	0x3746
 800372c:	00810800 	.word	0x00810800
 8003730:	6f6f6809 	.word	0x6f6f6809
 8003734:	75712d6b 	.word	0x75712d6b
 8003738:	7469      	.short	0x7469

0800373a <Code_923>:

@------------------------------------------------------------------------------
  Wortbirne Flag_visible|Flag_variable, "hook-quit" @ ( -- addr )
  CoreVariable hook_quit
@------------------------------------------------------------------------------
  pushdatos
 800373a:	f847 6d04 	str.w	r6, [r7, #-4]!
  ldr tos, =hook_quit
 800373e:	4e1b      	ldr	r6, [pc, #108]	; (80037ac <quit_innenschleife+0x2e>)
  bx lr
 8003740:	4770      	bx	lr
 8003742:	377e      	.short	0x377e
 8003744:	0800      	.short	0x0800

08003746 <Dictionary_926>:
 8003746:	37c0      	.short	0x37c0
 8003748:	00000800 	.word	0x00000800
 800374c:	69757104 	.word	0x69757104
 8003750:	74          	.byte	0x74
	...

08003752 <Code_926>:
  @ Clear stacks and tidy up.
  .ifdef m0core
  ldr r0, =returnstackanfang
  mov sp, r0
  .else
  ldr sp, =returnstackanfang
 8003752:	f8df d05c 	ldr.w	sp, [pc, #92]	; 80037b0 <quit_innenschleife+0x32>
  .endif

  ldr psp, =datenstackanfang
 8003756:	4f10      	ldr	r7, [pc, #64]	; (8003798 <quit_innenschleife+0x1a>)

  .ifdef initflash
   bl initflash
 8003758:	f7fd fd1e 	bl	8001198 <Code_242>
  .endif

  @ Base und State setzen

  ldr r0, =base
 800375c:	4815      	ldr	r0, [pc, #84]	; (80037b4 <quit_innenschleife+0x36>)
  movs r1, #10   @ Base decimal
 800375e:	210a      	movs	r1, #10
  str r1, [r0]
 8003760:	6001      	str	r1, [r0, #0]

  ldr r0, =state
 8003762:	4810      	ldr	r0, [pc, #64]	; (80037a4 <quit_innenschleife+0x26>)
  movs r1, #0    @ Execute mode
 8003764:	2100      	movs	r1, #0
  str r1, [r0]
 8003766:	6001      	str	r1, [r0, #0]

  ldr r0, =konstantenfaltungszeiger
 8003768:	480d      	ldr	r0, [pc, #52]	; (80037a0 <quit_innenschleife+0x22>)
  @ movs r1, #0  @ Clear constant folding pointer
  str r1, [r0]
 800376a:	6001      	str	r1, [r0, #0]

  ldr r0, =Pufferstand
 800376c:	4809      	ldr	r0, [pc, #36]	; (8003794 <quit_innenschleife+0x16>)
  @ movs r1, #0  @ Set >IN to 0
  str r1, [r0]
 800376e:	6001      	str	r1, [r0, #0]

  ldr r0, =current_source
 8003770:	4811      	ldr	r0, [pc, #68]	; (80037b8 <quit_innenschleife+0x3a>)
  @ movs r1, #0  @ Empty TIB is source
  str r1, [r0]
 8003772:	6001      	str	r1, [r0, #0]
  ldr r1, =Eingabepuffer
 8003774:	4911      	ldr	r1, [pc, #68]	; (80037bc <quit_innenschleife+0x3e>)
  str r1, [r0, #4]
 8003776:	6041      	str	r1, [r0, #4]

08003778 <quit_intern>:

quit_intern:
  ldr r0, =hook_quit
 8003778:	480c      	ldr	r0, [pc, #48]	; (80037ac <quit_innenschleife+0x2e>)
  ldr r0, [r0]
 800377a:	6800      	ldr	r0, [r0, #0]
  mov pc, r0
 800377c:	4687      	mov	pc, r0

0800377e <quit_innenschleife>:

quit_innenschleife:  @ Main loop of Forth system.
  bl query
 800377e:	f7fe f820 	bl	80017c2 <Code_328>
  bl interpret
 8003782:	f7ff fe71 	bl	8003468 <Code_867>
1:  writeln "ok.\x1B[0m"
    b.n quit_innenschleife

  .else

    writeln " ok."
 8003786:	f7fe f8c1 	bl	800190c <dotgaensefuesschen>
 800378a:	2005      	.short	0x2005
 800378c:	0a2e6b6f 	.word	0x0a2e6b6f
    b.n quit_innenschleife
 8003790:	e7f5      	b.n	800377e <quit_innenschleife>
 8003792:	0000      	.short	0x0000
  ldr r0, =Pufferstand  @ Save >in and set to zero
 8003794:	2001ffe4 	.word	0x2001ffe4
  ldr r0, =datenstackanfang   @ Stacks fangen oben an und wachsen nach unten.
 8003798:	20001330 	.word	0x20001330
2:ldr r0, =datenstackende     @ Solange der Stackzeiger oberhalb des Endes liegt, ist alles okay.
 800379c:	20001130 	.word	0x20001130
  ldr r4, =konstantenfaltungszeiger
 80037a0:	20001008 	.word	0x20001008
  ldr r3, =state
 80037a4:	2001ffd8 	.word	0x2001ffd8
        ldr r1, =0xF1B60600 @ Opcode subs tos, tos, #imm12
 80037a8:	f1b60600 	.word	0xf1b60600
  ldr tos, =hook_quit
 80037ac:	2001ffd4 	.word	0x2001ffd4
  ldr sp, =returnstackanfang
 80037b0:	20001430 	.word	0x20001430
  ldr r0, =base
 80037b4:	2001fffc 	.word	0x2001fffc
  ldr r0, =current_source
 80037b8:	2001ffdc 	.word	0x2001ffdc
  ldr r1, =Eingabepuffer
 80037bc:	20001068 	.word	0x20001068

080037c0 <Dictionary_928>:
 80037c0:	080037da 	.word	0x080037da
 80037c4:	65050000 	.word	0x65050000
 80037c8:	3f746e69 	.word	0x3f746e69

080037cc <Code_928>:
@ Common interrupt helpers

@ -----------------------------------------------------------------------------
  Wortbirne Flag_visible, "eint?" @ ( -- ) Are Interrupts enabled ?
@ ----------------------------------------------------------------------------- 
  pushdatos
 80037cc:	f847 6d04 	str.w	r6, [r7, #-4]!
  mrs tos, PRIMASK
 80037d0:	f3ef 8610 	mrs	r6, PRIMASK
  subs tos, #1
 80037d4:	3e01      	subs	r6, #1
  sbcs tos, tos
 80037d6:	41b6      	sbcs	r6, r6
  bx lr
 80037d8:	4770      	bx	lr

080037da <Dictionary_930>:
 80037da:	37ea      	.short	0x37ea
 80037dc:	00200800 	.word	0x00200800
 80037e0:	6e696504 	.word	0x6e696504
 80037e4:	74          	.byte	0x74
	...

080037e6 <Code_930>:

@ -----------------------------------------------------------------------------
  Wortbirne Flag_inline, "eint" @ ( -- ) Aktiviert Interrupts  Enables Interrupts
@ ----------------------------------------------------------------------------- 
  cpsie i @ Interrupt-Handler
 80037e6:	b662      	cpsie	i
  bx lr
 80037e8:	4770      	bx	lr

080037ea <Dictionary_931>:
 80037ea:	37fa      	.short	0x37fa
 80037ec:	00200800 	.word	0x00200800
 80037f0:	6e696404 	.word	0x6e696404
 80037f4:	74          	.byte	0x74
	...

080037f6 <Code_931>:

@ -----------------------------------------------------------------------------
  Wortbirne Flag_inline, "dint" @ ( -- ) Deaktiviert Interrupts  Disables Interrupts
@ ----------------------------------------------------------------------------- 
  cpsid i @ Interrupt-Handler
 80037f6:	b672      	cpsid	i
  bx lr
 80037f8:	4770      	bx	lr

080037fa <Dictionary_932>:
 80037fa:	3810      	.short	0x3810
 80037fc:	00200800 	.word	0x00200800
 8003800:	73706904 	.word	0x73706904
 8003804:	72          	.byte	0x72
	...

08003806 <Code_932>:

@ -----------------------------------------------------------------------------
  Wortbirne Flag_inline, "ipsr" @ ( -- int ) Read IPSR by Mark Schweizer
@ ----------------------------------------------------------------------------- 
  pushdatos
 8003806:	f847 6d04 	str.w	r6, [r7, #-4]!
  mrs tos, ipsr
 800380a:	f3ef 8605 	mrs	r6, IPSR
  bx lr
 800380e:	4770      	bx	lr

08003810 <Dictionary_934>:
 8003810:	0800381c 	.word	0x0800381c
 8003814:	6e030000 	.word	0x6e030000
 8003818:	706f      	.short	0x706f

0800381a <Code_934>:

@ -----------------------------------------------------------------------------
  Wortbirne Flag_visible, "nop" @ ( -- ) @ Handler for unused hooks
nop_vektor:                    
@ ----------------------------------------------------------------------------- 
  bx lr
 800381a:	4770      	bx	lr

0800381c <Dictionary_935>:
 800381c:	0800385e 	.word	0x0800385e
 8003820:	75090000 	.word	0x75090000
 8003824:	6e61686e 	.word	0x6e61686e
 8003828:	64656c64 	.word	0x64656c64

0800382c <Code_935>:

@ -----------------------------------------------------------------------------
  Wortbirne Flag_visible, "unhandled" @ Message for wild interrupts
unhandled:                            @   and handler for unused interrupts
@ -----------------------------------------------------------------------------
  push {lr} 
 800382c:	b500      	push	{lr}
  @ writeln "Unhandled Interrupt !"
  write "Unhandled Interrupt "
 800382e:	f7fe f86d 	bl	800190c <dotgaensefuesschen>
 8003832:	5514      	.short	0x5514
 8003834:	6e61686e 	.word	0x6e61686e
 8003838:	64656c64 	.word	0x64656c64
 800383c:	746e4920 	.word	0x746e4920
 8003840:	75727265 	.word	0x75727265
 8003844:	7470      	.short	0x7470
 8003846:	20          	.byte	0x20
 8003847:	00          	.byte	0x00
  pushdatos
 8003848:	f847 6d04 	str.w	r6, [r7, #-4]!
  mrs tos, ipsr
 800384c:	f3ef 8605 	mrs	r6, IPSR
  bl hexdot
 8003850:	f7fe f8c4 	bl	80019dc <Code_377>
  writeln "!"
 8003854:	f7fe f85a 	bl	800190c <dotgaensefuesschen>
 8003858:	2102      	.short	0x2102
 800385a:	0a          	.byte	0x0a
 800385b:	00          	.byte	0x00
  pop {pc}
 800385c:	bd00      	pop	{pc}

0800385e <Dictionary_939>:
 800385e:	3870      	.short	0x3870
 8003860:	00000800 	.word	0x00000800
 8003864:	73657205 	.word	0x73657205
 8003868:	7465      	.short	0x7465

0800386a <Code_939>:

@ -----------------------------------------------------------------------------
  Wortbirne Flag_visible, "reset" @ ( -- ) Hardware level reset
Restart:
@ ----------------------------------------------------------------------------- 
  ldr r0, =0xE000ED0C
 800386a:	48c7      	ldr	r0, [pc, #796]	; (8003b88 <init_name+0x6>)
  ldr r1, =0x5FA0004
 800386c:	49c7      	ldr	r1, [pc, #796]	; (8003b8c <init_name+0xa>)
  str r1, [r0]
 800386e:	6001      	str	r1, [r0, #0]

08003870 <Dictionary_941>:
 8003870:	0800389a 	.word	0x0800389a
 8003874:	690b0081 	.word	0x690b0081
 8003878:	732d7172 	.word	0x732d7172
 800387c:	69747379 	.word	0x69747379
 8003880:	6b63      	.short	0x6b63

08003882 <Code_941>:

@ -----------------------------------------------------------------------------
@ Common interrupt handlers for all targets
@ -----------------------------------------------------------------------------

interrupt systick
 8003882:	f847 6d04 	str.w	r6, [r7, #-4]!
 8003886:	4ec2      	ldr	r6, [pc, #776]	; (8003b90 <init_name+0xe>)
 8003888:	4770      	bx	lr
 800388a:	382c      	.short	0x382c
 800388c:	0800      	.short	0x0800

0800388e <irq_vektor_systick>:
 800388e:	f64f 70d0 	movw	r0, #65488	; 0xffd0
 8003892:	f2c2 0001 	movt	r0, #8193	; 0x2001
 8003896:	6800      	ldr	r0, [r0, #0]
 8003898:	4687      	mov	pc, r0

0800389a <Dictionary_945>:
 800389a:	38c2      	.short	0x38c2
 800389c:	00810800 	.word	0x00810800
 80038a0:	71726909 	.word	0x71726909
 80038a4:	7561662d 	.word	0x7561662d
 80038a8:	746c      	.short	0x746c

080038aa <Code_945>:
initinterrupt fault, faulthandler, unhandled
 80038aa:	f847 6d04 	str.w	r6, [r7, #-4]!
 80038ae:	4eb9      	ldr	r6, [pc, #740]	; (8003b94 <init_name+0x12>)
 80038b0:	4770      	bx	lr
 80038b2:	382c      	.short	0x382c
 80038b4:	0800      	.short	0x0800

080038b6 <faulthandler>:
 80038b6:	f64f 70cc 	movw	r0, #65484	; 0xffcc
 80038ba:	f2c2 0001 	movt	r0, #8193	; 0x2001
 80038be:	6800      	ldr	r0, [r0, #0]
 80038c0:	4687      	mov	pc, r0

080038c2 <Dictionary_949>:
 80038c2:	38f0      	.short	0x38f0
 80038c4:	00810800 	.word	0x00810800
 80038c8:	7172690e 	.word	0x7172690e
 80038cc:	6c6f632d 	.word	0x6c6f632d
 80038d0:	7463656c 	.word	0x7463656c
 80038d4:	6f69      	.short	0x6f69
 80038d6:	6e          	.byte	0x6e
	...

080038d8 <Code_949>:
initinterrupt collection, nullhandler, unhandled
 80038d8:	f847 6d04 	str.w	r6, [r7, #-4]!
 80038dc:	4eae      	ldr	r6, [pc, #696]	; (8003b98 <init_name+0x16>)
 80038de:	4770      	bx	lr
 80038e0:	0800382c 	.word	0x0800382c

080038e4 <nullhandler>:
 80038e4:	f64f 70c8 	movw	r0, #65480	; 0xffc8
 80038e8:	f2c2 0001 	movt	r0, #8193	; 0x2001
 80038ec:	6800      	ldr	r0, [r0, #0]
 80038ee:	4687      	mov	pc, r0

080038f0 <Dictionary_953>:
 80038f0:	08003918 	.word	0x08003918
 80038f4:	69090081 	.word	0x69090081
 80038f8:	652d7172 	.word	0x652d7172
 80038fc:	30697478 	.word	0x30697478

08003900 <Code_953>:
@------------------------------------------------------------------------------
@ Alle Interrupthandler funktionieren gleich und werden komfortabel mit einem Makro erzeugt:
@ All interrupt handlers work the same way and are generated with a macro:
@------------------------------------------------------------------------------

interrupt exti0
 8003900:	f847 6d04 	str.w	r6, [r7, #-4]!
 8003904:	4ea5      	ldr	r6, [pc, #660]	; (8003b9c <init_name+0x1a>)
 8003906:	4770      	bx	lr
 8003908:	0800382c 	.word	0x0800382c

0800390c <irq_vektor_exti0>:
 800390c:	f64f 70c4 	movw	r0, #65476	; 0xffc4
 8003910:	f2c2 0001 	movt	r0, #8193	; 0x2001
 8003914:	6800      	ldr	r0, [r0, #0]
 8003916:	4687      	mov	pc, r0

08003918 <Dictionary_957>:
 8003918:	08003940 	.word	0x08003940
 800391c:	69090081 	.word	0x69090081
 8003920:	652d7172 	.word	0x652d7172
 8003924:	31697478 	.word	0x31697478

08003928 <Code_957>:
interrupt exti1
 8003928:	f847 6d04 	str.w	r6, [r7, #-4]!
 800392c:	4e9c      	ldr	r6, [pc, #624]	; (8003ba0 <init_name+0x1e>)
 800392e:	4770      	bx	lr
 8003930:	0800382c 	.word	0x0800382c

08003934 <irq_vektor_exti1>:
 8003934:	f64f 70c0 	movw	r0, #65472	; 0xffc0
 8003938:	f2c2 0001 	movt	r0, #8193	; 0x2001
 800393c:	6800      	ldr	r0, [r0, #0]
 800393e:	4687      	mov	pc, r0

08003940 <Dictionary_961>:
 8003940:	08003968 	.word	0x08003968
 8003944:	69090081 	.word	0x69090081
 8003948:	652d7172 	.word	0x652d7172
 800394c:	32697478 	.word	0x32697478

08003950 <Code_961>:
interrupt exti2
 8003950:	f847 6d04 	str.w	r6, [r7, #-4]!
 8003954:	4e93      	ldr	r6, [pc, #588]	; (8003ba4 <init_name+0x22>)
 8003956:	4770      	bx	lr
 8003958:	0800382c 	.word	0x0800382c

0800395c <irq_vektor_exti2>:
 800395c:	f64f 70bc 	movw	r0, #65468	; 0xffbc
 8003960:	f2c2 0001 	movt	r0, #8193	; 0x2001
 8003964:	6800      	ldr	r0, [r0, #0]
 8003966:	4687      	mov	pc, r0

08003968 <Dictionary_965>:
 8003968:	08003990 	.word	0x08003990
 800396c:	69090081 	.word	0x69090081
 8003970:	652d7172 	.word	0x652d7172
 8003974:	33697478 	.word	0x33697478

08003978 <Code_965>:
interrupt exti3
 8003978:	f847 6d04 	str.w	r6, [r7, #-4]!
 800397c:	4e8a      	ldr	r6, [pc, #552]	; (8003ba8 <init_name+0x26>)
 800397e:	4770      	bx	lr
 8003980:	0800382c 	.word	0x0800382c

08003984 <irq_vektor_exti3>:
 8003984:	f64f 70b8 	movw	r0, #65464	; 0xffb8
 8003988:	f2c2 0001 	movt	r0, #8193	; 0x2001
 800398c:	6800      	ldr	r0, [r0, #0]
 800398e:	4687      	mov	pc, r0

08003990 <Dictionary_969>:
 8003990:	080039b8 	.word	0x080039b8
 8003994:	69090081 	.word	0x69090081
 8003998:	652d7172 	.word	0x652d7172
 800399c:	34697478 	.word	0x34697478

080039a0 <Code_969>:
interrupt exti4
 80039a0:	f847 6d04 	str.w	r6, [r7, #-4]!
 80039a4:	4e81      	ldr	r6, [pc, #516]	; (8003bac <init_name+0x2a>)
 80039a6:	4770      	bx	lr
 80039a8:	0800382c 	.word	0x0800382c

080039ac <irq_vektor_exti4>:
 80039ac:	f64f 70b4 	movw	r0, #65460	; 0xffb4
 80039b0:	f2c2 0001 	movt	r0, #8193	; 0x2001
 80039b4:	6800      	ldr	r0, [r0, #0]
 80039b6:	4687      	mov	pc, r0

080039b8 <Dictionary_973>:
 80039b8:	080039de 	.word	0x080039de
 80039bc:	69070081 	.word	0x69070081
 80039c0:	612d7172 	.word	0x612d7172
 80039c4:	6364      	.short	0x6364

080039c6 <Code_973>:
interrupt adc
 80039c6:	f847 6d04 	str.w	r6, [r7, #-4]!
 80039ca:	4e79      	ldr	r6, [pc, #484]	; (8003bb0 <init_name+0x2e>)
 80039cc:	4770      	bx	lr
 80039ce:	382c      	.short	0x382c
 80039d0:	0800      	.short	0x0800

080039d2 <irq_vektor_adc>:
 80039d2:	f64f 70b0 	movw	r0, #65456	; 0xffb0
 80039d6:	f2c2 0001 	movt	r0, #8193	; 0x2001
 80039da:	6800      	ldr	r0, [r0, #0]
 80039dc:	4687      	mov	pc, r0

080039de <Dictionary_977>:
 80039de:	3a06      	.short	0x3a06
 80039e0:	00810800 	.word	0x00810800
 80039e4:	71726908 	.word	0x71726908
 80039e8:	6d69742d 	.word	0x6d69742d
 80039ec:	32          	.byte	0x32
	...

080039ee <Code_977>:
interrupt tim2
 80039ee:	f847 6d04 	str.w	r6, [r7, #-4]!
 80039f2:	4e70      	ldr	r6, [pc, #448]	; (8003bb4 <init_name+0x32>)
 80039f4:	4770      	bx	lr
 80039f6:	382c      	.short	0x382c
 80039f8:	0800      	.short	0x0800

080039fa <irq_vektor_tim2>:
 80039fa:	f64f 70ac 	movw	r0, #65452	; 0xffac
 80039fe:	f2c2 0001 	movt	r0, #8193	; 0x2001
 8003a02:	6800      	ldr	r0, [r0, #0]
 8003a04:	4687      	mov	pc, r0

08003a06 <Dictionary_981>:
 8003a06:	3a2e      	.short	0x3a2e
 8003a08:	00810800 	.word	0x00810800
 8003a0c:	71726908 	.word	0x71726908
 8003a10:	6d69742d 	.word	0x6d69742d
 8003a14:	33          	.byte	0x33
	...

08003a16 <Code_981>:
interrupt tim3
 8003a16:	f847 6d04 	str.w	r6, [r7, #-4]!
 8003a1a:	4e67      	ldr	r6, [pc, #412]	; (8003bb8 <init_name+0x36>)
 8003a1c:	4770      	bx	lr
 8003a1e:	382c      	.short	0x382c
 8003a20:	0800      	.short	0x0800

08003a22 <irq_vektor_tim3>:
 8003a22:	f64f 70a8 	movw	r0, #65448	; 0xffa8
 8003a26:	f2c2 0001 	movt	r0, #8193	; 0x2001
 8003a2a:	6800      	ldr	r0, [r0, #0]
 8003a2c:	4687      	mov	pc, r0

08003a2e <Dictionary_985>:
 8003a2e:	3a56      	.short	0x3a56
 8003a30:	00810800 	.word	0x00810800
 8003a34:	71726908 	.word	0x71726908
 8003a38:	6d69742d 	.word	0x6d69742d
 8003a3c:	34          	.byte	0x34
	...

08003a3e <Code_985>:
interrupt tim4
 8003a3e:	f847 6d04 	str.w	r6, [r7, #-4]!
 8003a42:	4e5e      	ldr	r6, [pc, #376]	; (8003bbc <init_name+0x3a>)
 8003a44:	4770      	bx	lr
 8003a46:	382c      	.short	0x382c
 8003a48:	0800      	.short	0x0800

08003a4a <irq_vektor_tim4>:
 8003a4a:	f64f 70a4 	movw	r0, #65444	; 0xffa4
 8003a4e:	f2c2 0001 	movt	r0, #8193	; 0x2001
 8003a52:	6800      	ldr	r0, [r0, #0]
 8003a54:	4687      	mov	pc, r0

08003a56 <Dictionary_988>:
 8003a56:	000c      	.short	0x000c
 8003a58:	ffff0801 	.word	0xffff0801
 8003a5c:	2d2d2d18 	.word	0x2d2d2d18
 8003a60:	616c4620 	.word	0x616c4620
 8003a64:	44206873 	.word	0x44206873
 8003a68:	69746369 	.word	0x69746369
 8003a6c:	72616e6f 	.word	0x72616e6f
 8003a70:	2d2d2079 	.word	0x2d2d2079
 8003a74:	2d          	.byte	0x2d
	...

08003a76 <Forth>:
Reset:	@ Einsprung zu Beginn
@ -----------------------------------------------------------------------------
	@ Initialisierungen der Hardware, habe und brauche noch keinen Datenstack dafür

	@ Initialisations for Terminal hardware, without Datastack.
	bl uart_init
 8003a76:	f7fd fcfa 	bl	800146e <uart_init>
@ Initialises pointers and variables for flash dictionary after Reset.
@ This runs one time after Reset, no registers are saved here.

   @ Hardware sets return stack pointer on startup from vector table.
   @ Set Return stack pointer here (again) just in case this might be a software re-entry.
@ use the system settings in startup_stm32wb55xx_cm4.s _estack
 8003a7a:	4851      	ldr	r0, [pc, #324]	; (8003bc0 <init_name+0x3e>)
@   ldr r0, =returnstackanfang
 8003a7c:	4685      	mov	sp, r0
@   mov sp, r0

   @ Return stack pointer already set up. Time to set data stack pointer !
   @ Normaler Stackpointer bereits gesetzt. Setze den Datenstackpointer:
 8003a7e:	4f51      	ldr	r7, [pc, #324]	; (8003bc4 <init_name+0x42>)
   ldr psp, =datenstackanfang

   @ TOS setzen, um Pufferunterläufe gut erkennen zu können
   @ TOS magic number to see spurious stack underflows in .s
   @ ldr tos, =0xAFFEBEEF
 8003a80:	262a      	movs	r6, #42	; 0x2a

  @ Suche nun im Flash nach Anfang und Ende.
  @ Short: Search for begin and end in Flash.

   @ Dictionarypointer ins RAM setzen
   @ Set dictionary pointer into RAM first
 8003a82:	4851      	ldr	r0, [pc, #324]	; (8003bc8 <init_name+0x46>)
   ldr r0, =Dictionarypointer
 8003a84:	4951      	ldr	r1, [pc, #324]	; (8003bcc <init_name+0x4a>)
   ldr r1, =RamDictionaryAnfang
 8003a86:	6001      	str	r1, [r0, #0]
   str r1, [r0]

   @ Fadenende fürs RAM vorbereiten
   @ Set latest for RAM
 8003a88:	4851      	ldr	r0, [pc, #324]	; (8003bd0 <init_name+0x4e>)
   ldr r0, =Fadenende
 8003a8a:	4952      	ldr	r1, [pc, #328]	; (8003bd4 <init_name+0x52>)
   ldr r1, =CoreDictionaryAnfang
 8003a8c:	6001      	str	r1, [r0, #0]
  @  r0 Für dies und das    Temporary this and that
  @  r1 Aktuelle Flags      Current Flags
  @  r3 Für dies und das    Temporary this and that
  @  r5 Belegtes Ram.       Keeps track of allocated RAM
  @ TOS Adresshangelzeiger  Pointer that crawls through dictionary

 8003a8e:	f847 6d04 	str.w	r6, [r7, #-4]!
  pushdatos
 8003a92:	4e50      	ldr	r6, [pc, #320]	; (8003bd4 <init_name+0x52>)
  ldr tos, =CoreDictionaryAnfang  @ Hier fängt es an.  Start at the beginning
 8003a94:	4d50      	ldr	r5, [pc, #320]	; (8003bd8 <init_name+0x56>)

08003a96 <SucheFlashPointer_Hangelschleife>:
  ldr r5,  =RamDictionaryEnde     @ Fürs Abzählen des Variablenplatzes  Variables start at the end of RAM dictionary

SucheFlashPointer_Hangelschleife:
 8003a96:	88b1      	ldrh	r1, [r6, #4]
  ldrh r1, [tos, #4]  @ Aktuelle Flags lesen  Fetch current Flags

 8003a98:	f64f 73ff 	movw	r3, #65535	; 0xffff
  ldr r3, =Flag_invisible

 8003a9c:	4299      	cmp	r1, r3
  cmp r1, r3   @ Flag_invisible ? Überspringen !  Skip invisible definitions
 8003a9e:	d025      	beq.n	8003aec <Sucheflashpointer_Speicherbelegung_fertig>
  beq.n Sucheflashpointer_Speicherbelegung_fertig
    @ Dies Wort ist sichtbar. Prüfe, ob es Ram-Speicher anfordert und belegt.
    @ This definition is visible. Check if it allocates RAM.

 8003aa0:	f44f 7380 	mov.w	r3, #256	; 0x100
    ldr r3, =Flag_buffer & ~Flag_visible
 8003aa4:	400b      	ands	r3, r1
    ands r3, r1
 8003aa6:	d00a      	beq.n	8003abe <SucheFlashPointer_Hangelschleife+0x28>
    beq 1f @ No buffer requested.

      @ Search for end of code of current definition.
 8003aa8:	1db0      	adds	r0, r6, #6
      adds r0, tos, #6
 8003aaa:	f7fe ff76 	bl	800299a <skipstring>
      bl skipstring
      @ r0 zeigt nun an den Codebeginn des aktuellen Wortes.  r0 points to start of code of current definition
 8003aae:	f7fe faae 	bl	800200e <suchedefinitionsende>
      bl suchedefinitionsende @ Advance pointer to end of code. This is detected by "bx lr" or "pop {pc}" opcodes.
      @ r0 ist nun an der Stelle, wo die Initialisierungsdaten liegen. r0 now points to the location of the initialisation at the end of code of current definition.

      @ Fetch required length of buffer, do this in two steps because of alignment issues
 8003ab2:	8803      	ldrh	r3, [r0, #0]
      ldrh r3, [r0]
 8003ab4:	8840      	ldrh	r0, [r0, #2]
      ldrh r0, [r0, #2]
 8003ab6:	0400      	lsls	r0, r0, #16
      lsls r0, #16
 8003ab8:	4303      	orrs	r3, r0
      orrs r3, r0
      
      @ Ramvariablenpointer wandern lassen  Subtract from the pointer that points to the next free location
 8003aba:	1aed      	subs	r5, r5, r3
      subs r5, r3  
 8003abc:	e016      	b.n	8003aec <Sucheflashpointer_Speicherbelegung_fertig>
      b.n Sucheflashpointer_Speicherbelegung_fertig @ Finished

 8003abe:	2380      	movs	r3, #128	; 0x80
1:  movs r3, #Flag_ramallot & ~Flag_visible
 8003ac0:	400b      	ands	r3, r1
    ands r3, r1
    
 8003ac2:	d013      	beq.n	8003aec <Sucheflashpointer_Speicherbelegung_fertig>
    beq.n Sucheflashpointer_Speicherbelegung_fertig @ Benötigt doch kein RAM.
      @ writeln "Speicher gewünscht !"
      @ Die Flags werden später nicht mehr gebraucht.
      @ This one allocates RAM, Flags are not needed anymore.

 8003ac4:	230f      	movs	r3, #15
      movs r3, #0x0F @ Das unterste Nibble maskieren  Mask lower 4 bits that contains amount of 32 bit locations requested.
 8003ac6:	4019      	ands	r1, r3
      ands r1, r3

        @ Bei Null Bytes brauche ich nichts zu kopieren, den Fall erkennt move.
        @ Zero byte requests are handled by move itself, no need to catch this special case. Sounds strange, but is useful to have two handles for one variable.
 8003ac8:	0089      	lsls	r1, r1, #2
        lsls r1, #2 @ Mit vier malnehmen                  Multiply by 4
 8003aca:	1a6d      	subs	r5, r5, r1
        @ r1: enthält die Zahl der noch zu verschiebenden Bytes                     Contains number of bytes to copy/initialise
        @ r3: ist frei für uns.                                                     Free for use !
        @ r5: die Startadresse des Ram-Bereiches, der geschrieben werden soll.      Contains address in RAM the initialisation values have to be written in.

        @ Muss zuerst schaffen, das Ende der aktuellen Definition zu finden.
        @ Search for end of code of current definition.
 8003acc:	1db0      	adds	r0, r6, #6
        adds r0, tos, #6
 8003ace:	f7fe ff64 	bl	800299a <skipstring>
        bl skipstring
        @ r0 zeigt nun an den Codebeginn des aktuellen Wortes.  r0 points to start of code of current definition
 8003ad2:	f7fe fa9c 	bl	800200e <suchedefinitionsende>
        bl suchedefinitionsende @ Advance pointer to end of code. This is detected by "bx lr" or "pop {pc}" opcodes.
        @ r0 ist nun an der Stelle, wo die Initialisierungsdaten liegen. r0 now points to the location of the initialisation at the end of code of current definition.
        @ Kopiere die gewünschte Zahl von r1 Bytes von [r0] an [r5]  Copy desired amount of r1 bytes from [r0] to [r5].
 8003ad6:	f847 6d04 	str.w	r6, [r7, #-4]!
 8003ada:	0006      	movs	r6, r0
        pushda r0 @ Quelle  Source
 8003adc:	f847 6d04 	str.w	r6, [r7, #-4]!
 8003ae0:	002e      	movs	r6, r5
        pushda r5 @ Ziel    Target
 8003ae2:	f847 6d04 	str.w	r6, [r7, #-4]!
 8003ae6:	000e      	movs	r6, r1
        pushda r1 @ Anzahl an Bytes  Amount
 8003ae8:	f7fd f86e 	bl	8000bc8 <Code_184>

08003aec <Sucheflashpointer_Speicherbelegung_fertig>:

Sucheflashpointer_Speicherbelegung_fertig:
  @ Speicherbelegung und -initialisierung abgeschlossen.
  @ Finished RAM allocation and initialisation.

  @ Weiterhangeln  Continue crawl.
 8003aec:	f7fe ff32 	bl	8002954 <Code_636>
  bl dictionarynext
 8003af0:	0030      	movs	r0, r6
 8003af2:	cf40      	ldmia	r7!, {r6}
  popda r0
 8003af4:	d0cf      	beq.n	8003a96 <SucheFlashPointer_Hangelschleife>
  beq.n SucheFlashPointer_Hangelschleife

 
 8003af6:	4839      	ldr	r0, [pc, #228]	; (8003bdc <init_name+0x5a>)
  ldr r0, =ZweitFadenende
 8003af8:	6006      	str	r6, [r0, #0]
  str tos, [r0] @ Das Fadenende für den Flash setzen.  Set pointer to latest definition.
 8003afa:	cf40      	ldmia	r7!, {r6}
  drop

 8003afc:	4838      	ldr	r0, [pc, #224]	; (8003be0 <init_name+0x5e>)
  ldr r0, =VariablenPointer @ Set pointer to current end-of-ram-dictionary for later permanent RAM allocations by variables defined in Flash.
 8003afe:	6005      	str	r5, [r0, #0]
  str r5, [r0]

  @ Mache mich auf die Suche nach dem Dictionarypointer im Flash:
  @ Suche jetzt gleich noch den DictionaryPointer.
  @ Time to search the Dictionarypointer !

 8003b00:	4838      	ldr	r0, [pc, #224]	; (8003be4 <init_name+0x62>)
  ldr r0, =FlashDictionaryEnde
 8003b02:	4939      	ldr	r1, [pc, #228]	; (8003be8 <init_name+0x66>)
  ldr r1, =FlashDictionaryAnfang
 8003b04:	f64f 72ff 	movw	r2, #65535	; 0xffff
  ldr r2, =erasedhalfword

  @ Gehe Rückwärts, bis ich aus dem $FFFF-Freigebiet in Daten komme.
  @ Run backwards through whole Flash memory to find DictionaryPointer.
 8003b08:	4288      	cmp	r0, r1
1:cmp r0, r1 @  Wenn ich am Anfang angelangt bin, ist das der DictionaryPointer.
 8003b0a:	d004      	beq.n	8003b16 <Sucheflashpointer_Speicherbelegung_fertig+0x2a>
  beq.n 2f     @  Finished if beginning of Flash is hit.

 8003b0c:	3802      	subs	r0, #2
  subs r0, #2
 8003b0e:	8803      	ldrh	r3, [r0, #0]
  ldrh r3, [r0]
 8003b10:	4293      	cmp	r3, r2
  cmp r3, r2 @ 0xFFFF
 8003b12:	d0f9      	beq.n	8003b08 <Sucheflashpointer_Speicherbelegung_fertig+0x1c>
  beq.n 1b @ Wenn es nicht gleich ist, habe ich eine Füllung gefunden.
           @ If there is not $FFFF on that location I have found "end of free space".

 8003b14:	3002      	adds	r0, #2
  adds r0, #2

2:@ Dictionarypointer gefunden. Found DictionaryPointer.
 8003b16:	4935      	ldr	r1, [pc, #212]	; (8003bec <init_name+0x6a>)
  ldr r1, =ZweitDictionaryPointer @ We start to compile into RAM - the pointer found goes to the second set of pointers that are swapped with compiletoflash/compiletoram.
 8003b18:	6008      	str	r0, [r1, #0]
  str r0, [r1]

  .ifdef initflash
 8003b1a:	f7fd fb3d 	bl	8001198 <Code_242>


	@ Catch the pointers for Flash dictionary
.include "../Forth/common/catchflashpointers.s"

	welcome " for STM32WB55 by Matthias Koch "
 8003b1e:	f7fd fef5 	bl	800190c <dotgaensefuesschen>
 8003b22:	4d38      	.short	0x4d38
 8003b24:	69726365 	.word	0x69726365
 8003b28:	532d7073 	.word	0x532d7073
 8003b2c:	6c6c6574 	.word	0x6c6c6574
 8003b30:	73697261 	.word	0x73697261
 8003b34:	352e3220 	.word	0x352e3220
 8003b38:	6620322e 	.word	0x6620322e
 8003b3c:	5320726f 	.word	0x5320726f
 8003b40:	32334d54 	.word	0x32334d54
 8003b44:	35354257 	.word	0x35354257
 8003b48:	20796220 	.word	0x20796220
 8003b4c:	7474614d 	.word	0x7474614d
 8003b50:	73616968 	.word	0x73616968
 8003b54:	636f4b20 	.word	0x636f4b20
 8003b58:	2068      	.short	0x2068
 8003b5a:	0a          	.byte	0x0a
 8003b5b:	00          	.byte	0x00

@ Common startup code for all implementations 

   @ Einige der Kernvariablen müssen hier unbedingt frisch gesetzt werden, damit quit nicht nach dem Init-Einsprung nochmal tätig werden muss.

   ldr r0, =konstantenfaltungszeiger
 8003b5c:	4824      	ldr	r0, [pc, #144]	; (8003bf0 <init_name+0x6e>)
   movs r1, #0    @ Clear constant folding pointer
 8003b5e:	2100      	movs	r1, #0
   str r1, [r0]
 8003b60:	6001      	str	r1, [r0, #0]
    bl init_register_allocator
  .endif

   @ Suche nach der init-Definition:
   @ Search for current init definition in dictionary:
   pushdatos
 8003b62:	f847 6d04 	str.w	r6, [r7, #-4]!
   ldr tos, =init_name
 8003b66:	4e23      	ldr	r6, [pc, #140]	; (8003bf4 <init_name+0x72>)
   pushdaconst 4 
 8003b68:	f847 6d04 	str.w	r6, [r7, #-4]!
 8003b6c:	2604      	movs	r6, #4
   bl find
 8003b6e:	f7fe ff23 	bl	80029b8 <Code_641>
   drop @ Flags brauche ich nicht No need for flags
 8003b72:	cf40      	ldmia	r7!, {r6}
   cmp tos, #0
 8003b74:	2e00      	cmp	r6, #0
   beq 1f
 8003b76:	d002      	beq.n	8003b7e <Sucheflashpointer_Speicherbelegung_fertig+0x92>
     @ Gefunden ! Found !
     bl execute
 8003b78:	f7fe fad6 	bl	8002128 <Code_491>
     b quit_intern
 8003b7c:	e5fc      	b.n	8003778 <quit_intern>
1:
   drop @ Die 0-Adresse von find. Wird hier heruntergeworfen, damit der Startwert AFFEBEEF erhalten bleibt !
 8003b7e:	cf40      	ldmia	r7!, {r6}
   b quit @ Drop 0-address of find to keep magic TOS value intact.
 8003b80:	e5e7      	b.n	8003752 <Code_926>

08003b82 <init_name>:
 8003b82:	6e69      	.short	0x6e69
 8003b84:	00007469 	.word	0x00007469
  ldr r0, =0xE000ED0C
 8003b88:	e000ed0c 	.word	0xe000ed0c
  ldr r1, =0x5FA0004
 8003b8c:	05fa0004 	.word	0x05fa0004
interrupt systick
 8003b90:	2001ffd0 	.word	0x2001ffd0
initinterrupt fault, faulthandler, unhandled
 8003b94:	2001ffcc 	.word	0x2001ffcc
initinterrupt collection, nullhandler, unhandled
 8003b98:	2001ffc8 	.word	0x2001ffc8
interrupt exti0
 8003b9c:	2001ffc4 	.word	0x2001ffc4
interrupt exti1
 8003ba0:	2001ffc0 	.word	0x2001ffc0
interrupt exti2
 8003ba4:	2001ffbc 	.word	0x2001ffbc
interrupt exti3
 8003ba8:	2001ffb8 	.word	0x2001ffb8
interrupt exti4
 8003bac:	2001ffb4 	.word	0x2001ffb4
interrupt adc
 8003bb0:	2001ffb0 	.word	0x2001ffb0
interrupt tim2
 8003bb4:	2001ffac 	.word	0x2001ffac
interrupt tim3
 8003bb8:	2001ffa8 	.word	0x2001ffa8
interrupt tim4
 8003bbc:	2001ffa4 	.word	0x2001ffa4
@ use the system settings in startup_stm32wb55xx_cm4.s _estack
 8003bc0:	20001430 	.word	0x20001430
   @ Normaler Stackpointer bereits gesetzt. Setze den Datenstackpointer:
 8003bc4:	20001330 	.word	0x20001330
   @ Set dictionary pointer into RAM first
 8003bc8:	20001000 	.word	0x20001000
   ldr r0, =Dictionarypointer
 8003bcc:	200016d4 	.word	0x200016d4
   @ Set latest for RAM
 8003bd0:	20001004 	.word	0x20001004
   ldr r0, =Fadenende
 8003bd4:	08000180 	.word	0x08000180
  ldr tos, =CoreDictionaryAnfang  @ Hier fängt es an.  Start at the beginning
 8003bd8:	20020000 	.word	0x20020000
 
 8003bdc:	2000101c 	.word	0x2000101c

 8003be0:	20001024 	.word	0x20001024

 8003be4:	080c0000 	.word	0x080c0000
  ldr r0, =FlashDictionaryEnde
 8003be8:	08010000 	.word	0x08010000
2:@ Dictionarypointer gefunden. Found DictionaryPointer.
 8003bec:	20001018 	.word	0x20001018
   ldr r0, =konstantenfaltungszeiger
 8003bf0:	20001008 	.word	0x20001008
   ldr tos, =init_name
 8003bf4:	08003b82 	.word	0x08003b82

08003bf8 <__aeabi_uldivmod>:
 8003bf8:	b953      	cbnz	r3, 8003c10 <__aeabi_uldivmod+0x18>
 8003bfa:	b94a      	cbnz	r2, 8003c10 <__aeabi_uldivmod+0x18>
 8003bfc:	2900      	cmp	r1, #0
 8003bfe:	bf08      	it	eq
 8003c00:	2800      	cmpeq	r0, #0
 8003c02:	bf1c      	itt	ne
 8003c04:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8003c08:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8003c0c:	f000 b972 	b.w	8003ef4 <__aeabi_idiv0>
 8003c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8003c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8003c18:	f000 f806 	bl	8003c28 <__udivmoddi4>
 8003c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8003c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003c24:	b004      	add	sp, #16
 8003c26:	4770      	bx	lr

08003c28 <__udivmoddi4>:
 8003c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c2c:	9e08      	ldr	r6, [sp, #32]
 8003c2e:	4604      	mov	r4, r0
 8003c30:	4688      	mov	r8, r1
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d14b      	bne.n	8003cce <__udivmoddi4+0xa6>
 8003c36:	428a      	cmp	r2, r1
 8003c38:	4615      	mov	r5, r2
 8003c3a:	d967      	bls.n	8003d0c <__udivmoddi4+0xe4>
 8003c3c:	fab2 f282 	clz	r2, r2
 8003c40:	b14a      	cbz	r2, 8003c56 <__udivmoddi4+0x2e>
 8003c42:	f1c2 0720 	rsb	r7, r2, #32
 8003c46:	fa01 f302 	lsl.w	r3, r1, r2
 8003c4a:	fa20 f707 	lsr.w	r7, r0, r7
 8003c4e:	4095      	lsls	r5, r2
 8003c50:	ea47 0803 	orr.w	r8, r7, r3
 8003c54:	4094      	lsls	r4, r2
 8003c56:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8003c5a:	0c23      	lsrs	r3, r4, #16
 8003c5c:	fbb8 f7fe 	udiv	r7, r8, lr
 8003c60:	fa1f fc85 	uxth.w	ip, r5
 8003c64:	fb0e 8817 	mls	r8, lr, r7, r8
 8003c68:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8003c6c:	fb07 f10c 	mul.w	r1, r7, ip
 8003c70:	4299      	cmp	r1, r3
 8003c72:	d909      	bls.n	8003c88 <__udivmoddi4+0x60>
 8003c74:	18eb      	adds	r3, r5, r3
 8003c76:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8003c7a:	f080 811b 	bcs.w	8003eb4 <__udivmoddi4+0x28c>
 8003c7e:	4299      	cmp	r1, r3
 8003c80:	f240 8118 	bls.w	8003eb4 <__udivmoddi4+0x28c>
 8003c84:	3f02      	subs	r7, #2
 8003c86:	442b      	add	r3, r5
 8003c88:	1a5b      	subs	r3, r3, r1
 8003c8a:	b2a4      	uxth	r4, r4
 8003c8c:	fbb3 f0fe 	udiv	r0, r3, lr
 8003c90:	fb0e 3310 	mls	r3, lr, r0, r3
 8003c94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8003c98:	fb00 fc0c 	mul.w	ip, r0, ip
 8003c9c:	45a4      	cmp	ip, r4
 8003c9e:	d909      	bls.n	8003cb4 <__udivmoddi4+0x8c>
 8003ca0:	192c      	adds	r4, r5, r4
 8003ca2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8003ca6:	f080 8107 	bcs.w	8003eb8 <__udivmoddi4+0x290>
 8003caa:	45a4      	cmp	ip, r4
 8003cac:	f240 8104 	bls.w	8003eb8 <__udivmoddi4+0x290>
 8003cb0:	3802      	subs	r0, #2
 8003cb2:	442c      	add	r4, r5
 8003cb4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8003cb8:	eba4 040c 	sub.w	r4, r4, ip
 8003cbc:	2700      	movs	r7, #0
 8003cbe:	b11e      	cbz	r6, 8003cc8 <__udivmoddi4+0xa0>
 8003cc0:	40d4      	lsrs	r4, r2
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	e9c6 4300 	strd	r4, r3, [r6]
 8003cc8:	4639      	mov	r1, r7
 8003cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003cce:	428b      	cmp	r3, r1
 8003cd0:	d909      	bls.n	8003ce6 <__udivmoddi4+0xbe>
 8003cd2:	2e00      	cmp	r6, #0
 8003cd4:	f000 80eb 	beq.w	8003eae <__udivmoddi4+0x286>
 8003cd8:	2700      	movs	r7, #0
 8003cda:	e9c6 0100 	strd	r0, r1, [r6]
 8003cde:	4638      	mov	r0, r7
 8003ce0:	4639      	mov	r1, r7
 8003ce2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ce6:	fab3 f783 	clz	r7, r3
 8003cea:	2f00      	cmp	r7, #0
 8003cec:	d147      	bne.n	8003d7e <__udivmoddi4+0x156>
 8003cee:	428b      	cmp	r3, r1
 8003cf0:	d302      	bcc.n	8003cf8 <__udivmoddi4+0xd0>
 8003cf2:	4282      	cmp	r2, r0
 8003cf4:	f200 80fa 	bhi.w	8003eec <__udivmoddi4+0x2c4>
 8003cf8:	1a84      	subs	r4, r0, r2
 8003cfa:	eb61 0303 	sbc.w	r3, r1, r3
 8003cfe:	2001      	movs	r0, #1
 8003d00:	4698      	mov	r8, r3
 8003d02:	2e00      	cmp	r6, #0
 8003d04:	d0e0      	beq.n	8003cc8 <__udivmoddi4+0xa0>
 8003d06:	e9c6 4800 	strd	r4, r8, [r6]
 8003d0a:	e7dd      	b.n	8003cc8 <__udivmoddi4+0xa0>
 8003d0c:	b902      	cbnz	r2, 8003d10 <__udivmoddi4+0xe8>
 8003d0e:	deff      	udf	#255	; 0xff
 8003d10:	fab2 f282 	clz	r2, r2
 8003d14:	2a00      	cmp	r2, #0
 8003d16:	f040 808f 	bne.w	8003e38 <__udivmoddi4+0x210>
 8003d1a:	1b49      	subs	r1, r1, r5
 8003d1c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8003d20:	fa1f f885 	uxth.w	r8, r5
 8003d24:	2701      	movs	r7, #1
 8003d26:	fbb1 fcfe 	udiv	ip, r1, lr
 8003d2a:	0c23      	lsrs	r3, r4, #16
 8003d2c:	fb0e 111c 	mls	r1, lr, ip, r1
 8003d30:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8003d34:	fb08 f10c 	mul.w	r1, r8, ip
 8003d38:	4299      	cmp	r1, r3
 8003d3a:	d907      	bls.n	8003d4c <__udivmoddi4+0x124>
 8003d3c:	18eb      	adds	r3, r5, r3
 8003d3e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8003d42:	d202      	bcs.n	8003d4a <__udivmoddi4+0x122>
 8003d44:	4299      	cmp	r1, r3
 8003d46:	f200 80cd 	bhi.w	8003ee4 <__udivmoddi4+0x2bc>
 8003d4a:	4684      	mov	ip, r0
 8003d4c:	1a59      	subs	r1, r3, r1
 8003d4e:	b2a3      	uxth	r3, r4
 8003d50:	fbb1 f0fe 	udiv	r0, r1, lr
 8003d54:	fb0e 1410 	mls	r4, lr, r0, r1
 8003d58:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8003d5c:	fb08 f800 	mul.w	r8, r8, r0
 8003d60:	45a0      	cmp	r8, r4
 8003d62:	d907      	bls.n	8003d74 <__udivmoddi4+0x14c>
 8003d64:	192c      	adds	r4, r5, r4
 8003d66:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8003d6a:	d202      	bcs.n	8003d72 <__udivmoddi4+0x14a>
 8003d6c:	45a0      	cmp	r8, r4
 8003d6e:	f200 80b6 	bhi.w	8003ede <__udivmoddi4+0x2b6>
 8003d72:	4618      	mov	r0, r3
 8003d74:	eba4 0408 	sub.w	r4, r4, r8
 8003d78:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8003d7c:	e79f      	b.n	8003cbe <__udivmoddi4+0x96>
 8003d7e:	f1c7 0c20 	rsb	ip, r7, #32
 8003d82:	40bb      	lsls	r3, r7
 8003d84:	fa22 fe0c 	lsr.w	lr, r2, ip
 8003d88:	ea4e 0e03 	orr.w	lr, lr, r3
 8003d8c:	fa01 f407 	lsl.w	r4, r1, r7
 8003d90:	fa20 f50c 	lsr.w	r5, r0, ip
 8003d94:	fa21 f30c 	lsr.w	r3, r1, ip
 8003d98:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8003d9c:	4325      	orrs	r5, r4
 8003d9e:	fbb3 f9f8 	udiv	r9, r3, r8
 8003da2:	0c2c      	lsrs	r4, r5, #16
 8003da4:	fb08 3319 	mls	r3, r8, r9, r3
 8003da8:	fa1f fa8e 	uxth.w	sl, lr
 8003dac:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8003db0:	fb09 f40a 	mul.w	r4, r9, sl
 8003db4:	429c      	cmp	r4, r3
 8003db6:	fa02 f207 	lsl.w	r2, r2, r7
 8003dba:	fa00 f107 	lsl.w	r1, r0, r7
 8003dbe:	d90b      	bls.n	8003dd8 <__udivmoddi4+0x1b0>
 8003dc0:	eb1e 0303 	adds.w	r3, lr, r3
 8003dc4:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8003dc8:	f080 8087 	bcs.w	8003eda <__udivmoddi4+0x2b2>
 8003dcc:	429c      	cmp	r4, r3
 8003dce:	f240 8084 	bls.w	8003eda <__udivmoddi4+0x2b2>
 8003dd2:	f1a9 0902 	sub.w	r9, r9, #2
 8003dd6:	4473      	add	r3, lr
 8003dd8:	1b1b      	subs	r3, r3, r4
 8003dda:	b2ad      	uxth	r5, r5
 8003ddc:	fbb3 f0f8 	udiv	r0, r3, r8
 8003de0:	fb08 3310 	mls	r3, r8, r0, r3
 8003de4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8003de8:	fb00 fa0a 	mul.w	sl, r0, sl
 8003dec:	45a2      	cmp	sl, r4
 8003dee:	d908      	bls.n	8003e02 <__udivmoddi4+0x1da>
 8003df0:	eb1e 0404 	adds.w	r4, lr, r4
 8003df4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8003df8:	d26b      	bcs.n	8003ed2 <__udivmoddi4+0x2aa>
 8003dfa:	45a2      	cmp	sl, r4
 8003dfc:	d969      	bls.n	8003ed2 <__udivmoddi4+0x2aa>
 8003dfe:	3802      	subs	r0, #2
 8003e00:	4474      	add	r4, lr
 8003e02:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8003e06:	fba0 8902 	umull	r8, r9, r0, r2
 8003e0a:	eba4 040a 	sub.w	r4, r4, sl
 8003e0e:	454c      	cmp	r4, r9
 8003e10:	46c2      	mov	sl, r8
 8003e12:	464b      	mov	r3, r9
 8003e14:	d354      	bcc.n	8003ec0 <__udivmoddi4+0x298>
 8003e16:	d051      	beq.n	8003ebc <__udivmoddi4+0x294>
 8003e18:	2e00      	cmp	r6, #0
 8003e1a:	d069      	beq.n	8003ef0 <__udivmoddi4+0x2c8>
 8003e1c:	ebb1 050a 	subs.w	r5, r1, sl
 8003e20:	eb64 0403 	sbc.w	r4, r4, r3
 8003e24:	fa04 fc0c 	lsl.w	ip, r4, ip
 8003e28:	40fd      	lsrs	r5, r7
 8003e2a:	40fc      	lsrs	r4, r7
 8003e2c:	ea4c 0505 	orr.w	r5, ip, r5
 8003e30:	e9c6 5400 	strd	r5, r4, [r6]
 8003e34:	2700      	movs	r7, #0
 8003e36:	e747      	b.n	8003cc8 <__udivmoddi4+0xa0>
 8003e38:	f1c2 0320 	rsb	r3, r2, #32
 8003e3c:	fa20 f703 	lsr.w	r7, r0, r3
 8003e40:	4095      	lsls	r5, r2
 8003e42:	fa01 f002 	lsl.w	r0, r1, r2
 8003e46:	fa21 f303 	lsr.w	r3, r1, r3
 8003e4a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8003e4e:	4338      	orrs	r0, r7
 8003e50:	0c01      	lsrs	r1, r0, #16
 8003e52:	fbb3 f7fe 	udiv	r7, r3, lr
 8003e56:	fa1f f885 	uxth.w	r8, r5
 8003e5a:	fb0e 3317 	mls	r3, lr, r7, r3
 8003e5e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8003e62:	fb07 f308 	mul.w	r3, r7, r8
 8003e66:	428b      	cmp	r3, r1
 8003e68:	fa04 f402 	lsl.w	r4, r4, r2
 8003e6c:	d907      	bls.n	8003e7e <__udivmoddi4+0x256>
 8003e6e:	1869      	adds	r1, r5, r1
 8003e70:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8003e74:	d22f      	bcs.n	8003ed6 <__udivmoddi4+0x2ae>
 8003e76:	428b      	cmp	r3, r1
 8003e78:	d92d      	bls.n	8003ed6 <__udivmoddi4+0x2ae>
 8003e7a:	3f02      	subs	r7, #2
 8003e7c:	4429      	add	r1, r5
 8003e7e:	1acb      	subs	r3, r1, r3
 8003e80:	b281      	uxth	r1, r0
 8003e82:	fbb3 f0fe 	udiv	r0, r3, lr
 8003e86:	fb0e 3310 	mls	r3, lr, r0, r3
 8003e8a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8003e8e:	fb00 f308 	mul.w	r3, r0, r8
 8003e92:	428b      	cmp	r3, r1
 8003e94:	d907      	bls.n	8003ea6 <__udivmoddi4+0x27e>
 8003e96:	1869      	adds	r1, r5, r1
 8003e98:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8003e9c:	d217      	bcs.n	8003ece <__udivmoddi4+0x2a6>
 8003e9e:	428b      	cmp	r3, r1
 8003ea0:	d915      	bls.n	8003ece <__udivmoddi4+0x2a6>
 8003ea2:	3802      	subs	r0, #2
 8003ea4:	4429      	add	r1, r5
 8003ea6:	1ac9      	subs	r1, r1, r3
 8003ea8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8003eac:	e73b      	b.n	8003d26 <__udivmoddi4+0xfe>
 8003eae:	4637      	mov	r7, r6
 8003eb0:	4630      	mov	r0, r6
 8003eb2:	e709      	b.n	8003cc8 <__udivmoddi4+0xa0>
 8003eb4:	4607      	mov	r7, r0
 8003eb6:	e6e7      	b.n	8003c88 <__udivmoddi4+0x60>
 8003eb8:	4618      	mov	r0, r3
 8003eba:	e6fb      	b.n	8003cb4 <__udivmoddi4+0x8c>
 8003ebc:	4541      	cmp	r1, r8
 8003ebe:	d2ab      	bcs.n	8003e18 <__udivmoddi4+0x1f0>
 8003ec0:	ebb8 0a02 	subs.w	sl, r8, r2
 8003ec4:	eb69 020e 	sbc.w	r2, r9, lr
 8003ec8:	3801      	subs	r0, #1
 8003eca:	4613      	mov	r3, r2
 8003ecc:	e7a4      	b.n	8003e18 <__udivmoddi4+0x1f0>
 8003ece:	4660      	mov	r0, ip
 8003ed0:	e7e9      	b.n	8003ea6 <__udivmoddi4+0x27e>
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	e795      	b.n	8003e02 <__udivmoddi4+0x1da>
 8003ed6:	4667      	mov	r7, ip
 8003ed8:	e7d1      	b.n	8003e7e <__udivmoddi4+0x256>
 8003eda:	4681      	mov	r9, r0
 8003edc:	e77c      	b.n	8003dd8 <__udivmoddi4+0x1b0>
 8003ede:	3802      	subs	r0, #2
 8003ee0:	442c      	add	r4, r5
 8003ee2:	e747      	b.n	8003d74 <__udivmoddi4+0x14c>
 8003ee4:	f1ac 0c02 	sub.w	ip, ip, #2
 8003ee8:	442b      	add	r3, r5
 8003eea:	e72f      	b.n	8003d4c <__udivmoddi4+0x124>
 8003eec:	4638      	mov	r0, r7
 8003eee:	e708      	b.n	8003d02 <__udivmoddi4+0xda>
 8003ef0:	4637      	mov	r7, r6
 8003ef2:	e6e9      	b.n	8003cc8 <__udivmoddi4+0xa0>

08003ef4 <__aeabi_idiv0>:
 8003ef4:	4770      	bx	lr
 8003ef6:	bf00      	nop

08003ef8 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	b083      	sub	sp, #12
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8003f00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f08:	f023 0218 	bic.w	r2, r3, #24
 8003f0c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	4313      	orrs	r3, r2
 8003f14:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8003f18:	bf00      	nop
 8003f1a:	370c      	adds	r7, #12
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f22:	4770      	bx	lr

08003f24 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_ADC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8003f24:	b480      	push	{r7}
 8003f26:	b085      	sub	sp, #20
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8003f2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f30:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003f32:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8003f3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f40:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	4013      	ands	r3, r2
 8003f46:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003f48:	68fb      	ldr	r3, [r7, #12]
}
 8003f4a:	bf00      	nop
 8003f4c:	3714      	adds	r7, #20
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f54:	4770      	bx	lr

08003f56 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003f56:	b580      	push	{r7, lr}
 8003f58:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003f5a:	f000 fc99 	bl	8004890 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003f5e:	f000 f813 	bl	8003f88 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003f62:	f000 f9a3 	bl	80042ac <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8003f66:	f000 f92d 	bl	80041c4 <MX_USART1_UART_Init>
  MX_USB_PCD_Init();
 8003f6a:	f000 f977 	bl	800425c <MX_USB_PCD_Init>
  MX_CRC_Init();
 8003f6e:	f000 f8bb 	bl	80040e8 <MX_CRC_Init>
  MX_PKA_Init();
 8003f72:	f000 f8db 	bl	800412c <MX_PKA_Init>
  MX_RF_Init();
 8003f76:	f000 f8ed 	bl	8004154 <MX_RF_Init>
  MX_RNG_Init();
 8003f7a:	f000 f8f3 	bl	8004164 <MX_RNG_Init>
  MX_RTC_Init();
 8003f7e:	f000 f905 	bl	800418c <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  Forth();
 8003f82:	f7ff fd78 	bl	8003a76 <Forth>
 
 

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003f86:	e7fe      	b.n	8003f86 <main+0x30>

08003f88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b0ae      	sub	sp, #184	; 0xb8
 8003f8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003f8e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003f92:	2248      	movs	r2, #72	; 0x48
 8003f94:	2100      	movs	r1, #0
 8003f96:	4618      	mov	r0, r3
 8003f98:	f004 fc4c 	bl	8008834 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003f9c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	601a      	str	r2, [r3, #0]
 8003fa4:	605a      	str	r2, [r3, #4]
 8003fa6:	609a      	str	r2, [r3, #8]
 8003fa8:	60da      	str	r2, [r3, #12]
 8003faa:	611a      	str	r2, [r3, #16]
 8003fac:	615a      	str	r2, [r3, #20]
 8003fae:	619a      	str	r2, [r3, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003fb0:	1d3b      	adds	r3, r7, #4
 8003fb2:	2250      	movs	r2, #80	; 0x50
 8003fb4:	2100      	movs	r1, #0
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	f004 fc3c 	bl	8008834 <memset>

  /** Macro to configure the PLL multiplication factor 
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 8003fbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fc0:	68db      	ldr	r3, [r3, #12]
 8003fc2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003fc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fca:	60d3      	str	r3, [r2, #12]
  /** Macro to configure the PLL clock source 
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 8003fcc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fd0:	68db      	ldr	r3, [r3, #12]
 8003fd2:	f023 0303 	bic.w	r3, r3, #3
 8003fd6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003fda:	f043 0301 	orr.w	r3, r3, #1
 8003fde:	60d3      	str	r3, [r2, #12]
  /** Configure LSE Drive Capability 
  */
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8003fe0:	2000      	movs	r0, #0
 8003fe2:	f7ff ff89 	bl	8003ef8 <LL_RCC_LSE_SetDriveCapability>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003fe6:	4b3f      	ldr	r3, [pc, #252]	; (80040e4 <SystemClock_Config+0x15c>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003fee:	4a3d      	ldr	r2, [pc, #244]	; (80040e4 <SystemClock_Config+0x15c>)
 8003ff0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003ff4:	6013      	str	r3, [r2, #0]
 8003ff6:	4b3b      	ldr	r3, [pc, #236]	; (80040e4 <SystemClock_Config+0x15c>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003ffe:	603b      	str	r3, [r7, #0]
 8004000:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI1
 8004002:	232f      	movs	r3, #47	; 0x2f
 8004004:	673b      	str	r3, [r7, #112]	; 0x70
                              |RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004006:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800400a:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800400c:	2301      	movs	r3, #1
 800400e:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004010:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004014:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8004016:	2301      	movs	r3, #1
 8004018:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800401c:	2340      	movs	r3, #64	; 0x40
 800401e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8004022:	2300      	movs	r3, #0
 8004024:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8004028:	2360      	movs	r3, #96	; 0x60
 800402a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800402e:	2305      	movs	r3, #5
 8004030:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8004034:	2300      	movs	r3, #0
 8004036:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800403a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800403e:	4618      	mov	r0, r3
 8004040:	f001 fcc6 	bl	80059d0 <HAL_RCC_OscConfig>
 8004044:	4603      	mov	r3, r0
 8004046:	2b00      	cmp	r3, #0
 8004048:	d001      	beq.n	800404e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800404a:	f000 f977 	bl	800433c <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 800404e:	236f      	movs	r3, #111	; 0x6f
 8004050:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8004052:	2302      	movs	r3, #2
 8004054:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004056:	2300      	movs	r3, #0
 8004058:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800405a:	2300      	movs	r3, #0
 800405c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800405e:	2300      	movs	r3, #0
 8004060:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8004062:	2300      	movs	r3, #0
 8004064:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8004066:	2300      	movs	r3, #0
 8004068:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800406a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800406e:	2101      	movs	r1, #1
 8004070:	4618      	mov	r0, r3
 8004072:	f002 f80b 	bl	800608c <HAL_RCC_ClockConfig>
 8004076:	4603      	mov	r3, r0
 8004078:	2b00      	cmp	r3, #0
 800407a:	d001      	beq.n	8004080 <SystemClock_Config+0xf8>
  {
    Error_Handler();
 800407c:	f000 f95e 	bl	800433c <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP
 8004080:	f643 3301 	movw	r3, #15105	; 0x3b01
 8004084:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
                              |RCC_PERIPHCLK_USB|RCC_PERIPHCLK_RNG;
  PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 8004086:	2318      	movs	r3, #24
 8004088:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 800408a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800408e:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8004090:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004094:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8004096:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800409a:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 800409c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80040a0:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80040a2:	2300      	movs	r3, #0
 80040a4:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80040a6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80040aa:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_LSI;
 80040ac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80040b0:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80040b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80040b6:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSI;
 80040b8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80040bc:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 80040be:	2302      	movs	r3, #2
 80040c0:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 80040c2:	2300      	movs	r3, #0
 80040c4:	653b      	str	r3, [r7, #80]	; 0x50

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80040c6:	1d3b      	adds	r3, r7, #4
 80040c8:	4618      	mov	r0, r3
 80040ca:	f002 fc29 	bl	8006920 <HAL_RCCEx_PeriphCLKConfig>
 80040ce:	4603      	mov	r3, r0
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d001      	beq.n	80040d8 <SystemClock_Config+0x150>
  {
    Error_Handler();
 80040d4:	f000 f932 	bl	800433c <Error_Handler>
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
  /** Enable MSI Auto calibration 
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80040d8:	f002 fd97 	bl	8006c0a <HAL_RCCEx_EnableMSIPLLMode>
}
 80040dc:	bf00      	nop
 80040de:	37b8      	adds	r7, #184	; 0xb8
 80040e0:	46bd      	mov	sp, r7
 80040e2:	bd80      	pop	{r7, pc}
 80040e4:	58000400 	.word	0x58000400

080040e8 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80040ec:	4b0d      	ldr	r3, [pc, #52]	; (8004124 <MX_CRC_Init+0x3c>)
 80040ee:	4a0e      	ldr	r2, [pc, #56]	; (8004128 <MX_CRC_Init+0x40>)
 80040f0:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80040f2:	4b0c      	ldr	r3, [pc, #48]	; (8004124 <MX_CRC_Init+0x3c>)
 80040f4:	2200      	movs	r2, #0
 80040f6:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80040f8:	4b0a      	ldr	r3, [pc, #40]	; (8004124 <MX_CRC_Init+0x3c>)
 80040fa:	2200      	movs	r2, #0
 80040fc:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80040fe:	4b09      	ldr	r3, [pc, #36]	; (8004124 <MX_CRC_Init+0x3c>)
 8004100:	2200      	movs	r2, #0
 8004102:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8004104:	4b07      	ldr	r3, [pc, #28]	; (8004124 <MX_CRC_Init+0x3c>)
 8004106:	2200      	movs	r2, #0
 8004108:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800410a:	4b06      	ldr	r3, [pc, #24]	; (8004124 <MX_CRC_Init+0x3c>)
 800410c:	2201      	movs	r2, #1
 800410e:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8004110:	4804      	ldr	r0, [pc, #16]	; (8004124 <MX_CRC_Init+0x3c>)
 8004112:	f000 fd25 	bl	8004b60 <HAL_CRC_Init>
 8004116:	4603      	mov	r3, r0
 8004118:	2b00      	cmp	r3, #0
 800411a:	d001      	beq.n	8004120 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 800411c:	f000 f90e 	bl	800433c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8004120:	bf00      	nop
 8004122:	bd80      	pop	{r7, pc}
 8004124:	2000002c 	.word	0x2000002c
 8004128:	40023000 	.word	0x40023000

0800412c <MX_PKA_Init>:
  * @brief PKA Initialization Function
  * @param None
  * @retval None
  */
static void MX_PKA_Init(void)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	af00      	add	r7, sp, #0
  /* USER CODE END PKA_Init 0 */

  /* USER CODE BEGIN PKA_Init 1 */

  /* USER CODE END PKA_Init 1 */
  hpka.Instance = PKA;
 8004130:	4b06      	ldr	r3, [pc, #24]	; (800414c <MX_PKA_Init+0x20>)
 8004132:	4a07      	ldr	r2, [pc, #28]	; (8004150 <MX_PKA_Init+0x24>)
 8004134:	601a      	str	r2, [r3, #0]
  if (HAL_PKA_Init(&hpka) != HAL_OK)
 8004136:	4805      	ldr	r0, [pc, #20]	; (800414c <MX_PKA_Init+0x20>)
 8004138:	f001 f869 	bl	800520e <HAL_PKA_Init>
 800413c:	4603      	mov	r3, r0
 800413e:	2b00      	cmp	r3, #0
 8004140:	d001      	beq.n	8004146 <MX_PKA_Init+0x1a>
  {
    Error_Handler();
 8004142:	f000 f8fb 	bl	800433c <Error_Handler>
  }
  /* USER CODE BEGIN PKA_Init 2 */

  /* USER CODE END PKA_Init 2 */

}
 8004146:	bf00      	nop
 8004148:	bd80      	pop	{r7, pc}
 800414a:	bf00      	nop
 800414c:	20000114 	.word	0x20000114
 8004150:	58002000 	.word	0x58002000

08004154 <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 8004154:	b480      	push	{r7}
 8004156:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8004158:	bf00      	nop
 800415a:	46bd      	mov	sp, r7
 800415c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004160:	4770      	bx	lr
	...

08004164 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8004168:	4b06      	ldr	r3, [pc, #24]	; (8004184 <MX_RNG_Init+0x20>)
 800416a:	4a07      	ldr	r2, [pc, #28]	; (8004188 <MX_RNG_Init+0x24>)
 800416c:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 800416e:	4805      	ldr	r0, [pc, #20]	; (8004184 <MX_RNG_Init+0x20>)
 8004170:	f002 fe62 	bl	8006e38 <HAL_RNG_Init>
 8004174:	4603      	mov	r3, r0
 8004176:	2b00      	cmp	r3, #0
 8004178:	d001      	beq.n	800417e <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 800417a:	f000 f8df 	bl	800433c <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 800417e:	bf00      	nop
 8004180:	bd80      	pop	{r7, pc}
 8004182:	bf00      	nop
 8004184:	20000100 	.word	0x20000100
 8004188:	58001000 	.word	0x58001000

0800418c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8004190:	4b0a      	ldr	r3, [pc, #40]	; (80041bc <MX_RTC_Init+0x30>)
 8004192:	4a0b      	ldr	r2, [pc, #44]	; (80041c0 <MX_RTC_Init+0x34>)
 8004194:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8004196:	4b09      	ldr	r3, [pc, #36]	; (80041bc <MX_RTC_Init+0x30>)
 8004198:	2200      	movs	r2, #0
 800419a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800419c:	4b07      	ldr	r3, [pc, #28]	; (80041bc <MX_RTC_Init+0x30>)
 800419e:	227f      	movs	r2, #127	; 0x7f
 80041a0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80041a2:	4b06      	ldr	r3, [pc, #24]	; (80041bc <MX_RTC_Init+0x30>)
 80041a4:	22ff      	movs	r2, #255	; 0xff
 80041a6:	60da      	str	r2, [r3, #12]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80041a8:	4804      	ldr	r0, [pc, #16]	; (80041bc <MX_RTC_Init+0x30>)
 80041aa:	f002 fe7a 	bl	8006ea2 <HAL_RTC_Init>
 80041ae:	4603      	mov	r3, r0
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d001      	beq.n	80041b8 <MX_RTC_Init+0x2c>
  {
    Error_Handler();
 80041b4:	f000 f8c2 	bl	800433c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80041b8:	bf00      	nop
 80041ba:	bd80      	pop	{r7, pc}
 80041bc:	200000dc 	.word	0x200000dc
 80041c0:	40002800 	.word	0x40002800

080041c4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80041c8:	4b22      	ldr	r3, [pc, #136]	; (8004254 <MX_USART1_UART_Init+0x90>)
 80041ca:	4a23      	ldr	r2, [pc, #140]	; (8004258 <MX_USART1_UART_Init+0x94>)
 80041cc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80041ce:	4b21      	ldr	r3, [pc, #132]	; (8004254 <MX_USART1_UART_Init+0x90>)
 80041d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80041d4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80041d6:	4b1f      	ldr	r3, [pc, #124]	; (8004254 <MX_USART1_UART_Init+0x90>)
 80041d8:	2200      	movs	r2, #0
 80041da:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80041dc:	4b1d      	ldr	r3, [pc, #116]	; (8004254 <MX_USART1_UART_Init+0x90>)
 80041de:	2200      	movs	r2, #0
 80041e0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80041e2:	4b1c      	ldr	r3, [pc, #112]	; (8004254 <MX_USART1_UART_Init+0x90>)
 80041e4:	2200      	movs	r2, #0
 80041e6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80041e8:	4b1a      	ldr	r3, [pc, #104]	; (8004254 <MX_USART1_UART_Init+0x90>)
 80041ea:	220c      	movs	r2, #12
 80041ec:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80041ee:	4b19      	ldr	r3, [pc, #100]	; (8004254 <MX_USART1_UART_Init+0x90>)
 80041f0:	2200      	movs	r2, #0
 80041f2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80041f4:	4b17      	ldr	r3, [pc, #92]	; (8004254 <MX_USART1_UART_Init+0x90>)
 80041f6:	2200      	movs	r2, #0
 80041f8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80041fa:	4b16      	ldr	r3, [pc, #88]	; (8004254 <MX_USART1_UART_Init+0x90>)
 80041fc:	2200      	movs	r2, #0
 80041fe:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004200:	4b14      	ldr	r3, [pc, #80]	; (8004254 <MX_USART1_UART_Init+0x90>)
 8004202:	2200      	movs	r2, #0
 8004204:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004206:	4b13      	ldr	r3, [pc, #76]	; (8004254 <MX_USART1_UART_Init+0x90>)
 8004208:	2200      	movs	r2, #0
 800420a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800420c:	4811      	ldr	r0, [pc, #68]	; (8004254 <MX_USART1_UART_Init+0x90>)
 800420e:	f002 ff56 	bl	80070be <HAL_UART_Init>
 8004212:	4603      	mov	r3, r0
 8004214:	2b00      	cmp	r3, #0
 8004216:	d001      	beq.n	800421c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8004218:	f000 f890 	bl	800433c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800421c:	2100      	movs	r1, #0
 800421e:	480d      	ldr	r0, [pc, #52]	; (8004254 <MX_USART1_UART_Init+0x90>)
 8004220:	f004 f9a5 	bl	800856e <HAL_UARTEx_SetTxFifoThreshold>
 8004224:	4603      	mov	r3, r0
 8004226:	2b00      	cmp	r3, #0
 8004228:	d001      	beq.n	800422e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800422a:	f000 f887 	bl	800433c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800422e:	2100      	movs	r1, #0
 8004230:	4808      	ldr	r0, [pc, #32]	; (8004254 <MX_USART1_UART_Init+0x90>)
 8004232:	f004 f9da 	bl	80085ea <HAL_UARTEx_SetRxFifoThreshold>
 8004236:	4603      	mov	r3, r0
 8004238:	2b00      	cmp	r3, #0
 800423a:	d001      	beq.n	8004240 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800423c:	f000 f87e 	bl	800433c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8004240:	4804      	ldr	r0, [pc, #16]	; (8004254 <MX_USART1_UART_Init+0x90>)
 8004242:	f004 f95b 	bl	80084fc <HAL_UARTEx_DisableFifoMode>
 8004246:	4603      	mov	r3, r0
 8004248:	2b00      	cmp	r3, #0
 800424a:	d001      	beq.n	8004250 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800424c:	f000 f876 	bl	800433c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004250:	bf00      	nop
 8004252:	bd80      	pop	{r7, pc}
 8004254:	20000050 	.word	0x20000050
 8004258:	40013800 	.word	0x40013800

0800425c <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8004260:	4b10      	ldr	r3, [pc, #64]	; (80042a4 <MX_USB_PCD_Init+0x48>)
 8004262:	4a11      	ldr	r2, [pc, #68]	; (80042a8 <MX_USB_PCD_Init+0x4c>)
 8004264:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8004266:	4b0f      	ldr	r3, [pc, #60]	; (80042a4 <MX_USB_PCD_Init+0x48>)
 8004268:	2208      	movs	r2, #8
 800426a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800426c:	4b0d      	ldr	r3, [pc, #52]	; (80042a4 <MX_USB_PCD_Init+0x48>)
 800426e:	2202      	movs	r2, #2
 8004270:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8004272:	4b0c      	ldr	r3, [pc, #48]	; (80042a4 <MX_USB_PCD_Init+0x48>)
 8004274:	2202      	movs	r2, #2
 8004276:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8004278:	4b0a      	ldr	r3, [pc, #40]	; (80042a4 <MX_USB_PCD_Init+0x48>)
 800427a:	2200      	movs	r2, #0
 800427c:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800427e:	4b09      	ldr	r3, [pc, #36]	; (80042a4 <MX_USB_PCD_Init+0x48>)
 8004280:	2200      	movs	r2, #0
 8004282:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8004284:	4b07      	ldr	r3, [pc, #28]	; (80042a4 <MX_USB_PCD_Init+0x48>)
 8004286:	2200      	movs	r2, #0
 8004288:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800428a:	4b06      	ldr	r3, [pc, #24]	; (80042a4 <MX_USB_PCD_Init+0x48>)
 800428c:	2200      	movs	r2, #0
 800428e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8004290:	4804      	ldr	r0, [pc, #16]	; (80042a4 <MX_USB_PCD_Init+0x48>)
 8004292:	f000 fed7 	bl	8005044 <HAL_PCD_Init>
 8004296:	4603      	mov	r3, r0
 8004298:	2b00      	cmp	r3, #0
 800429a:	d001      	beq.n	80042a0 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 800429c:	f000 f84e 	bl	800433c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 80042a0:	bf00      	nop
 80042a2:	bd80      	pop	{r7, pc}
 80042a4:	20000120 	.word	0x20000120
 80042a8:	40006800 	.word	0x40006800

080042ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b086      	sub	sp, #24
 80042b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042b2:	1d3b      	adds	r3, r7, #4
 80042b4:	2200      	movs	r2, #0
 80042b6:	601a      	str	r2, [r3, #0]
 80042b8:	605a      	str	r2, [r3, #4]
 80042ba:	609a      	str	r2, [r3, #8]
 80042bc:	60da      	str	r2, [r3, #12]
 80042be:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80042c0:	2004      	movs	r0, #4
 80042c2:	f7ff fe2f 	bl	8003f24 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80042c6:	2002      	movs	r0, #2
 80042c8:	f7ff fe2c 	bl	8003f24 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80042cc:	2001      	movs	r0, #1
 80042ce:	f7ff fe29 	bl	8003f24 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80042d2:	2008      	movs	r0, #8
 80042d4:	f7ff fe26 	bl	8003f24 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 80042d8:	2200      	movs	r2, #0
 80042da:	2123      	movs	r1, #35	; 0x23
 80042dc:	4814      	ldr	r0, [pc, #80]	; (8004330 <MX_GPIO_Init+0x84>)
 80042de:	f000 fe99 	bl	8005014 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80042e2:	2310      	movs	r3, #16
 80042e4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80042e6:	2300      	movs	r3, #0
 80042e8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042ea:	2300      	movs	r3, #0
 80042ec:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80042ee:	1d3b      	adds	r3, r7, #4
 80042f0:	4619      	mov	r1, r3
 80042f2:	4810      	ldr	r0, [pc, #64]	; (8004334 <MX_GPIO_Init+0x88>)
 80042f4:	f000 fd1e 	bl	8004d34 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 80042f8:	2323      	movs	r3, #35	; 0x23
 80042fa:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80042fc:	2301      	movs	r3, #1
 80042fe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004300:	2300      	movs	r3, #0
 8004302:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004304:	2300      	movs	r3, #0
 8004306:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004308:	1d3b      	adds	r3, r7, #4
 800430a:	4619      	mov	r1, r3
 800430c:	4808      	ldr	r0, [pc, #32]	; (8004330 <MX_GPIO_Init+0x84>)
 800430e:	f000 fd11 	bl	8004d34 <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 8004312:	2303      	movs	r3, #3
 8004314:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004316:	2300      	movs	r3, #0
 8004318:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800431a:	2300      	movs	r3, #0
 800431c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800431e:	1d3b      	adds	r3, r7, #4
 8004320:	4619      	mov	r1, r3
 8004322:	4805      	ldr	r0, [pc, #20]	; (8004338 <MX_GPIO_Init+0x8c>)
 8004324:	f000 fd06 	bl	8004d34 <HAL_GPIO_Init>

}
 8004328:	bf00      	nop
 800432a:	3718      	adds	r7, #24
 800432c:	46bd      	mov	sp, r7
 800432e:	bd80      	pop	{r7, pc}
 8004330:	48000400 	.word	0x48000400
 8004334:	48000800 	.word	0x48000800
 8004338:	48000c00 	.word	0x48000c00

0800433c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800433c:	b480      	push	{r7}
 800433e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8004340:	bf00      	nop
 8004342:	46bd      	mov	sp, r7
 8004344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004348:	4770      	bx	lr

0800434a <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 800434a:	b480      	push	{r7}
 800434c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 800434e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004352:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004356:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800435a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800435e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004362:	bf00      	nop
 8004364:	46bd      	mov	sp, r7
 8004366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436a:	4770      	bx	lr

0800436c <LL_AHB1_GRP1_EnableClock>:
{
 800436c:	b480      	push	{r7}
 800436e:	b085      	sub	sp, #20
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8004374:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004378:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800437a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	4313      	orrs	r3, r2
 8004382:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8004384:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004388:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	4013      	ands	r3, r2
 800438e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004390:	68fb      	ldr	r3, [r7, #12]
}
 8004392:	bf00      	nop
 8004394:	3714      	adds	r7, #20
 8004396:	46bd      	mov	sp, r7
 8004398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439c:	4770      	bx	lr

0800439e <LL_AHB2_GRP1_EnableClock>:
{
 800439e:	b480      	push	{r7}
 80043a0:	b085      	sub	sp, #20
 80043a2:	af00      	add	r7, sp, #0
 80043a4:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80043a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043aa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80043ac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	4313      	orrs	r3, r2
 80043b4:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80043b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	4013      	ands	r3, r2
 80043c0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80043c2:	68fb      	ldr	r3, [r7, #12]
}
 80043c4:	bf00      	nop
 80043c6:	3714      	adds	r7, #20
 80043c8:	46bd      	mov	sp, r7
 80043ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ce:	4770      	bx	lr

080043d0 <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @retval None
*/
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 80043d0:	b480      	push	{r7}
 80043d2:	b085      	sub	sp, #20
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 80043d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043dc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80043de:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	4313      	orrs	r3, r2
 80043e6:	650b      	str	r3, [r1, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80043e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043ec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	4013      	ands	r3, r2
 80043f2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80043f4:	68fb      	ldr	r3, [r7, #12]
}
 80043f6:	bf00      	nop
 80043f8:	3714      	adds	r7, #20
 80043fa:	46bd      	mov	sp, r7
 80043fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004400:	4770      	bx	lr

08004402 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_USB
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8004402:	b480      	push	{r7}
 8004404:	b085      	sub	sp, #20
 8004406:	af00      	add	r7, sp, #0
 8004408:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 800440a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800440e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004410:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	4313      	orrs	r3, r2
 8004418:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800441a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800441e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	4013      	ands	r3, r2
 8004424:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004426:	68fb      	ldr	r3, [r7, #12]
}
 8004428:	bf00      	nop
 800442a:	3714      	adds	r7, #20
 800442c:	46bd      	mov	sp, r7
 800442e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004432:	4770      	bx	lr

08004434 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8004434:	b480      	push	{r7}
 8004436:	b085      	sub	sp, #20
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800443c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004440:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004442:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	4313      	orrs	r3, r2
 800444a:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800444c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004450:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	4013      	ands	r3, r2
 8004456:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004458:	68fb      	ldr	r3, [r7, #12]
}
 800445a:	bf00      	nop
 800445c:	3714      	adds	r7, #20
 800445e:	46bd      	mov	sp, r7
 8004460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004464:	4770      	bx	lr

08004466 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004466:	b580      	push	{r7, lr}
 8004468:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 800446a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800446e:	f7ff ffaf 	bl	80043d0 <LL_AHB3_GRP1_EnableClock>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004472:	bf00      	nop
 8004474:	bd80      	pop	{r7, pc}
	...

08004478 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b082      	sub	sp, #8
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a05      	ldr	r2, [pc, #20]	; (800449c <HAL_CRC_MspInit+0x24>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d103      	bne.n	8004492 <HAL_CRC_MspInit+0x1a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800448a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800448e:	f7ff ff6d 	bl	800436c <LL_AHB1_GRP1_EnableClock>
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8004492:	bf00      	nop
 8004494:	3708      	adds	r7, #8
 8004496:	46bd      	mov	sp, r7
 8004498:	bd80      	pop	{r7, pc}
 800449a:	bf00      	nop
 800449c:	40023000 	.word	0x40023000

080044a0 <HAL_PKA_MspInit>:
* This function configures the hardware resources used in this example
* @param hpka: PKA handle pointer
* @retval None
*/
void HAL_PKA_MspInit(PKA_HandleTypeDef* hpka)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b082      	sub	sp, #8
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
  if(hpka->Instance==PKA)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a05      	ldr	r2, [pc, #20]	; (80044c4 <HAL_PKA_MspInit+0x24>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d103      	bne.n	80044ba <HAL_PKA_MspInit+0x1a>
  {
  /* USER CODE BEGIN PKA_MspInit 0 */

  /* USER CODE END PKA_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_PKA_CLK_ENABLE();
 80044b2:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80044b6:	f7ff ff8b 	bl	80043d0 <LL_AHB3_GRP1_EnableClock>
  /* USER CODE BEGIN PKA_MspInit 1 */

  /* USER CODE END PKA_MspInit 1 */
  }

}
 80044ba:	bf00      	nop
 80044bc:	3708      	adds	r7, #8
 80044be:	46bd      	mov	sp, r7
 80044c0:	bd80      	pop	{r7, pc}
 80044c2:	bf00      	nop
 80044c4:	58002000 	.word	0x58002000

080044c8 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b082      	sub	sp, #8
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a05      	ldr	r2, [pc, #20]	; (80044ec <HAL_RNG_MspInit+0x24>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d103      	bne.n	80044e2 <HAL_RNG_MspInit+0x1a>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 80044da:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80044de:	f7ff ff77 	bl	80043d0 <LL_AHB3_GRP1_EnableClock>
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 80044e2:	bf00      	nop
 80044e4:	3708      	adds	r7, #8
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bd80      	pop	{r7, pc}
 80044ea:	bf00      	nop
 80044ec:	58001000 	.word	0x58001000

080044f0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b082      	sub	sp, #8
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4a04      	ldr	r2, [pc, #16]	; (8004510 <HAL_RTC_MspInit+0x20>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d101      	bne.n	8004506 <HAL_RTC_MspInit+0x16>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8004502:	f7ff ff22 	bl	800434a <LL_RCC_EnableRTC>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8004506:	bf00      	nop
 8004508:	3708      	adds	r7, #8
 800450a:	46bd      	mov	sp, r7
 800450c:	bd80      	pop	{r7, pc}
 800450e:	bf00      	nop
 8004510:	40002800 	.word	0x40002800

08004514 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b088      	sub	sp, #32
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800451c:	f107 030c 	add.w	r3, r7, #12
 8004520:	2200      	movs	r2, #0
 8004522:	601a      	str	r2, [r3, #0]
 8004524:	605a      	str	r2, [r3, #4]
 8004526:	609a      	str	r2, [r3, #8]
 8004528:	60da      	str	r2, [r3, #12]
 800452a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4a0e      	ldr	r2, [pc, #56]	; (800456c <HAL_UART_MspInit+0x58>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d116      	bne.n	8004564 <HAL_UART_MspInit+0x50>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004536:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800453a:	f7ff ff7b 	bl	8004434 <LL_APB2_GRP1_EnableClock>
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800453e:	2002      	movs	r0, #2
 8004540:	f7ff ff2d 	bl	800439e <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration    
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8004544:	23c0      	movs	r3, #192	; 0xc0
 8004546:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004548:	2302      	movs	r3, #2
 800454a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800454c:	2300      	movs	r3, #0
 800454e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004550:	2300      	movs	r3, #0
 8004552:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004554:	2307      	movs	r3, #7
 8004556:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004558:	f107 030c 	add.w	r3, r7, #12
 800455c:	4619      	mov	r1, r3
 800455e:	4804      	ldr	r0, [pc, #16]	; (8004570 <HAL_UART_MspInit+0x5c>)
 8004560:	f000 fbe8 	bl	8004d34 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8004564:	bf00      	nop
 8004566:	3720      	adds	r7, #32
 8004568:	46bd      	mov	sp, r7
 800456a:	bd80      	pop	{r7, pc}
 800456c:	40013800 	.word	0x40013800
 8004570:	48000400 	.word	0x48000400

08004574 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b088      	sub	sp, #32
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800457c:	f107 030c 	add.w	r3, r7, #12
 8004580:	2200      	movs	r2, #0
 8004582:	601a      	str	r2, [r3, #0]
 8004584:	605a      	str	r2, [r3, #4]
 8004586:	609a      	str	r2, [r3, #8]
 8004588:	60da      	str	r2, [r3, #12]
 800458a:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4a0f      	ldr	r2, [pc, #60]	; (80045d0 <HAL_PCD_MspInit+0x5c>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d118      	bne.n	80045c8 <HAL_PCD_MspInit+0x54>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004596:	2001      	movs	r0, #1
 8004598:	f7ff ff01 	bl	800439e <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration    
    PA11     ------> USB_DM
    PA12     ------> USB_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800459c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80045a0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045a2:	2302      	movs	r3, #2
 80045a4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045a6:	2300      	movs	r3, #0
 80045a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045aa:	2300      	movs	r3, #0
 80045ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 80045ae:	230a      	movs	r3, #10
 80045b0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045b2:	f107 030c 	add.w	r3, r7, #12
 80045b6:	4619      	mov	r1, r3
 80045b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80045bc:	f000 fbba 	bl	8004d34 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80045c0:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80045c4:	f7ff ff1d 	bl	8004402 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 80045c8:	bf00      	nop
 80045ca:	3720      	adds	r7, #32
 80045cc:	46bd      	mov	sp, r7
 80045ce:	bd80      	pop	{r7, pc}
 80045d0:	40006800 	.word	0x40006800

080045d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80045d4:	b480      	push	{r7}
 80045d6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80045d8:	bf00      	nop
 80045da:	46bd      	mov	sp, r7
 80045dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e0:	4770      	bx	lr

080045e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80045e2:	b480      	push	{r7}
 80045e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80045e6:	e7fe      	b.n	80045e6 <HardFault_Handler+0x4>

080045e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80045e8:	b480      	push	{r7}
 80045ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80045ec:	e7fe      	b.n	80045ec <MemManage_Handler+0x4>

080045ee <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80045ee:	b480      	push	{r7}
 80045f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80045f2:	e7fe      	b.n	80045f2 <BusFault_Handler+0x4>

080045f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80045f4:	b480      	push	{r7}
 80045f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80045f8:	e7fe      	b.n	80045f8 <UsageFault_Handler+0x4>

080045fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80045fa:	b480      	push	{r7}
 80045fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80045fe:	bf00      	nop
 8004600:	46bd      	mov	sp, r7
 8004602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004606:	4770      	bx	lr

08004608 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004608:	b480      	push	{r7}
 800460a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800460c:	bf00      	nop
 800460e:	46bd      	mov	sp, r7
 8004610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004614:	4770      	bx	lr

08004616 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004616:	b480      	push	{r7}
 8004618:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800461a:	bf00      	nop
 800461c:	46bd      	mov	sp, r7
 800461e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004622:	4770      	bx	lr

08004624 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004628:	f000 f98c 	bl	8004944 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800462c:	bf00      	nop
 800462e:	bd80      	pop	{r7, pc}

08004630 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004630:	b480      	push	{r7}
 8004632:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 8004634:	4b26      	ldr	r3, [pc, #152]	; (80046d0 <SystemInit+0xa0>)
 8004636:	2200      	movs	r2, #0
 8004638:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 800463a:	4b25      	ldr	r3, [pc, #148]	; (80046d0 <SystemInit+0xa0>)
 800463c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004640:	4a23      	ldr	r2, [pc, #140]	; (80046d0 <SystemInit+0xa0>)
 8004642:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004646:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800464a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004654:	f043 0301 	orr.w	r3, r3, #1
 8004658:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 800465a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800465e:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8004662:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8004664:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004668:	681a      	ldr	r2, [r3, #0]
 800466a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800466e:	4b19      	ldr	r3, [pc, #100]	; (80046d4 <SystemInit+0xa4>)
 8004670:	4013      	ands	r3, r2
 8004672:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8004674:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004678:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800467c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004680:	f023 0305 	bic.w	r3, r3, #5
 8004684:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8004688:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800468c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004690:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004694:	f023 0301 	bic.w	r3, r3, #1
 8004698:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 800469c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046a0:	4a0d      	ldr	r2, [pc, #52]	; (80046d8 <SystemInit+0xa8>)
 80046a2:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 80046a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046a8:	4a0b      	ldr	r2, [pc, #44]	; (80046d8 <SystemInit+0xa8>)
 80046aa:	611a      	str	r2, [r3, #16]
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80046ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80046b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80046ba:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80046bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046c0:	2200      	movs	r2, #0
 80046c2:	619a      	str	r2, [r3, #24]
}
 80046c4:	bf00      	nop
 80046c6:	46bd      	mov	sp, r7
 80046c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046cc:	4770      	bx	lr
 80046ce:	bf00      	nop
 80046d0:	e000ed00 	.word	0xe000ed00
 80046d4:	faf6fefb 	.word	0xfaf6fefb
 80046d8:	22041000 	.word	0x22041000

080046dc <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 80046dc:	b480      	push	{r7}
 80046de:	b087      	sub	sp, #28
 80046e0:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllr, pllsource , pllm;

  /* Get MSI Range frequency--------------------------------------------------*/

  /*MSI frequency range in Hz*/
  msirange = MSIRangeTable[(RCC->CR & RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos];
 80046e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	091b      	lsrs	r3, r3, #4
 80046ea:	f003 030f 	and.w	r3, r3, #15
 80046ee:	4a47      	ldr	r2, [pc, #284]	; (800480c <SystemCoreClockUpdate+0x130>)
 80046f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046f4:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80046f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046fa:	689b      	ldr	r3, [r3, #8]
 80046fc:	f003 030c 	and.w	r3, r3, #12
 8004700:	2b0c      	cmp	r3, #12
 8004702:	d867      	bhi.n	80047d4 <SystemCoreClockUpdate+0xf8>
 8004704:	a201      	add	r2, pc, #4	; (adr r2, 800470c <SystemCoreClockUpdate+0x30>)
 8004706:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800470a:	bf00      	nop
 800470c:	08004741 	.word	0x08004741
 8004710:	080047d5 	.word	0x080047d5
 8004714:	080047d5 	.word	0x080047d5
 8004718:	080047d5 	.word	0x080047d5
 800471c:	08004749 	.word	0x08004749
 8004720:	080047d5 	.word	0x080047d5
 8004724:	080047d5 	.word	0x080047d5
 8004728:	080047d5 	.word	0x080047d5
 800472c:	08004751 	.word	0x08004751
 8004730:	080047d5 	.word	0x080047d5
 8004734:	080047d5 	.word	0x080047d5
 8004738:	080047d5 	.word	0x080047d5
 800473c:	08004759 	.word	0x08004759
  {
    case 0x00:   /* MSI used as system clock source */
      SystemCoreClock = msirange;
 8004740:	4a33      	ldr	r2, [pc, #204]	; (8004810 <SystemCoreClockUpdate+0x134>)
 8004742:	693b      	ldr	r3, [r7, #16]
 8004744:	6013      	str	r3, [r2, #0]
      break;
 8004746:	e049      	b.n	80047dc <SystemCoreClockUpdate+0x100>

    case 0x04:  /* HSI used as system clock source */
      /* HSI used as system clock source */
        SystemCoreClock = HSI_VALUE;
 8004748:	4b31      	ldr	r3, [pc, #196]	; (8004810 <SystemCoreClockUpdate+0x134>)
 800474a:	4a32      	ldr	r2, [pc, #200]	; (8004814 <SystemCoreClockUpdate+0x138>)
 800474c:	601a      	str	r2, [r3, #0]
      break;
 800474e:	e045      	b.n	80047dc <SystemCoreClockUpdate+0x100>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8004750:	4b2f      	ldr	r3, [pc, #188]	; (8004810 <SystemCoreClockUpdate+0x134>)
 8004752:	4a31      	ldr	r2, [pc, #196]	; (8004818 <SystemCoreClockUpdate+0x13c>)
 8004754:	601a      	str	r2, [r3, #0]
      break;
 8004756:	e041      	b.n	80047dc <SystemCoreClockUpdate+0x100>

    case 0x0C: /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8004758:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800475c:	68db      	ldr	r3, [r3, #12]
 800475e:	f003 0303 	and.w	r3, r3, #3
 8004762:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1UL ;
 8004764:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004768:	68db      	ldr	r3, [r3, #12]
 800476a:	091b      	lsrs	r3, r3, #4
 800476c:	f003 0307 	and.w	r3, r3, #7
 8004770:	3301      	adds	r3, #1
 8004772:	60bb      	str	r3, [r7, #8]

      if(pllsource == 0x02UL) /* HSI used as PLL clock source */
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	2b02      	cmp	r3, #2
 8004778:	d105      	bne.n	8004786 <SystemCoreClockUpdate+0xaa>
      {
        pllvco = (HSI_VALUE / pllm);
 800477a:	4a26      	ldr	r2, [pc, #152]	; (8004814 <SystemCoreClockUpdate+0x138>)
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004782:	617b      	str	r3, [r7, #20]
 8004784:	e00d      	b.n	80047a2 <SystemCoreClockUpdate+0xc6>
      }
      else if(pllsource == 0x03UL) /* HSE used as PLL clock source */
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	2b03      	cmp	r3, #3
 800478a:	d105      	bne.n	8004798 <SystemCoreClockUpdate+0xbc>
      {
        pllvco = (HSE_VALUE / pllm);
 800478c:	4a22      	ldr	r2, [pc, #136]	; (8004818 <SystemCoreClockUpdate+0x13c>)
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	fbb2 f3f3 	udiv	r3, r2, r3
 8004794:	617b      	str	r3, [r7, #20]
 8004796:	e004      	b.n	80047a2 <SystemCoreClockUpdate+0xc6>
      }
      else /* MSI used as PLL clock source */
      {
        pllvco = (msirange / pllm);
 8004798:	693a      	ldr	r2, [r7, #16]
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	fbb2 f3f3 	udiv	r3, r2, r3
 80047a0:	617b      	str	r3, [r7, #20]
      }
      
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80047a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047a6:	68db      	ldr	r3, [r3, #12]
 80047a8:	0a1b      	lsrs	r3, r3, #8
 80047aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80047ae:	697b      	ldr	r3, [r7, #20]
 80047b0:	fb02 f303 	mul.w	r3, r2, r3
 80047b4:	617b      	str	r3, [r7, #20]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1UL);
 80047b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047ba:	68db      	ldr	r3, [r3, #12]
 80047bc:	0f5b      	lsrs	r3, r3, #29
 80047be:	f003 0307 	and.w	r3, r3, #7
 80047c2:	3301      	adds	r3, #1
 80047c4:	607b      	str	r3, [r7, #4]
      
      SystemCoreClock = pllvco/pllr;
 80047c6:	697a      	ldr	r2, [r7, #20]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80047ce:	4a10      	ldr	r2, [pc, #64]	; (8004810 <SystemCoreClockUpdate+0x134>)
 80047d0:	6013      	str	r3, [r2, #0]
      break;
 80047d2:	e003      	b.n	80047dc <SystemCoreClockUpdate+0x100>

    default:
      SystemCoreClock = msirange;
 80047d4:	4a0e      	ldr	r2, [pc, #56]	; (8004810 <SystemCoreClockUpdate+0x134>)
 80047d6:	693b      	ldr	r3, [r7, #16]
 80047d8:	6013      	str	r3, [r2, #0]
      break;
 80047da:	bf00      	nop
  }
  
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK1 prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80047dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047e0:	689b      	ldr	r3, [r3, #8]
 80047e2:	091b      	lsrs	r3, r3, #4
 80047e4:	f003 030f 	and.w	r3, r3, #15
 80047e8:	4a0c      	ldr	r2, [pc, #48]	; (800481c <SystemCoreClockUpdate+0x140>)
 80047ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047ee:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock = SystemCoreClock / tmp;
 80047f0:	4b07      	ldr	r3, [pc, #28]	; (8004810 <SystemCoreClockUpdate+0x134>)
 80047f2:	681a      	ldr	r2, [r3, #0]
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80047fa:	4a05      	ldr	r2, [pc, #20]	; (8004810 <SystemCoreClockUpdate+0x134>)
 80047fc:	6013      	str	r3, [r2, #0]

}
 80047fe:	bf00      	nop
 8004800:	371c      	adds	r7, #28
 8004802:	46bd      	mov	sp, r7
 8004804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004808:	4770      	bx	lr
 800480a:	bf00      	nop
 800480c:	080088f8 	.word	0x080088f8
 8004810:	20000004 	.word	0x20000004
 8004814:	00f42400 	.word	0x00f42400
 8004818:	01e84800 	.word	0x01e84800
 800481c:	08008898 	.word	0x08008898

08004820 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8004820:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004822:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004824:	3304      	adds	r3, #4

08004826 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004826:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004828:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 800482a:	d3f9      	bcc.n	8004820 <CopyDataInit>
  bx lr
 800482c:	4770      	bx	lr

0800482e <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 800482e:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8004830:	3004      	adds	r0, #4

08004832 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8004832:	4288      	cmp	r0, r1
  bcc FillZerobss
 8004834:	d3fb      	bcc.n	800482e <FillZerobss>
  bx lr
 8004836:	4770      	bx	lr

08004838 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004838:	480c      	ldr	r0, [pc, #48]	; (800486c <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 800483a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 800483c:	480c      	ldr	r0, [pc, #48]	; (8004870 <LoopForever+0x8>)
 800483e:	490d      	ldr	r1, [pc, #52]	; (8004874 <LoopForever+0xc>)
 8004840:	4a0d      	ldr	r2, [pc, #52]	; (8004878 <LoopForever+0x10>)
 8004842:	2300      	movs	r3, #0
 8004844:	f7ff ffef 	bl	8004826 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8004848:	480c      	ldr	r0, [pc, #48]	; (800487c <LoopForever+0x14>)
 800484a:	490d      	ldr	r1, [pc, #52]	; (8004880 <LoopForever+0x18>)
 800484c:	2300      	movs	r3, #0
 800484e:	f7ff fff0 	bl	8004832 <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8004852:	480c      	ldr	r0, [pc, #48]	; (8004884 <LoopForever+0x1c>)
 8004854:	490c      	ldr	r1, [pc, #48]	; (8004888 <LoopForever+0x20>)
 8004856:	2300      	movs	r3, #0
 8004858:	f7ff ffeb 	bl	8004832 <LoopFillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800485c:	f7ff fee8 	bl	8004630 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8004860:	f003 ffc4 	bl	80087ec <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8004864:	f7ff fb77 	bl	8003f56 <main>

08004868 <LoopForever>:

LoopForever:
  b LoopForever
 8004868:	e7fe      	b.n	8004868 <LoopForever>
 800486a:	0000      	.short	0x0000
  ldr   r0, =_estack
 800486c:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8004870:	20000004 	.word	0x20000004
 8004874:	20000010 	.word	0x20000010
 8004878:	08008948 	.word	0x08008948
  INIT_BSS _sbss, _ebss
 800487c:	20000010 	.word	0x20000010
 8004880:	20000398 	.word	0x20000398
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8004884:	20030000 	.word	0x20030000
 8004888:	20030000 	.word	0x20030000

0800488c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800488c:	e7fe      	b.n	800488c <ADC1_IRQHandler>
	...

08004890 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b082      	sub	sp, #8
 8004894:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004896:	2300      	movs	r3, #0
 8004898:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800489a:	4b0c      	ldr	r3, [pc, #48]	; (80048cc <HAL_Init+0x3c>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4a0b      	ldr	r2, [pc, #44]	; (80048cc <HAL_Init+0x3c>)
 80048a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048a4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80048a6:	2003      	movs	r0, #3
 80048a8:	f000 f928 	bl	8004afc <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80048ac:	2000      	movs	r0, #0
 80048ae:	f000 f80f 	bl	80048d0 <HAL_InitTick>
 80048b2:	4603      	mov	r3, r0
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d002      	beq.n	80048be <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80048b8:	2301      	movs	r3, #1
 80048ba:	71fb      	strb	r3, [r7, #7]
 80048bc:	e001      	b.n	80048c2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80048be:	f7ff fdd2 	bl	8004466 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80048c2:	79fb      	ldrb	r3, [r7, #7]
}
 80048c4:	4618      	mov	r0, r3
 80048c6:	3708      	adds	r7, #8
 80048c8:	46bd      	mov	sp, r7
 80048ca:	bd80      	pop	{r7, pc}
 80048cc:	58004000 	.word	0x58004000

080048d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b084      	sub	sp, #16
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80048d8:	2300      	movs	r3, #0
 80048da:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80048dc:	4b17      	ldr	r3, [pc, #92]	; (800493c <HAL_InitTick+0x6c>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d023      	beq.n	800492c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U /uwTickFreq)) == 0U)
 80048e4:	f001 fd78 	bl	80063d8 <HAL_RCC_GetHCLKFreq>
 80048e8:	4601      	mov	r1, r0
 80048ea:	4b14      	ldr	r3, [pc, #80]	; (800493c <HAL_InitTick+0x6c>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80048f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80048f6:	fbb1 f3f3 	udiv	r3, r1, r3
 80048fa:	4618      	mov	r0, r3
 80048fc:	f000 f923 	bl	8004b46 <HAL_SYSTICK_Config>
 8004900:	4603      	mov	r3, r0
 8004902:	2b00      	cmp	r3, #0
 8004904:	d10f      	bne.n	8004926 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2b0f      	cmp	r3, #15
 800490a:	d809      	bhi.n	8004920 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800490c:	2200      	movs	r2, #0
 800490e:	6879      	ldr	r1, [r7, #4]
 8004910:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004914:	f000 f8fd 	bl	8004b12 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004918:	4a09      	ldr	r2, [pc, #36]	; (8004940 <HAL_InitTick+0x70>)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6013      	str	r3, [r2, #0]
 800491e:	e007      	b.n	8004930 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8004920:	2301      	movs	r3, #1
 8004922:	73fb      	strb	r3, [r7, #15]
 8004924:	e004      	b.n	8004930 <HAL_InitTick+0x60>
      }
    }
    else
    {  
      status = HAL_ERROR;
 8004926:	2301      	movs	r3, #1
 8004928:	73fb      	strb	r3, [r7, #15]
 800492a:	e001      	b.n	8004930 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800492c:	2301      	movs	r3, #1
 800492e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004930:	7bfb      	ldrb	r3, [r7, #15]
}
 8004932:	4618      	mov	r0, r3
 8004934:	3710      	adds	r7, #16
 8004936:	46bd      	mov	sp, r7
 8004938:	bd80      	pop	{r7, pc}
 800493a:	bf00      	nop
 800493c:	2000000c 	.word	0x2000000c
 8004940:	20000008 	.word	0x20000008

08004944 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004944:	b480      	push	{r7}
 8004946:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004948:	4b05      	ldr	r3, [pc, #20]	; (8004960 <HAL_IncTick+0x1c>)
 800494a:	681a      	ldr	r2, [r3, #0]
 800494c:	4b05      	ldr	r3, [pc, #20]	; (8004964 <HAL_IncTick+0x20>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4413      	add	r3, r2
 8004952:	4a03      	ldr	r2, [pc, #12]	; (8004960 <HAL_IncTick+0x1c>)
 8004954:	6013      	str	r3, [r2, #0]
}
 8004956:	bf00      	nop
 8004958:	46bd      	mov	sp, r7
 800495a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495e:	4770      	bx	lr
 8004960:	20000394 	.word	0x20000394
 8004964:	2000000c 	.word	0x2000000c

08004968 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004968:	b480      	push	{r7}
 800496a:	af00      	add	r7, sp, #0
  return uwTick;
 800496c:	4b03      	ldr	r3, [pc, #12]	; (800497c <HAL_GetTick+0x14>)
 800496e:	681b      	ldr	r3, [r3, #0]
}
 8004970:	4618      	mov	r0, r3
 8004972:	46bd      	mov	sp, r7
 8004974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004978:	4770      	bx	lr
 800497a:	bf00      	nop
 800497c:	20000394 	.word	0x20000394

08004980 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8004980:	b480      	push	{r7}
 8004982:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8004984:	4b03      	ldr	r3, [pc, #12]	; (8004994 <HAL_GetTickPrio+0x14>)
 8004986:	681b      	ldr	r3, [r3, #0]
}
 8004988:	4618      	mov	r0, r3
 800498a:	46bd      	mov	sp, r7
 800498c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004990:	4770      	bx	lr
 8004992:	bf00      	nop
 8004994:	20000008 	.word	0x20000008

08004998 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004998:	b480      	push	{r7}
 800499a:	b085      	sub	sp, #20
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	f003 0307 	and.w	r3, r3, #7
 80049a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80049a8:	4b0c      	ldr	r3, [pc, #48]	; (80049dc <__NVIC_SetPriorityGrouping+0x44>)
 80049aa:	68db      	ldr	r3, [r3, #12]
 80049ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80049ae:	68ba      	ldr	r2, [r7, #8]
 80049b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80049b4:	4013      	ands	r3, r2
 80049b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80049bc:	68bb      	ldr	r3, [r7, #8]
 80049be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80049c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80049c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80049c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80049ca:	4a04      	ldr	r2, [pc, #16]	; (80049dc <__NVIC_SetPriorityGrouping+0x44>)
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	60d3      	str	r3, [r2, #12]
}
 80049d0:	bf00      	nop
 80049d2:	3714      	adds	r7, #20
 80049d4:	46bd      	mov	sp, r7
 80049d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049da:	4770      	bx	lr
 80049dc:	e000ed00 	.word	0xe000ed00

080049e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80049e0:	b480      	push	{r7}
 80049e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80049e4:	4b04      	ldr	r3, [pc, #16]	; (80049f8 <__NVIC_GetPriorityGrouping+0x18>)
 80049e6:	68db      	ldr	r3, [r3, #12]
 80049e8:	0a1b      	lsrs	r3, r3, #8
 80049ea:	f003 0307 	and.w	r3, r3, #7
}
 80049ee:	4618      	mov	r0, r3
 80049f0:	46bd      	mov	sp, r7
 80049f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f6:	4770      	bx	lr
 80049f8:	e000ed00 	.word	0xe000ed00

080049fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80049fc:	b480      	push	{r7}
 80049fe:	b083      	sub	sp, #12
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	4603      	mov	r3, r0
 8004a04:	6039      	str	r1, [r7, #0]
 8004a06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	db0a      	blt.n	8004a26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	b2da      	uxtb	r2, r3
 8004a14:	490c      	ldr	r1, [pc, #48]	; (8004a48 <__NVIC_SetPriority+0x4c>)
 8004a16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a1a:	0112      	lsls	r2, r2, #4
 8004a1c:	b2d2      	uxtb	r2, r2
 8004a1e:	440b      	add	r3, r1
 8004a20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004a24:	e00a      	b.n	8004a3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	b2da      	uxtb	r2, r3
 8004a2a:	4908      	ldr	r1, [pc, #32]	; (8004a4c <__NVIC_SetPriority+0x50>)
 8004a2c:	79fb      	ldrb	r3, [r7, #7]
 8004a2e:	f003 030f 	and.w	r3, r3, #15
 8004a32:	3b04      	subs	r3, #4
 8004a34:	0112      	lsls	r2, r2, #4
 8004a36:	b2d2      	uxtb	r2, r2
 8004a38:	440b      	add	r3, r1
 8004a3a:	761a      	strb	r2, [r3, #24]
}
 8004a3c:	bf00      	nop
 8004a3e:	370c      	adds	r7, #12
 8004a40:	46bd      	mov	sp, r7
 8004a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a46:	4770      	bx	lr
 8004a48:	e000e100 	.word	0xe000e100
 8004a4c:	e000ed00 	.word	0xe000ed00

08004a50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004a50:	b480      	push	{r7}
 8004a52:	b089      	sub	sp, #36	; 0x24
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	60f8      	str	r0, [r7, #12]
 8004a58:	60b9      	str	r1, [r7, #8]
 8004a5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	f003 0307 	and.w	r3, r3, #7
 8004a62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004a64:	69fb      	ldr	r3, [r7, #28]
 8004a66:	f1c3 0307 	rsb	r3, r3, #7
 8004a6a:	2b04      	cmp	r3, #4
 8004a6c:	bf28      	it	cs
 8004a6e:	2304      	movcs	r3, #4
 8004a70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004a72:	69fb      	ldr	r3, [r7, #28]
 8004a74:	3304      	adds	r3, #4
 8004a76:	2b06      	cmp	r3, #6
 8004a78:	d902      	bls.n	8004a80 <NVIC_EncodePriority+0x30>
 8004a7a:	69fb      	ldr	r3, [r7, #28]
 8004a7c:	3b03      	subs	r3, #3
 8004a7e:	e000      	b.n	8004a82 <NVIC_EncodePriority+0x32>
 8004a80:	2300      	movs	r3, #0
 8004a82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a84:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004a88:	69bb      	ldr	r3, [r7, #24]
 8004a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a8e:	43da      	mvns	r2, r3
 8004a90:	68bb      	ldr	r3, [r7, #8]
 8004a92:	401a      	ands	r2, r3
 8004a94:	697b      	ldr	r3, [r7, #20]
 8004a96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004a98:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004a9c:	697b      	ldr	r3, [r7, #20]
 8004a9e:	fa01 f303 	lsl.w	r3, r1, r3
 8004aa2:	43d9      	mvns	r1, r3
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004aa8:	4313      	orrs	r3, r2
         );
}
 8004aaa:	4618      	mov	r0, r3
 8004aac:	3724      	adds	r7, #36	; 0x24
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab4:	4770      	bx	lr
	...

08004ab8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b082      	sub	sp, #8
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	3b01      	subs	r3, #1
 8004ac4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004ac8:	d301      	bcc.n	8004ace <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004aca:	2301      	movs	r3, #1
 8004acc:	e00f      	b.n	8004aee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004ace:	4a0a      	ldr	r2, [pc, #40]	; (8004af8 <SysTick_Config+0x40>)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	3b01      	subs	r3, #1
 8004ad4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004ad6:	210f      	movs	r1, #15
 8004ad8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004adc:	f7ff ff8e 	bl	80049fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004ae0:	4b05      	ldr	r3, [pc, #20]	; (8004af8 <SysTick_Config+0x40>)
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004ae6:	4b04      	ldr	r3, [pc, #16]	; (8004af8 <SysTick_Config+0x40>)
 8004ae8:	2207      	movs	r2, #7
 8004aea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004aec:	2300      	movs	r3, #0
}
 8004aee:	4618      	mov	r0, r3
 8004af0:	3708      	adds	r7, #8
 8004af2:	46bd      	mov	sp, r7
 8004af4:	bd80      	pop	{r7, pc}
 8004af6:	bf00      	nop
 8004af8:	e000e010 	.word	0xe000e010

08004afc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b082      	sub	sp, #8
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004b04:	6878      	ldr	r0, [r7, #4]
 8004b06:	f7ff ff47 	bl	8004998 <__NVIC_SetPriorityGrouping>
}
 8004b0a:	bf00      	nop
 8004b0c:	3708      	adds	r7, #8
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bd80      	pop	{r7, pc}

08004b12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004b12:	b580      	push	{r7, lr}
 8004b14:	b086      	sub	sp, #24
 8004b16:	af00      	add	r7, sp, #0
 8004b18:	4603      	mov	r3, r0
 8004b1a:	60b9      	str	r1, [r7, #8]
 8004b1c:	607a      	str	r2, [r7, #4]
 8004b1e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004b20:	f7ff ff5e 	bl	80049e0 <__NVIC_GetPriorityGrouping>
 8004b24:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004b26:	687a      	ldr	r2, [r7, #4]
 8004b28:	68b9      	ldr	r1, [r7, #8]
 8004b2a:	6978      	ldr	r0, [r7, #20]
 8004b2c:	f7ff ff90 	bl	8004a50 <NVIC_EncodePriority>
 8004b30:	4602      	mov	r2, r0
 8004b32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b36:	4611      	mov	r1, r2
 8004b38:	4618      	mov	r0, r3
 8004b3a:	f7ff ff5f 	bl	80049fc <__NVIC_SetPriority>
}
 8004b3e:	bf00      	nop
 8004b40:	3718      	adds	r7, #24
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bd80      	pop	{r7, pc}

08004b46 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004b46:	b580      	push	{r7, lr}
 8004b48:	b082      	sub	sp, #8
 8004b4a:	af00      	add	r7, sp, #0
 8004b4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004b4e:	6878      	ldr	r0, [r7, #4]
 8004b50:	f7ff ffb2 	bl	8004ab8 <SysTick_Config>
 8004b54:	4603      	mov	r3, r0
}
 8004b56:	4618      	mov	r0, r3
 8004b58:	3708      	adds	r7, #8
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	bd80      	pop	{r7, pc}
	...

08004b60 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b082      	sub	sp, #8
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d101      	bne.n	8004b72 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8004b6e:	2301      	movs	r3, #1
 8004b70:	e054      	b.n	8004c1c <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	7f5b      	ldrb	r3, [r3, #29]
 8004b76:	b2db      	uxtb	r3, r3
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d105      	bne.n	8004b88 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8004b82:	6878      	ldr	r0, [r7, #4]
 8004b84:	f7ff fc78 	bl	8004478 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2202      	movs	r2, #2
 8004b8c:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	791b      	ldrb	r3, [r3, #4]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d10c      	bne.n	8004bb0 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4a22      	ldr	r2, [pc, #136]	; (8004c24 <HAL_CRC_Init+0xc4>)
 8004b9c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	689a      	ldr	r2, [r3, #8]
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f022 0218 	bic.w	r2, r2, #24
 8004bac:	609a      	str	r2, [r3, #8]
 8004bae:	e00c      	b.n	8004bca <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6899      	ldr	r1, [r3, #8]
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	68db      	ldr	r3, [r3, #12]
 8004bb8:	461a      	mov	r2, r3
 8004bba:	6878      	ldr	r0, [r7, #4]
 8004bbc:	f000 f834 	bl	8004c28 <HAL_CRCEx_Polynomial_Set>
 8004bc0:	4603      	mov	r3, r0
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d001      	beq.n	8004bca <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	e028      	b.n	8004c1c <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	795b      	ldrb	r3, [r3, #5]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d105      	bne.n	8004bde <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004bda:	611a      	str	r2, [r3, #16]
 8004bdc:	e004      	b.n	8004be8 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	687a      	ldr	r2, [r7, #4]
 8004be4:	6912      	ldr	r2, [r2, #16]
 8004be6:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	689b      	ldr	r3, [r3, #8]
 8004bee:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	695a      	ldr	r2, [r3, #20]
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	430a      	orrs	r2, r1
 8004bfc:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	689b      	ldr	r3, [r3, #8]
 8004c04:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	699a      	ldr	r2, [r3, #24]
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	430a      	orrs	r2, r1
 8004c12:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2201      	movs	r2, #1
 8004c18:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8004c1a:	2300      	movs	r3, #0
}
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	3708      	adds	r7, #8
 8004c20:	46bd      	mov	sp, r7
 8004c22:	bd80      	pop	{r7, pc}
 8004c24:	04c11db7 	.word	0x04c11db7

08004c28 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	b087      	sub	sp, #28
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	60f8      	str	r0, [r7, #12]
 8004c30:	60b9      	str	r1, [r7, #8]
 8004c32:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c34:	2300      	movs	r3, #0
 8004c36:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8004c38:	231f      	movs	r3, #31
 8004c3a:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8004c3c:	bf00      	nop
 8004c3e:	693b      	ldr	r3, [r7, #16]
 8004c40:	1e5a      	subs	r2, r3, #1
 8004c42:	613a      	str	r2, [r7, #16]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d009      	beq.n	8004c5c <HAL_CRCEx_Polynomial_Set+0x34>
 8004c48:	693b      	ldr	r3, [r7, #16]
 8004c4a:	f003 031f 	and.w	r3, r3, #31
 8004c4e:	68ba      	ldr	r2, [r7, #8]
 8004c50:	fa22 f303 	lsr.w	r3, r2, r3
 8004c54:	f003 0301 	and.w	r3, r3, #1
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d0f0      	beq.n	8004c3e <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2b18      	cmp	r3, #24
 8004c60:	d846      	bhi.n	8004cf0 <HAL_CRCEx_Polynomial_Set+0xc8>
 8004c62:	a201      	add	r2, pc, #4	; (adr r2, 8004c68 <HAL_CRCEx_Polynomial_Set+0x40>)
 8004c64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c68:	08004cf7 	.word	0x08004cf7
 8004c6c:	08004cf1 	.word	0x08004cf1
 8004c70:	08004cf1 	.word	0x08004cf1
 8004c74:	08004cf1 	.word	0x08004cf1
 8004c78:	08004cf1 	.word	0x08004cf1
 8004c7c:	08004cf1 	.word	0x08004cf1
 8004c80:	08004cf1 	.word	0x08004cf1
 8004c84:	08004cf1 	.word	0x08004cf1
 8004c88:	08004ce5 	.word	0x08004ce5
 8004c8c:	08004cf1 	.word	0x08004cf1
 8004c90:	08004cf1 	.word	0x08004cf1
 8004c94:	08004cf1 	.word	0x08004cf1
 8004c98:	08004cf1 	.word	0x08004cf1
 8004c9c:	08004cf1 	.word	0x08004cf1
 8004ca0:	08004cf1 	.word	0x08004cf1
 8004ca4:	08004cf1 	.word	0x08004cf1
 8004ca8:	08004cd9 	.word	0x08004cd9
 8004cac:	08004cf1 	.word	0x08004cf1
 8004cb0:	08004cf1 	.word	0x08004cf1
 8004cb4:	08004cf1 	.word	0x08004cf1
 8004cb8:	08004cf1 	.word	0x08004cf1
 8004cbc:	08004cf1 	.word	0x08004cf1
 8004cc0:	08004cf1 	.word	0x08004cf1
 8004cc4:	08004cf1 	.word	0x08004cf1
 8004cc8:	08004ccd 	.word	0x08004ccd
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8004ccc:	693b      	ldr	r3, [r7, #16]
 8004cce:	2b06      	cmp	r3, #6
 8004cd0:	d913      	bls.n	8004cfa <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8004cd6:	e010      	b.n	8004cfa <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8004cd8:	693b      	ldr	r3, [r7, #16]
 8004cda:	2b07      	cmp	r3, #7
 8004cdc:	d90f      	bls.n	8004cfe <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8004cde:	2301      	movs	r3, #1
 8004ce0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8004ce2:	e00c      	b.n	8004cfe <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8004ce4:	693b      	ldr	r3, [r7, #16]
 8004ce6:	2b0f      	cmp	r3, #15
 8004ce8:	d90b      	bls.n	8004d02 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8004cea:	2301      	movs	r3, #1
 8004cec:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8004cee:	e008      	b.n	8004d02 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	75fb      	strb	r3, [r7, #23]
      break;
 8004cf4:	e006      	b.n	8004d04 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004cf6:	bf00      	nop
 8004cf8:	e004      	b.n	8004d04 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004cfa:	bf00      	nop
 8004cfc:	e002      	b.n	8004d04 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004cfe:	bf00      	nop
 8004d00:	e000      	b.n	8004d04 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004d02:	bf00      	nop
  }
  if (status == HAL_OK)
 8004d04:	7dfb      	ldrb	r3, [r7, #23]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d10d      	bne.n	8004d26 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	68ba      	ldr	r2, [r7, #8]
 8004d10:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	689b      	ldr	r3, [r3, #8]
 8004d18:	f023 0118 	bic.w	r1, r3, #24
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	687a      	ldr	r2, [r7, #4]
 8004d22:	430a      	orrs	r2, r1
 8004d24:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8004d26:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d28:	4618      	mov	r0, r3
 8004d2a:	371c      	adds	r7, #28
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d32:	4770      	bx	lr

08004d34 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004d34:	b480      	push	{r7}
 8004d36:	b087      	sub	sp, #28
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
 8004d3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004d3e:	2300      	movs	r3, #0
 8004d40:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004d42:	e14c      	b.n	8004fde <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	681a      	ldr	r2, [r3, #0]
 8004d48:	2101      	movs	r1, #1
 8004d4a:	697b      	ldr	r3, [r7, #20]
 8004d4c:	fa01 f303 	lsl.w	r3, r1, r3
 8004d50:	4013      	ands	r3, r2
 8004d52:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	f000 813e 	beq.w	8004fd8 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	2b02      	cmp	r3, #2
 8004d62:	d003      	beq.n	8004d6c <HAL_GPIO_Init+0x38>
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	2b12      	cmp	r3, #18
 8004d6a:	d123      	bne.n	8004db4 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004d6c:	697b      	ldr	r3, [r7, #20]
 8004d6e:	08da      	lsrs	r2, r3, #3
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	3208      	adds	r2, #8
 8004d74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d78:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004d7a:	697b      	ldr	r3, [r7, #20]
 8004d7c:	f003 0307 	and.w	r3, r3, #7
 8004d80:	009b      	lsls	r3, r3, #2
 8004d82:	220f      	movs	r2, #15
 8004d84:	fa02 f303 	lsl.w	r3, r2, r3
 8004d88:	43db      	mvns	r3, r3
 8004d8a:	693a      	ldr	r2, [r7, #16]
 8004d8c:	4013      	ands	r3, r2
 8004d8e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	691a      	ldr	r2, [r3, #16]
 8004d94:	697b      	ldr	r3, [r7, #20]
 8004d96:	f003 0307 	and.w	r3, r3, #7
 8004d9a:	009b      	lsls	r3, r3, #2
 8004d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8004da0:	693a      	ldr	r2, [r7, #16]
 8004da2:	4313      	orrs	r3, r2
 8004da4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004da6:	697b      	ldr	r3, [r7, #20]
 8004da8:	08da      	lsrs	r2, r3, #3
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	3208      	adds	r2, #8
 8004dae:	6939      	ldr	r1, [r7, #16]
 8004db0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004dba:	697b      	ldr	r3, [r7, #20]
 8004dbc:	005b      	lsls	r3, r3, #1
 8004dbe:	2203      	movs	r2, #3
 8004dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8004dc4:	43db      	mvns	r3, r3
 8004dc6:	693a      	ldr	r2, [r7, #16]
 8004dc8:	4013      	ands	r3, r2
 8004dca:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	685b      	ldr	r3, [r3, #4]
 8004dd0:	f003 0203 	and.w	r2, r3, #3
 8004dd4:	697b      	ldr	r3, [r7, #20]
 8004dd6:	005b      	lsls	r3, r3, #1
 8004dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8004ddc:	693a      	ldr	r2, [r7, #16]
 8004dde:	4313      	orrs	r3, r2
 8004de0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	693a      	ldr	r2, [r7, #16]
 8004de6:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	685b      	ldr	r3, [r3, #4]
 8004dec:	2b01      	cmp	r3, #1
 8004dee:	d00b      	beq.n	8004e08 <HAL_GPIO_Init+0xd4>
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	685b      	ldr	r3, [r3, #4]
 8004df4:	2b02      	cmp	r3, #2
 8004df6:	d007      	beq.n	8004e08 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004dfc:	2b11      	cmp	r3, #17
 8004dfe:	d003      	beq.n	8004e08 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	685b      	ldr	r3, [r3, #4]
 8004e04:	2b12      	cmp	r3, #18
 8004e06:	d130      	bne.n	8004e6a <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	689b      	ldr	r3, [r3, #8]
 8004e0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	005b      	lsls	r3, r3, #1
 8004e12:	2203      	movs	r2, #3
 8004e14:	fa02 f303 	lsl.w	r3, r2, r3
 8004e18:	43db      	mvns	r3, r3
 8004e1a:	693a      	ldr	r2, [r7, #16]
 8004e1c:	4013      	ands	r3, r2
 8004e1e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	68da      	ldr	r2, [r3, #12]
 8004e24:	697b      	ldr	r3, [r7, #20]
 8004e26:	005b      	lsls	r3, r3, #1
 8004e28:	fa02 f303 	lsl.w	r3, r2, r3
 8004e2c:	693a      	ldr	r2, [r7, #16]
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	693a      	ldr	r2, [r7, #16]
 8004e36:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	685b      	ldr	r3, [r3, #4]
 8004e3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004e3e:	2201      	movs	r2, #1
 8004e40:	697b      	ldr	r3, [r7, #20]
 8004e42:	fa02 f303 	lsl.w	r3, r2, r3
 8004e46:	43db      	mvns	r3, r3
 8004e48:	693a      	ldr	r2, [r7, #16]
 8004e4a:	4013      	ands	r3, r2
 8004e4c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	685b      	ldr	r3, [r3, #4]
 8004e52:	091b      	lsrs	r3, r3, #4
 8004e54:	f003 0201 	and.w	r2, r3, #1
 8004e58:	697b      	ldr	r3, [r7, #20]
 8004e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e5e:	693a      	ldr	r2, [r7, #16]
 8004e60:	4313      	orrs	r3, r2
 8004e62:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	693a      	ldr	r2, [r7, #16]
 8004e68:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	68db      	ldr	r3, [r3, #12]
 8004e6e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004e70:	697b      	ldr	r3, [r7, #20]
 8004e72:	005b      	lsls	r3, r3, #1
 8004e74:	2203      	movs	r2, #3
 8004e76:	fa02 f303 	lsl.w	r3, r2, r3
 8004e7a:	43db      	mvns	r3, r3
 8004e7c:	693a      	ldr	r2, [r7, #16]
 8004e7e:	4013      	ands	r3, r2
 8004e80:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	689a      	ldr	r2, [r3, #8]
 8004e86:	697b      	ldr	r3, [r7, #20]
 8004e88:	005b      	lsls	r3, r3, #1
 8004e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e8e:	693a      	ldr	r2, [r7, #16]
 8004e90:	4313      	orrs	r3, r2
 8004e92:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	693a      	ldr	r2, [r7, #16]
 8004e98:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	685b      	ldr	r3, [r3, #4]
 8004e9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	f000 8098 	beq.w	8004fd8 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8004ea8:	4a54      	ldr	r2, [pc, #336]	; (8004ffc <HAL_GPIO_Init+0x2c8>)
 8004eaa:	697b      	ldr	r3, [r7, #20]
 8004eac:	089b      	lsrs	r3, r3, #2
 8004eae:	3302      	adds	r3, #2
 8004eb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004eb4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004eb6:	697b      	ldr	r3, [r7, #20]
 8004eb8:	f003 0303 	and.w	r3, r3, #3
 8004ebc:	009b      	lsls	r3, r3, #2
 8004ebe:	220f      	movs	r2, #15
 8004ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ec4:	43db      	mvns	r3, r3
 8004ec6:	693a      	ldr	r2, [r7, #16]
 8004ec8:	4013      	ands	r3, r2
 8004eca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004ed2:	d019      	beq.n	8004f08 <HAL_GPIO_Init+0x1d4>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	4a4a      	ldr	r2, [pc, #296]	; (8005000 <HAL_GPIO_Init+0x2cc>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d013      	beq.n	8004f04 <HAL_GPIO_Init+0x1d0>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	4a49      	ldr	r2, [pc, #292]	; (8005004 <HAL_GPIO_Init+0x2d0>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d00d      	beq.n	8004f00 <HAL_GPIO_Init+0x1cc>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	4a48      	ldr	r2, [pc, #288]	; (8005008 <HAL_GPIO_Init+0x2d4>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d007      	beq.n	8004efc <HAL_GPIO_Init+0x1c8>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	4a47      	ldr	r2, [pc, #284]	; (800500c <HAL_GPIO_Init+0x2d8>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d101      	bne.n	8004ef8 <HAL_GPIO_Init+0x1c4>
 8004ef4:	2304      	movs	r3, #4
 8004ef6:	e008      	b.n	8004f0a <HAL_GPIO_Init+0x1d6>
 8004ef8:	2307      	movs	r3, #7
 8004efa:	e006      	b.n	8004f0a <HAL_GPIO_Init+0x1d6>
 8004efc:	2303      	movs	r3, #3
 8004efe:	e004      	b.n	8004f0a <HAL_GPIO_Init+0x1d6>
 8004f00:	2302      	movs	r3, #2
 8004f02:	e002      	b.n	8004f0a <HAL_GPIO_Init+0x1d6>
 8004f04:	2301      	movs	r3, #1
 8004f06:	e000      	b.n	8004f0a <HAL_GPIO_Init+0x1d6>
 8004f08:	2300      	movs	r3, #0
 8004f0a:	697a      	ldr	r2, [r7, #20]
 8004f0c:	f002 0203 	and.w	r2, r2, #3
 8004f10:	0092      	lsls	r2, r2, #2
 8004f12:	4093      	lsls	r3, r2
 8004f14:	693a      	ldr	r2, [r7, #16]
 8004f16:	4313      	orrs	r3, r2
 8004f18:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004f1a:	4938      	ldr	r1, [pc, #224]	; (8004ffc <HAL_GPIO_Init+0x2c8>)
 8004f1c:	697b      	ldr	r3, [r7, #20]
 8004f1e:	089b      	lsrs	r3, r3, #2
 8004f20:	3302      	adds	r3, #2
 8004f22:	693a      	ldr	r2, [r7, #16]
 8004f24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004f28:	4b39      	ldr	r3, [pc, #228]	; (8005010 <HAL_GPIO_Init+0x2dc>)
 8004f2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	43db      	mvns	r3, r3
 8004f34:	693a      	ldr	r2, [r7, #16]
 8004f36:	4013      	ands	r3, r2
 8004f38:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	685b      	ldr	r3, [r3, #4]
 8004f3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d003      	beq.n	8004f4e <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8004f46:	693a      	ldr	r2, [r7, #16]
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	4313      	orrs	r3, r2
 8004f4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004f4e:	4a30      	ldr	r2, [pc, #192]	; (8005010 <HAL_GPIO_Init+0x2dc>)
 8004f50:	693b      	ldr	r3, [r7, #16]
 8004f52:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8004f56:	4b2e      	ldr	r3, [pc, #184]	; (8005010 <HAL_GPIO_Init+0x2dc>)
 8004f58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f5c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	43db      	mvns	r3, r3
 8004f62:	693a      	ldr	r2, [r7, #16]
 8004f64:	4013      	ands	r3, r2
 8004f66:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	685b      	ldr	r3, [r3, #4]
 8004f6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d003      	beq.n	8004f7c <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8004f74:	693a      	ldr	r2, [r7, #16]
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004f7c:	4a24      	ldr	r2, [pc, #144]	; (8005010 <HAL_GPIO_Init+0x2dc>)
 8004f7e:	693b      	ldr	r3, [r7, #16]
 8004f80:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004f84:	4b22      	ldr	r3, [pc, #136]	; (8005010 <HAL_GPIO_Init+0x2dc>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	43db      	mvns	r3, r3
 8004f8e:	693a      	ldr	r2, [r7, #16]
 8004f90:	4013      	ands	r3, r2
 8004f92:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	685b      	ldr	r3, [r3, #4]
 8004f98:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d003      	beq.n	8004fa8 <HAL_GPIO_Init+0x274>
        {
          temp |= iocurrent;
 8004fa0:	693a      	ldr	r2, [r7, #16]
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	4313      	orrs	r3, r2
 8004fa6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004fa8:	4a19      	ldr	r2, [pc, #100]	; (8005010 <HAL_GPIO_Init+0x2dc>)
 8004faa:	693b      	ldr	r3, [r7, #16]
 8004fac:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004fae:	4b18      	ldr	r3, [pc, #96]	; (8005010 <HAL_GPIO_Init+0x2dc>)
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	43db      	mvns	r3, r3
 8004fb8:	693a      	ldr	r2, [r7, #16]
 8004fba:	4013      	ands	r3, r2
 8004fbc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d003      	beq.n	8004fd2 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8004fca:	693a      	ldr	r2, [r7, #16]
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	4313      	orrs	r3, r2
 8004fd0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004fd2:	4a0f      	ldr	r2, [pc, #60]	; (8005010 <HAL_GPIO_Init+0x2dc>)
 8004fd4:	693b      	ldr	r3, [r7, #16]
 8004fd6:	6053      	str	r3, [r2, #4]
      }
    }
    
    position++;
 8004fd8:	697b      	ldr	r3, [r7, #20]
 8004fda:	3301      	adds	r3, #1
 8004fdc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	681a      	ldr	r2, [r3, #0]
 8004fe2:	697b      	ldr	r3, [r7, #20]
 8004fe4:	fa22 f303 	lsr.w	r3, r2, r3
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	f47f aeab 	bne.w	8004d44 <HAL_GPIO_Init+0x10>
  }
}
 8004fee:	bf00      	nop
 8004ff0:	371c      	adds	r7, #28
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff8:	4770      	bx	lr
 8004ffa:	bf00      	nop
 8004ffc:	40010000 	.word	0x40010000
 8005000:	48000400 	.word	0x48000400
 8005004:	48000800 	.word	0x48000800
 8005008:	48000c00 	.word	0x48000c00
 800500c:	48001000 	.word	0x48001000
 8005010:	58000800 	.word	0x58000800

08005014 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005014:	b480      	push	{r7}
 8005016:	b083      	sub	sp, #12
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
 800501c:	460b      	mov	r3, r1
 800501e:	807b      	strh	r3, [r7, #2]
 8005020:	4613      	mov	r3, r2
 8005022:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005024:	787b      	ldrb	r3, [r7, #1]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d003      	beq.n	8005032 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800502a:	887a      	ldrh	r2, [r7, #2]
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005030:	e002      	b.n	8005038 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005032:	887a      	ldrh	r2, [r7, #2]
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005038:	bf00      	nop
 800503a:	370c      	adds	r7, #12
 800503c:	46bd      	mov	sp, r7
 800503e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005042:	4770      	bx	lr

08005044 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005044:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005046:	b08b      	sub	sp, #44	; 0x2c
 8005048:	af06      	add	r7, sp, #24
 800504a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d101      	bne.n	8005056 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005052:	2301      	movs	r3, #1
 8005054:	e0ad      	b.n	80051b2 <HAL_PCD_Init+0x16e>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 800505c:	b2db      	uxtb	r3, r3
 800505e:	2b00      	cmp	r3, #0
 8005060:	d106      	bne.n	8005070 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2200      	movs	r2, #0
 8005066:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800506a:	6878      	ldr	r0, [r7, #4]
 800506c:	f7ff fa82 	bl	8004574 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2203      	movs	r2, #3
 8005074:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4618      	mov	r0, r3
 800507e:	f003 fb73 	bl	8008768 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005082:	2300      	movs	r3, #0
 8005084:	73fb      	strb	r3, [r7, #15]
 8005086:	e035      	b.n	80050f4 <HAL_PCD_Init+0xb0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005088:	7bfb      	ldrb	r3, [r7, #15]
 800508a:	687a      	ldr	r2, [r7, #4]
 800508c:	015b      	lsls	r3, r3, #5
 800508e:	4413      	add	r3, r2
 8005090:	3329      	adds	r3, #41	; 0x29
 8005092:	2201      	movs	r2, #1
 8005094:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005096:	7bfb      	ldrb	r3, [r7, #15]
 8005098:	687a      	ldr	r2, [r7, #4]
 800509a:	015b      	lsls	r3, r3, #5
 800509c:	4413      	add	r3, r2
 800509e:	3328      	adds	r3, #40	; 0x28
 80050a0:	7bfa      	ldrb	r2, [r7, #15]
 80050a2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80050a4:	7bfb      	ldrb	r3, [r7, #15]
 80050a6:	7bfa      	ldrb	r2, [r7, #15]
 80050a8:	b291      	uxth	r1, r2
 80050aa:	687a      	ldr	r2, [r7, #4]
 80050ac:	015b      	lsls	r3, r3, #5
 80050ae:	4413      	add	r3, r2
 80050b0:	3336      	adds	r3, #54	; 0x36
 80050b2:	460a      	mov	r2, r1
 80050b4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80050b6:	7bfb      	ldrb	r3, [r7, #15]
 80050b8:	687a      	ldr	r2, [r7, #4]
 80050ba:	015b      	lsls	r3, r3, #5
 80050bc:	4413      	add	r3, r2
 80050be:	332b      	adds	r3, #43	; 0x2b
 80050c0:	2200      	movs	r2, #0
 80050c2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80050c4:	7bfb      	ldrb	r3, [r7, #15]
 80050c6:	687a      	ldr	r2, [r7, #4]
 80050c8:	015b      	lsls	r3, r3, #5
 80050ca:	4413      	add	r3, r2
 80050cc:	3338      	adds	r3, #56	; 0x38
 80050ce:	2200      	movs	r2, #0
 80050d0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80050d2:	7bfb      	ldrb	r3, [r7, #15]
 80050d4:	687a      	ldr	r2, [r7, #4]
 80050d6:	015b      	lsls	r3, r3, #5
 80050d8:	4413      	add	r3, r2
 80050da:	333c      	adds	r3, #60	; 0x3c
 80050dc:	2200      	movs	r2, #0
 80050de:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80050e0:	7bfb      	ldrb	r3, [r7, #15]
 80050e2:	687a      	ldr	r2, [r7, #4]
 80050e4:	3302      	adds	r3, #2
 80050e6:	015b      	lsls	r3, r3, #5
 80050e8:	4413      	add	r3, r2
 80050ea:	2200      	movs	r2, #0
 80050ec:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80050ee:	7bfb      	ldrb	r3, [r7, #15]
 80050f0:	3301      	adds	r3, #1
 80050f2:	73fb      	strb	r3, [r7, #15]
 80050f4:	7bfa      	ldrb	r2, [r7, #15]
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	685b      	ldr	r3, [r3, #4]
 80050fa:	429a      	cmp	r2, r3
 80050fc:	d3c4      	bcc.n	8005088 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80050fe:	2300      	movs	r3, #0
 8005100:	73fb      	strb	r3, [r7, #15]
 8005102:	e031      	b.n	8005168 <HAL_PCD_Init+0x124>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005104:	7bfb      	ldrb	r3, [r7, #15]
 8005106:	687a      	ldr	r2, [r7, #4]
 8005108:	015b      	lsls	r3, r3, #5
 800510a:	4413      	add	r3, r2
 800510c:	f203 1329 	addw	r3, r3, #297	; 0x129
 8005110:	2200      	movs	r2, #0
 8005112:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005114:	7bfb      	ldrb	r3, [r7, #15]
 8005116:	687a      	ldr	r2, [r7, #4]
 8005118:	015b      	lsls	r3, r3, #5
 800511a:	4413      	add	r3, r2
 800511c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8005120:	7bfa      	ldrb	r2, [r7, #15]
 8005122:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005124:	7bfb      	ldrb	r3, [r7, #15]
 8005126:	687a      	ldr	r2, [r7, #4]
 8005128:	015b      	lsls	r3, r3, #5
 800512a:	4413      	add	r3, r2
 800512c:	f203 132b 	addw	r3, r3, #299	; 0x12b
 8005130:	2200      	movs	r2, #0
 8005132:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005134:	7bfb      	ldrb	r3, [r7, #15]
 8005136:	687a      	ldr	r2, [r7, #4]
 8005138:	015b      	lsls	r3, r3, #5
 800513a:	4413      	add	r3, r2
 800513c:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8005140:	2200      	movs	r2, #0
 8005142:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005144:	7bfb      	ldrb	r3, [r7, #15]
 8005146:	687a      	ldr	r2, [r7, #4]
 8005148:	015b      	lsls	r3, r3, #5
 800514a:	4413      	add	r3, r2
 800514c:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8005150:	2200      	movs	r2, #0
 8005152:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005154:	7bfb      	ldrb	r3, [r7, #15]
 8005156:	687a      	ldr	r2, [r7, #4]
 8005158:	330a      	adds	r3, #10
 800515a:	015b      	lsls	r3, r3, #5
 800515c:	4413      	add	r3, r2
 800515e:	2200      	movs	r2, #0
 8005160:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005162:	7bfb      	ldrb	r3, [r7, #15]
 8005164:	3301      	adds	r3, #1
 8005166:	73fb      	strb	r3, [r7, #15]
 8005168:	7bfa      	ldrb	r2, [r7, #15]
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	685b      	ldr	r3, [r3, #4]
 800516e:	429a      	cmp	r2, r3
 8005170:	d3c8      	bcc.n	8005104 <HAL_PCD_Init+0xc0>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	603b      	str	r3, [r7, #0]
 8005178:	687e      	ldr	r6, [r7, #4]
 800517a:	466d      	mov	r5, sp
 800517c:	f106 0410 	add.w	r4, r6, #16
 8005180:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005182:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005184:	6823      	ldr	r3, [r4, #0]
 8005186:	602b      	str	r3, [r5, #0]
 8005188:	1d33      	adds	r3, r6, #4
 800518a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800518c:	6838      	ldr	r0, [r7, #0]
 800518e:	f003 fb08 	bl	80087a2 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2200      	movs	r2, #0
 8005196:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2201      	movs	r2, #1
 800519e:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	69db      	ldr	r3, [r3, #28]
 80051a6:	2b01      	cmp	r3, #1
 80051a8:	d102      	bne.n	80051b0 <HAL_PCD_Init+0x16c>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80051aa:	6878      	ldr	r0, [r7, #4]
 80051ac:	f000 f805 	bl	80051ba <HAL_PCDEx_ActivateLPM>
  }
  
  return HAL_OK;
 80051b0:	2300      	movs	r3, #0
}
 80051b2:	4618      	mov	r0, r3
 80051b4:	3714      	adds	r7, #20
 80051b6:	46bd      	mov	sp, r7
 80051b8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080051ba <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80051ba:	b480      	push	{r7}
 80051bc:	b085      	sub	sp, #20
 80051be:	af00      	add	r7, sp, #0
 80051c0:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2201      	movs	r2, #1
 80051cc:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
  hpcd->LPM_State = LPM_L0;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2200      	movs	r2, #0
 80051d4:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80051de:	b29b      	uxth	r3, r3
 80051e0:	f043 0301 	orr.w	r3, r3, #1
 80051e4:	b29a      	uxth	r2, r3
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80051f2:	b29b      	uxth	r3, r3
 80051f4:	f043 0302 	orr.w	r3, r3, #2
 80051f8:	b29a      	uxth	r2, r3
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8005200:	2300      	movs	r3, #0
}
 8005202:	4618      	mov	r0, r3
 8005204:	3714      	adds	r7, #20
 8005206:	46bd      	mov	sp, r7
 8005208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520c:	4770      	bx	lr

0800520e <HAL_PKA_Init>:
  *         parameters in the PKA_InitTypeDef and initialize the associated handle.
  * @param  hpka PKA handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PKA_Init(PKA_HandleTypeDef *hpka)
{
 800520e:	b580      	push	{r7, lr}
 8005210:	b084      	sub	sp, #16
 8005212:	af00      	add	r7, sp, #0
 8005214:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 8005216:	2300      	movs	r3, #0
 8005218:	73fb      	strb	r3, [r7, #15]

  /* Check the PKA handle allocation */
  if (hpka != NULL)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d01d      	beq.n	800525c <HAL_PKA_Init+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_PKA_ALL_INSTANCE(hpka->Instance));

    if (hpka->State == HAL_PKA_STATE_RESET)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	791b      	ldrb	r3, [r3, #4]
 8005224:	b2db      	uxtb	r3, r3
 8005226:	2b00      	cmp	r3, #0
 8005228:	d102      	bne.n	8005230 <HAL_PKA_Init+0x22>

      /* Init the low level hardware */
      hpka->MspInitCallback(hpka);
#else
      /* Init the low level hardware */
      HAL_PKA_MspInit(hpka);
 800522a:	6878      	ldr	r0, [r7, #4]
 800522c:	f7ff f938 	bl	80044a0 <HAL_PKA_MspInit>
#endif /* USE_HAL_PKA_REGISTER_CALLBACKS */
    }

    /* Set the state to busy */
    hpka->State = HAL_PKA_STATE_BUSY;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2202      	movs	r2, #2
 8005234:	711a      	strb	r2, [r3, #4]

    /* Reset the control register and enable the PKA */
    hpka->Instance->CR = PKA_CR_EN;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	2201      	movs	r2, #1
 800523c:	601a      	str	r2, [r3, #0]

    /* Reset any pending flag */
    SET_BIT(hpka->Instance->CLRFR, PKA_CLRFR_PROCENDFC | PKA_CLRFR_RAMERRFC | PKA_CLRFR_ADDRERRFC);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	689a      	ldr	r2, [r3, #8]
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f442 12d0 	orr.w	r2, r2, #1703936	; 0x1a0000
 800524c:	609a      	str	r2, [r3, #8]

    /* Initialize the error code */
    hpka->ErrorCode = HAL_PKA_ERROR_NONE;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2200      	movs	r2, #0
 8005252:	609a      	str	r2, [r3, #8]

    /* Set the state to ready */
    hpka->State = HAL_PKA_STATE_READY;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2201      	movs	r2, #1
 8005258:	711a      	strb	r2, [r3, #4]
 800525a:	e001      	b.n	8005260 <HAL_PKA_Init+0x52>
  }
  else
  {
    err = HAL_ERROR;
 800525c:	2301      	movs	r3, #1
 800525e:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8005260:	7bfb      	ldrb	r3, [r7, #15]
}
 8005262:	4618      	mov	r0, r3
 8005264:	3710      	adds	r7, #16
 8005266:	46bd      	mov	sp, r7
 8005268:	bd80      	pop	{r7, pc}
	...

0800526c <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800526c:	b480      	push	{r7}
 800526e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005270:	4b05      	ldr	r3, [pc, #20]	; (8005288 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4a04      	ldr	r2, [pc, #16]	; (8005288 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005276:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800527a:	6013      	str	r3, [r2, #0]
}
 800527c:	bf00      	nop
 800527e:	46bd      	mov	sp, r7
 8005280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005284:	4770      	bx	lr
 8005286:	bf00      	nop
 8005288:	58000400 	.word	0x58000400

0800528c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800528c:	b480      	push	{r7}
 800528e:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8005290:	4b04      	ldr	r3, [pc, #16]	; (80052a4 <HAL_PWREx_GetVoltageRange+0x18>)
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8005298:	4618      	mov	r0, r3
 800529a:	46bd      	mov	sp, r7
 800529c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a0:	4770      	bx	lr
 80052a2:	bf00      	nop
 80052a4:	58000400 	.word	0x58000400

080052a8 <LL_RCC_HSE_IsEnabledDiv2>:
{
 80052a8:	b480      	push	{r7}
 80052aa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80052ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80052b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80052ba:	d101      	bne.n	80052c0 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80052bc:	2301      	movs	r3, #1
 80052be:	e000      	b.n	80052c2 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80052c0:	2300      	movs	r3, #0
}
 80052c2:	4618      	mov	r0, r3
 80052c4:	46bd      	mov	sp, r7
 80052c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ca:	4770      	bx	lr

080052cc <LL_RCC_HSE_EnableBypass>:
{
 80052cc:	b480      	push	{r7}
 80052ce:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYP);
 80052d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80052da:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80052de:	6013      	str	r3, [r2, #0]
}
 80052e0:	bf00      	nop
 80052e2:	46bd      	mov	sp, r7
 80052e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e8:	4770      	bx	lr

080052ea <LL_RCC_HSE_DisableBypass>:
{
 80052ea:	b480      	push	{r7}
 80052ec:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 80052ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80052f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80052fc:	6013      	str	r3, [r2, #0]
}
 80052fe:	bf00      	nop
 8005300:	46bd      	mov	sp, r7
 8005302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005306:	4770      	bx	lr

08005308 <LL_RCC_HSE_Enable>:
{
 8005308:	b480      	push	{r7}
 800530a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800530c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005316:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800531a:	6013      	str	r3, [r2, #0]
}
 800531c:	bf00      	nop
 800531e:	46bd      	mov	sp, r7
 8005320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005324:	4770      	bx	lr

08005326 <LL_RCC_HSE_Disable>:
{
 8005326:	b480      	push	{r7}
 8005328:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800532a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005334:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005338:	6013      	str	r3, [r2, #0]
}
 800533a:	bf00      	nop
 800533c:	46bd      	mov	sp, r7
 800533e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005342:	4770      	bx	lr

08005344 <LL_RCC_HSE_IsReady>:
{
 8005344:	b480      	push	{r7}
 8005346:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8005348:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005352:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005356:	d101      	bne.n	800535c <LL_RCC_HSE_IsReady+0x18>
 8005358:	2301      	movs	r3, #1
 800535a:	e000      	b.n	800535e <LL_RCC_HSE_IsReady+0x1a>
 800535c:	2300      	movs	r3, #0
}
 800535e:	4618      	mov	r0, r3
 8005360:	46bd      	mov	sp, r7
 8005362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005366:	4770      	bx	lr

08005368 <LL_RCC_HSI_Enable>:
{
 8005368:	b480      	push	{r7}
 800536a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800536c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005376:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800537a:	6013      	str	r3, [r2, #0]
}
 800537c:	bf00      	nop
 800537e:	46bd      	mov	sp, r7
 8005380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005384:	4770      	bx	lr

08005386 <LL_RCC_HSI_Disable>:
{
 8005386:	b480      	push	{r7}
 8005388:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800538a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005394:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005398:	6013      	str	r3, [r2, #0]
}
 800539a:	bf00      	nop
 800539c:	46bd      	mov	sp, r7
 800539e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a2:	4770      	bx	lr

080053a4 <LL_RCC_HSI_IsReady>:
{
 80053a4:	b480      	push	{r7}
 80053a6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80053a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053b6:	d101      	bne.n	80053bc <LL_RCC_HSI_IsReady+0x18>
 80053b8:	2301      	movs	r3, #1
 80053ba:	e000      	b.n	80053be <LL_RCC_HSI_IsReady+0x1a>
 80053bc:	2300      	movs	r3, #0
}
 80053be:	4618      	mov	r0, r3
 80053c0:	46bd      	mov	sp, r7
 80053c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c6:	4770      	bx	lr

080053c8 <LL_RCC_HSI_SetCalibTrimming>:
{
 80053c8:	b480      	push	{r7}
 80053ca:	b083      	sub	sp, #12
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80053d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053d4:	685b      	ldr	r3, [r3, #4]
 80053d6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	061b      	lsls	r3, r3, #24
 80053de:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80053e2:	4313      	orrs	r3, r2
 80053e4:	604b      	str	r3, [r1, #4]
}
 80053e6:	bf00      	nop
 80053e8:	370c      	adds	r7, #12
 80053ea:	46bd      	mov	sp, r7
 80053ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f0:	4770      	bx	lr

080053f2 <LL_RCC_HSI48_Enable>:
{
 80053f2:	b480      	push	{r7}
 80053f4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80053f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80053fe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005402:	f043 0301 	orr.w	r3, r3, #1
 8005406:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 800540a:	bf00      	nop
 800540c:	46bd      	mov	sp, r7
 800540e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005412:	4770      	bx	lr

08005414 <LL_RCC_HSI48_Disable>:
{
 8005414:	b480      	push	{r7}
 8005416:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8005418:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800541c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005420:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005424:	f023 0301 	bic.w	r3, r3, #1
 8005428:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 800542c:	bf00      	nop
 800542e:	46bd      	mov	sp, r7
 8005430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005434:	4770      	bx	lr

08005436 <LL_RCC_HSI48_IsReady>:
{
 8005436:	b480      	push	{r7}
 8005438:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800543a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800543e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005442:	f003 0302 	and.w	r3, r3, #2
 8005446:	2b02      	cmp	r3, #2
 8005448:	d101      	bne.n	800544e <LL_RCC_HSI48_IsReady+0x18>
 800544a:	2301      	movs	r3, #1
 800544c:	e000      	b.n	8005450 <LL_RCC_HSI48_IsReady+0x1a>
 800544e:	2300      	movs	r3, #0
}
 8005450:	4618      	mov	r0, r3
 8005452:	46bd      	mov	sp, r7
 8005454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005458:	4770      	bx	lr

0800545a <LL_RCC_LSE_Enable>:
{
 800545a:	b480      	push	{r7}
 800545c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800545e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005462:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005466:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800546a:	f043 0301 	orr.w	r3, r3, #1
 800546e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005472:	bf00      	nop
 8005474:	46bd      	mov	sp, r7
 8005476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547a:	4770      	bx	lr

0800547c <LL_RCC_LSE_Disable>:
{
 800547c:	b480      	push	{r7}
 800547e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005480:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005484:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005488:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800548c:	f023 0301 	bic.w	r3, r3, #1
 8005490:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005494:	bf00      	nop
 8005496:	46bd      	mov	sp, r7
 8005498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549c:	4770      	bx	lr

0800549e <LL_RCC_LSE_EnableBypass>:
{
 800549e:	b480      	push	{r7}
 80054a0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80054a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054aa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80054ae:	f043 0304 	orr.w	r3, r3, #4
 80054b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80054b6:	bf00      	nop
 80054b8:	46bd      	mov	sp, r7
 80054ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054be:	4770      	bx	lr

080054c0 <LL_RCC_LSE_DisableBypass>:
{
 80054c0:	b480      	push	{r7}
 80054c2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80054c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054cc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80054d0:	f023 0304 	bic.w	r3, r3, #4
 80054d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80054d8:	bf00      	nop
 80054da:	46bd      	mov	sp, r7
 80054dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e0:	4770      	bx	lr

080054e2 <LL_RCC_LSE_IsReady>:
{
 80054e2:	b480      	push	{r7}
 80054e4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80054e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054ee:	f003 0302 	and.w	r3, r3, #2
 80054f2:	2b02      	cmp	r3, #2
 80054f4:	d101      	bne.n	80054fa <LL_RCC_LSE_IsReady+0x18>
 80054f6:	2301      	movs	r3, #1
 80054f8:	e000      	b.n	80054fc <LL_RCC_LSE_IsReady+0x1a>
 80054fa:	2300      	movs	r3, #0
}
 80054fc:	4618      	mov	r0, r3
 80054fe:	46bd      	mov	sp, r7
 8005500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005504:	4770      	bx	lr

08005506 <LL_RCC_LSI1_Enable>:
{
 8005506:	b480      	push	{r7}
 8005508:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800550a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800550e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005512:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005516:	f043 0301 	orr.w	r3, r3, #1
 800551a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800551e:	bf00      	nop
 8005520:	46bd      	mov	sp, r7
 8005522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005526:	4770      	bx	lr

08005528 <LL_RCC_LSI1_Disable>:
{
 8005528:	b480      	push	{r7}
 800552a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800552c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005530:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005534:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005538:	f023 0301 	bic.w	r3, r3, #1
 800553c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8005540:	bf00      	nop
 8005542:	46bd      	mov	sp, r7
 8005544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005548:	4770      	bx	lr

0800554a <LL_RCC_LSI1_IsReady>:
{
 800554a:	b480      	push	{r7}
 800554c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800554e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005552:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005556:	f003 0302 	and.w	r3, r3, #2
 800555a:	2b02      	cmp	r3, #2
 800555c:	d101      	bne.n	8005562 <LL_RCC_LSI1_IsReady+0x18>
 800555e:	2301      	movs	r3, #1
 8005560:	e000      	b.n	8005564 <LL_RCC_LSI1_IsReady+0x1a>
 8005562:	2300      	movs	r3, #0
}
 8005564:	4618      	mov	r0, r3
 8005566:	46bd      	mov	sp, r7
 8005568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556c:	4770      	bx	lr

0800556e <LL_RCC_LSI2_Enable>:
{
 800556e:	b480      	push	{r7}
 8005570:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8005572:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005576:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800557a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800557e:	f043 0304 	orr.w	r3, r3, #4
 8005582:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8005586:	bf00      	nop
 8005588:	46bd      	mov	sp, r7
 800558a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558e:	4770      	bx	lr

08005590 <LL_RCC_LSI2_Disable>:
{
 8005590:	b480      	push	{r7}
 8005592:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8005594:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005598:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800559c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80055a0:	f023 0304 	bic.w	r3, r3, #4
 80055a4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80055a8:	bf00      	nop
 80055aa:	46bd      	mov	sp, r7
 80055ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b0:	4770      	bx	lr

080055b2 <LL_RCC_LSI2_IsReady>:
{
 80055b2:	b480      	push	{r7}
 80055b4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 80055b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80055be:	f003 0308 	and.w	r3, r3, #8
 80055c2:	2b08      	cmp	r3, #8
 80055c4:	d101      	bne.n	80055ca <LL_RCC_LSI2_IsReady+0x18>
 80055c6:	2301      	movs	r3, #1
 80055c8:	e000      	b.n	80055cc <LL_RCC_LSI2_IsReady+0x1a>
 80055ca:	2300      	movs	r3, #0
}
 80055cc:	4618      	mov	r0, r3
 80055ce:	46bd      	mov	sp, r7
 80055d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d4:	4770      	bx	lr

080055d6 <LL_RCC_LSI2_SetTrimming>:
{
 80055d6:	b480      	push	{r7}
 80055d8:	b083      	sub	sp, #12
 80055da:	af00      	add	r7, sp, #0
 80055dc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 80055de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80055e6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	021b      	lsls	r3, r3, #8
 80055ee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80055f2:	4313      	orrs	r3, r2
 80055f4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80055f8:	bf00      	nop
 80055fa:	370c      	adds	r7, #12
 80055fc:	46bd      	mov	sp, r7
 80055fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005602:	4770      	bx	lr

08005604 <LL_RCC_MSI_Enable>:
{
 8005604:	b480      	push	{r7}
 8005606:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8005608:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005612:	f043 0301 	orr.w	r3, r3, #1
 8005616:	6013      	str	r3, [r2, #0]
}
 8005618:	bf00      	nop
 800561a:	46bd      	mov	sp, r7
 800561c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005620:	4770      	bx	lr

08005622 <LL_RCC_MSI_Disable>:
{
 8005622:	b480      	push	{r7}
 8005624:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8005626:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005630:	f023 0301 	bic.w	r3, r3, #1
 8005634:	6013      	str	r3, [r2, #0]
}
 8005636:	bf00      	nop
 8005638:	46bd      	mov	sp, r7
 800563a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563e:	4770      	bx	lr

08005640 <LL_RCC_MSI_IsReady>:
{
 8005640:	b480      	push	{r7}
 8005642:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8005644:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f003 0302 	and.w	r3, r3, #2
 800564e:	2b02      	cmp	r3, #2
 8005650:	d101      	bne.n	8005656 <LL_RCC_MSI_IsReady+0x16>
 8005652:	2301      	movs	r3, #1
 8005654:	e000      	b.n	8005658 <LL_RCC_MSI_IsReady+0x18>
 8005656:	2300      	movs	r3, #0
}
 8005658:	4618      	mov	r0, r3
 800565a:	46bd      	mov	sp, r7
 800565c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005660:	4770      	bx	lr

08005662 <LL_RCC_MSI_SetRange>:
{
 8005662:	b480      	push	{r7}
 8005664:	b083      	sub	sp, #12
 8005666:	af00      	add	r7, sp, #0
 8005668:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800566a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005674:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	4313      	orrs	r3, r2
 800567c:	600b      	str	r3, [r1, #0]
}
 800567e:	bf00      	nop
 8005680:	370c      	adds	r7, #12
 8005682:	46bd      	mov	sp, r7
 8005684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005688:	4770      	bx	lr

0800568a <LL_RCC_MSI_GetRange>:
{
 800568a:	b480      	push	{r7}
 800568c:	b083      	sub	sp, #12
 800568e:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8005690:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800569a:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2bb0      	cmp	r3, #176	; 0xb0
 80056a0:	d901      	bls.n	80056a6 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 80056a2:	23b0      	movs	r3, #176	; 0xb0
 80056a4:	607b      	str	r3, [r7, #4]
  return msiRange;
 80056a6:	687b      	ldr	r3, [r7, #4]
}
 80056a8:	4618      	mov	r0, r3
 80056aa:	370c      	adds	r7, #12
 80056ac:	46bd      	mov	sp, r7
 80056ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b2:	4770      	bx	lr

080056b4 <LL_RCC_MSI_SetCalibTrimming>:
{
 80056b4:	b480      	push	{r7}
 80056b6:	b083      	sub	sp, #12
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80056bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056c0:	685b      	ldr	r3, [r3, #4]
 80056c2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	021b      	lsls	r3, r3, #8
 80056ca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80056ce:	4313      	orrs	r3, r2
 80056d0:	604b      	str	r3, [r1, #4]
}
 80056d2:	bf00      	nop
 80056d4:	370c      	adds	r7, #12
 80056d6:	46bd      	mov	sp, r7
 80056d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056dc:	4770      	bx	lr

080056de <LL_RCC_SetSysClkSource>:
{
 80056de:	b480      	push	{r7}
 80056e0:	b083      	sub	sp, #12
 80056e2:	af00      	add	r7, sp, #0
 80056e4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80056e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056ea:	689b      	ldr	r3, [r3, #8]
 80056ec:	f023 0203 	bic.w	r2, r3, #3
 80056f0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	4313      	orrs	r3, r2
 80056f8:	608b      	str	r3, [r1, #8]
}
 80056fa:	bf00      	nop
 80056fc:	370c      	adds	r7, #12
 80056fe:	46bd      	mov	sp, r7
 8005700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005704:	4770      	bx	lr

08005706 <LL_RCC_GetSysClkSource>:
{
 8005706:	b480      	push	{r7}
 8005708:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800570a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800570e:	689b      	ldr	r3, [r3, #8]
 8005710:	f003 030c 	and.w	r3, r3, #12
}
 8005714:	4618      	mov	r0, r3
 8005716:	46bd      	mov	sp, r7
 8005718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571c:	4770      	bx	lr

0800571e <LL_RCC_SetAHBPrescaler>:
{
 800571e:	b480      	push	{r7}
 8005720:	b083      	sub	sp, #12
 8005722:	af00      	add	r7, sp, #0
 8005724:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8005726:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800572a:	689b      	ldr	r3, [r3, #8]
 800572c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005730:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	4313      	orrs	r3, r2
 8005738:	608b      	str	r3, [r1, #8]
}
 800573a:	bf00      	nop
 800573c:	370c      	adds	r7, #12
 800573e:	46bd      	mov	sp, r7
 8005740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005744:	4770      	bx	lr

08005746 <LL_C2_RCC_SetAHBPrescaler>:
{
 8005746:	b480      	push	{r7}
 8005748:	b083      	sub	sp, #12
 800574a:	af00      	add	r7, sp, #0
 800574c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800574e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005752:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005756:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800575a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	4313      	orrs	r3, r2
 8005762:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8005766:	bf00      	nop
 8005768:	370c      	adds	r7, #12
 800576a:	46bd      	mov	sp, r7
 800576c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005770:	4770      	bx	lr

08005772 <LL_RCC_SetAHB4Prescaler>:
{
 8005772:	b480      	push	{r7}
 8005774:	b083      	sub	sp, #12
 8005776:	af00      	add	r7, sp, #0
 8005778:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800577a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800577e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005782:	f023 020f 	bic.w	r2, r3, #15
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	091b      	lsrs	r3, r3, #4
 800578a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800578e:	4313      	orrs	r3, r2
 8005790:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8005794:	bf00      	nop
 8005796:	370c      	adds	r7, #12
 8005798:	46bd      	mov	sp, r7
 800579a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579e:	4770      	bx	lr

080057a0 <LL_RCC_SetAPB1Prescaler>:
{
 80057a0:	b480      	push	{r7}
 80057a2:	b083      	sub	sp, #12
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80057a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057ac:	689b      	ldr	r3, [r3, #8]
 80057ae:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80057b2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	4313      	orrs	r3, r2
 80057ba:	608b      	str	r3, [r1, #8]
}
 80057bc:	bf00      	nop
 80057be:	370c      	adds	r7, #12
 80057c0:	46bd      	mov	sp, r7
 80057c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c6:	4770      	bx	lr

080057c8 <LL_RCC_SetAPB2Prescaler>:
{
 80057c8:	b480      	push	{r7}
 80057ca:	b083      	sub	sp, #12
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80057d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057d4:	689b      	ldr	r3, [r3, #8]
 80057d6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80057da:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	4313      	orrs	r3, r2
 80057e2:	608b      	str	r3, [r1, #8]
}
 80057e4:	bf00      	nop
 80057e6:	370c      	adds	r7, #12
 80057e8:	46bd      	mov	sp, r7
 80057ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ee:	4770      	bx	lr

080057f0 <LL_RCC_GetAHBPrescaler>:
{
 80057f0:	b480      	push	{r7}
 80057f2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80057f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057f8:	689b      	ldr	r3, [r3, #8]
 80057fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80057fe:	4618      	mov	r0, r3
 8005800:	46bd      	mov	sp, r7
 8005802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005806:	4770      	bx	lr

08005808 <LL_RCC_GetAHB4Prescaler>:
{
 8005808:	b480      	push	{r7}
 800580a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800580c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005810:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005814:	011b      	lsls	r3, r3, #4
 8005816:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800581a:	4618      	mov	r0, r3
 800581c:	46bd      	mov	sp, r7
 800581e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005822:	4770      	bx	lr

08005824 <LL_RCC_GetAPB1Prescaler>:
{
 8005824:	b480      	push	{r7}
 8005826:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8005828:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800582c:	689b      	ldr	r3, [r3, #8]
 800582e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8005832:	4618      	mov	r0, r3
 8005834:	46bd      	mov	sp, r7
 8005836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583a:	4770      	bx	lr

0800583c <LL_RCC_GetAPB2Prescaler>:
{
 800583c:	b480      	push	{r7}
 800583e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8005840:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005844:	689b      	ldr	r3, [r3, #8]
 8005846:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 800584a:	4618      	mov	r0, r3
 800584c:	46bd      	mov	sp, r7
 800584e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005852:	4770      	bx	lr

08005854 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8005854:	b480      	push	{r7}
 8005856:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8005858:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005862:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005866:	6013      	str	r3, [r2, #0]
}
 8005868:	bf00      	nop
 800586a:	46bd      	mov	sp, r7
 800586c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005870:	4770      	bx	lr

08005872 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8005872:	b480      	push	{r7}
 8005874:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8005876:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005880:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005884:	6013      	str	r3, [r2, #0]
}
 8005886:	bf00      	nop
 8005888:	46bd      	mov	sp, r7
 800588a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588e:	4770      	bx	lr

08005890 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8005890:	b480      	push	{r7}
 8005892:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8005894:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800589e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80058a2:	d101      	bne.n	80058a8 <LL_RCC_PLL_IsReady+0x18>
 80058a4:	2301      	movs	r3, #1
 80058a6:	e000      	b.n	80058aa <LL_RCC_PLL_IsReady+0x1a>
 80058a8:	2300      	movs	r3, #0
}
 80058aa:	4618      	mov	r0, r3
 80058ac:	46bd      	mov	sp, r7
 80058ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b2:	4770      	bx	lr

080058b4 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80058b4:	b480      	push	{r7}
 80058b6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80058b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058bc:	68db      	ldr	r3, [r3, #12]
 80058be:	0a1b      	lsrs	r3, r3, #8
 80058c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80058c4:	4618      	mov	r0, r3
 80058c6:	46bd      	mov	sp, r7
 80058c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058cc:	4770      	bx	lr

080058ce <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80058ce:	b480      	push	{r7}
 80058d0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80058d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058d6:	68db      	ldr	r3, [r3, #12]
 80058d8:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 80058dc:	4618      	mov	r0, r3
 80058de:	46bd      	mov	sp, r7
 80058e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e4:	4770      	bx	lr

080058e6 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80058e6:	b480      	push	{r7}
 80058e8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80058ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058ee:	68db      	ldr	r3, [r3, #12]
 80058f0:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 80058f4:	4618      	mov	r0, r3
 80058f6:	46bd      	mov	sp, r7
 80058f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fc:	4770      	bx	lr

080058fe <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80058fe:	b480      	push	{r7}
 8005900:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8005902:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005906:	68db      	ldr	r3, [r3, #12]
 8005908:	f003 0303 	and.w	r3, r3, #3
}
 800590c:	4618      	mov	r0, r3
 800590e:	46bd      	mov	sp, r7
 8005910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005914:	4770      	bx	lr

08005916 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8005916:	b480      	push	{r7}
 8005918:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800591a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800591e:	689b      	ldr	r3, [r3, #8]
 8005920:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005924:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005928:	d101      	bne.n	800592e <LL_RCC_IsActiveFlag_HPRE+0x18>
 800592a:	2301      	movs	r3, #1
 800592c:	e000      	b.n	8005930 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800592e:	2300      	movs	r3, #0
}
 8005930:	4618      	mov	r0, r3
 8005932:	46bd      	mov	sp, r7
 8005934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005938:	4770      	bx	lr

0800593a <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 800593a:	b480      	push	{r7}
 800593c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800593e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005942:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005946:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800594a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800594e:	d101      	bne.n	8005954 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8005950:	2301      	movs	r3, #1
 8005952:	e000      	b.n	8005956 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8005954:	2300      	movs	r3, #0
}
 8005956:	4618      	mov	r0, r3
 8005958:	46bd      	mov	sp, r7
 800595a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595e:	4770      	bx	lr

08005960 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8005960:	b480      	push	{r7}
 8005962:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8005964:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005968:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800596c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005970:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005974:	d101      	bne.n	800597a <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8005976:	2301      	movs	r3, #1
 8005978:	e000      	b.n	800597c <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800597a:	2300      	movs	r3, #0
}
 800597c:	4618      	mov	r0, r3
 800597e:	46bd      	mov	sp, r7
 8005980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005984:	4770      	bx	lr

08005986 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8005986:	b480      	push	{r7}
 8005988:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800598a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800598e:	689b      	ldr	r3, [r3, #8]
 8005990:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005994:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005998:	d101      	bne.n	800599e <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800599a:	2301      	movs	r3, #1
 800599c:	e000      	b.n	80059a0 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800599e:	2300      	movs	r3, #0
}
 80059a0:	4618      	mov	r0, r3
 80059a2:	46bd      	mov	sp, r7
 80059a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a8:	4770      	bx	lr

080059aa <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 80059aa:	b480      	push	{r7}
 80059ac:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80059ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059b2:	689b      	ldr	r3, [r3, #8]
 80059b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80059b8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80059bc:	d101      	bne.n	80059c2 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80059be:	2301      	movs	r3, #1
 80059c0:	e000      	b.n	80059c4 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80059c2:	2300      	movs	r3, #0
}
 80059c4:	4618      	mov	r0, r3
 80059c6:	46bd      	mov	sp, r7
 80059c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059cc:	4770      	bx	lr
	...

080059d0 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80059d0:	b590      	push	{r4, r7, lr}
 80059d2:	b08b      	sub	sp, #44	; 0x2c
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d101      	bne.n	80059e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80059de:	2301      	movs	r3, #1
 80059e0:	e34b      	b.n	800607a <HAL_RCC_OscConfig+0x6aa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f003 0320 	and.w	r3, r3, #32
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	f000 808f 	beq.w	8005b0e <HAL_RCC_OscConfig+0x13e>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80059f0:	f7ff fe89 	bl	8005706 <LL_RCC_GetSysClkSource>
 80059f4:	6278      	str	r0, [r7, #36]	; 0x24
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80059f6:	f7ff ff82 	bl	80058fe <LL_RCC_PLL_GetMainSource>
 80059fa:	6238      	str	r0, [r7, #32]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80059fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d005      	beq.n	8005a0e <HAL_RCC_OscConfig+0x3e>
 8005a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a04:	2b0c      	cmp	r3, #12
 8005a06:	d149      	bne.n	8005a9c <HAL_RCC_OscConfig+0xcc>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8005a08:	6a3b      	ldr	r3, [r7, #32]
 8005a0a:	2b01      	cmp	r3, #1
 8005a0c:	d146      	bne.n	8005a9c <HAL_RCC_OscConfig+0xcc>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005a0e:	f7ff fe17 	bl	8005640 <LL_RCC_MSI_IsReady>
 8005a12:	4603      	mov	r3, r0
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d005      	beq.n	8005a24 <HAL_RCC_OscConfig+0x54>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	69db      	ldr	r3, [r3, #28]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d101      	bne.n	8005a24 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8005a20:	2301      	movs	r3, #1
 8005a22:	e32a      	b.n	800607a <HAL_RCC_OscConfig+0x6aa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8005a28:	f7ff fe2f 	bl	800568a <LL_RCC_MSI_GetRange>
 8005a2c:	4603      	mov	r3, r0
 8005a2e:	429c      	cmp	r4, r3
 8005a30:	d914      	bls.n	8005a5c <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a36:	4618      	mov	r0, r3
 8005a38:	f000 fd0e 	bl	8006458 <RCC_SetFlashLatencyFromMSIRange>
 8005a3c:	4603      	mov	r3, r0
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d001      	beq.n	8005a46 <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 8005a42:	2301      	movs	r3, #1
 8005a44:	e319      	b.n	800607a <HAL_RCC_OscConfig+0x6aa>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	f7ff fe09 	bl	8005662 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6a1b      	ldr	r3, [r3, #32]
 8005a54:	4618      	mov	r0, r3
 8005a56:	f7ff fe2d 	bl	80056b4 <LL_RCC_MSI_SetCalibTrimming>
 8005a5a:	e013      	b.n	8005a84 <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a60:	4618      	mov	r0, r3
 8005a62:	f7ff fdfe 	bl	8005662 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6a1b      	ldr	r3, [r3, #32]
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	f7ff fe22 	bl	80056b4 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a74:	4618      	mov	r0, r3
 8005a76:	f000 fcef 	bl	8006458 <RCC_SetFlashLatencyFromMSIRange>
 8005a7a:	4603      	mov	r3, r0
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d001      	beq.n	8005a84 <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 8005a80:	2301      	movs	r3, #1
 8005a82:	e2fa      	b.n	800607a <HAL_RCC_OscConfig+0x6aa>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClockUpdate();
 8005a84:	f7fe fe2a 	bl	80046dc <SystemCoreClockUpdate>
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005a88:	4bb4      	ldr	r3, [pc, #720]	; (8005d5c <HAL_RCC_OscConfig+0x38c>)
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	f7fe ff1f 	bl	80048d0 <HAL_InitTick>
 8005a92:	4603      	mov	r3, r0
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d039      	beq.n	8005b0c <HAL_RCC_OscConfig+0x13c>
        {
          return HAL_ERROR;
 8005a98:	2301      	movs	r3, #1
 8005a9a:	e2ee      	b.n	800607a <HAL_RCC_OscConfig+0x6aa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	69db      	ldr	r3, [r3, #28]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d01e      	beq.n	8005ae2 <HAL_RCC_OscConfig+0x112>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005aa4:	f7ff fdae 	bl	8005604 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005aa8:	f7fe ff5e 	bl	8004968 <HAL_GetTick>
 8005aac:	61f8      	str	r0, [r7, #28]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8005aae:	e008      	b.n	8005ac2 <HAL_RCC_OscConfig+0xf2>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005ab0:	f7fe ff5a 	bl	8004968 <HAL_GetTick>
 8005ab4:	4602      	mov	r2, r0
 8005ab6:	69fb      	ldr	r3, [r7, #28]
 8005ab8:	1ad3      	subs	r3, r2, r3
 8005aba:	2b02      	cmp	r3, #2
 8005abc:	d901      	bls.n	8005ac2 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8005abe:	2303      	movs	r3, #3
 8005ac0:	e2db      	b.n	800607a <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_MSI_IsReady() == 0U)
 8005ac2:	f7ff fdbd 	bl	8005640 <LL_RCC_MSI_IsReady>
 8005ac6:	4603      	mov	r3, r0
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d0f1      	beq.n	8005ab0 <HAL_RCC_OscConfig+0xe0>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	f7ff fdc6 	bl	8005662 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6a1b      	ldr	r3, [r3, #32]
 8005ada:	4618      	mov	r0, r3
 8005adc:	f7ff fdea 	bl	80056b4 <LL_RCC_MSI_SetCalibTrimming>
 8005ae0:	e015      	b.n	8005b0e <HAL_RCC_OscConfig+0x13e>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005ae2:	f7ff fd9e 	bl	8005622 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005ae6:	f7fe ff3f 	bl	8004968 <HAL_GetTick>
 8005aea:	61f8      	str	r0, [r7, #28]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8005aec:	e008      	b.n	8005b00 <HAL_RCC_OscConfig+0x130>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005aee:	f7fe ff3b 	bl	8004968 <HAL_GetTick>
 8005af2:	4602      	mov	r2, r0
 8005af4:	69fb      	ldr	r3, [r7, #28]
 8005af6:	1ad3      	subs	r3, r2, r3
 8005af8:	2b02      	cmp	r3, #2
 8005afa:	d901      	bls.n	8005b00 <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 8005afc:	2303      	movs	r3, #3
 8005afe:	e2bc      	b.n	800607a <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_MSI_IsReady() != 0U)
 8005b00:	f7ff fd9e 	bl	8005640 <LL_RCC_MSI_IsReady>
 8005b04:	4603      	mov	r3, r0
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d1f1      	bne.n	8005aee <HAL_RCC_OscConfig+0x11e>
 8005b0a:	e000      	b.n	8005b0e <HAL_RCC_OscConfig+0x13e>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005b0c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f003 0301 	and.w	r3, r3, #1
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d05a      	beq.n	8005bd0 <HAL_RCC_OscConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005b1a:	f7ff fdf4 	bl	8005706 <LL_RCC_GetSysClkSource>
 8005b1e:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005b20:	f7ff feed 	bl	80058fe <LL_RCC_PLL_GetMainSource>
 8005b24:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8005b26:	69bb      	ldr	r3, [r7, #24]
 8005b28:	2b08      	cmp	r3, #8
 8005b2a:	d005      	beq.n	8005b38 <HAL_RCC_OscConfig+0x168>
 8005b2c:	69bb      	ldr	r3, [r7, #24]
 8005b2e:	2b0c      	cmp	r3, #12
 8005b30:	d10d      	bne.n	8005b4e <HAL_RCC_OscConfig+0x17e>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8005b32:	697b      	ldr	r3, [r7, #20]
 8005b34:	2b03      	cmp	r3, #3
 8005b36:	d10a      	bne.n	8005b4e <HAL_RCC_OscConfig+0x17e>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b38:	f7ff fc04 	bl	8005344 <LL_RCC_HSE_IsReady>
 8005b3c:	4603      	mov	r3, r0
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d045      	beq.n	8005bce <HAL_RCC_OscConfig+0x1fe>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	685b      	ldr	r3, [r3, #4]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d141      	bne.n	8005bce <HAL_RCC_OscConfig+0x1fe>
      {
        return HAL_ERROR;
 8005b4a:	2301      	movs	r3, #1
 8005b4c:	e295      	b.n	800607a <HAL_RCC_OscConfig+0x6aa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	685b      	ldr	r3, [r3, #4]
 8005b52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b56:	d102      	bne.n	8005b5e <HAL_RCC_OscConfig+0x18e>
 8005b58:	f7ff fbd6 	bl	8005308 <LL_RCC_HSE_Enable>
 8005b5c:	e00d      	b.n	8005b7a <HAL_RCC_OscConfig+0x1aa>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	685b      	ldr	r3, [r3, #4]
 8005b62:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005b66:	d104      	bne.n	8005b72 <HAL_RCC_OscConfig+0x1a2>
 8005b68:	f7ff fbb0 	bl	80052cc <LL_RCC_HSE_EnableBypass>
 8005b6c:	f7ff fbcc 	bl	8005308 <LL_RCC_HSE_Enable>
 8005b70:	e003      	b.n	8005b7a <HAL_RCC_OscConfig+0x1aa>
 8005b72:	f7ff fbd8 	bl	8005326 <LL_RCC_HSE_Disable>
 8005b76:	f7ff fbb8 	bl	80052ea <LL_RCC_HSE_DisableBypass>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	685b      	ldr	r3, [r3, #4]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d012      	beq.n	8005ba8 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b82:	f7fe fef1 	bl	8004968 <HAL_GetTick>
 8005b86:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8005b88:	e008      	b.n	8005b9c <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005b8a:	f7fe feed 	bl	8004968 <HAL_GetTick>
 8005b8e:	4602      	mov	r2, r0
 8005b90:	69fb      	ldr	r3, [r7, #28]
 8005b92:	1ad3      	subs	r3, r2, r3
 8005b94:	2b64      	cmp	r3, #100	; 0x64
 8005b96:	d901      	bls.n	8005b9c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8005b98:	2303      	movs	r3, #3
 8005b9a:	e26e      	b.n	800607a <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_HSE_IsReady() == 0U)
 8005b9c:	f7ff fbd2 	bl	8005344 <LL_RCC_HSE_IsReady>
 8005ba0:	4603      	mov	r3, r0
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d0f1      	beq.n	8005b8a <HAL_RCC_OscConfig+0x1ba>
 8005ba6:	e013      	b.n	8005bd0 <HAL_RCC_OscConfig+0x200>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ba8:	f7fe fede 	bl	8004968 <HAL_GetTick>
 8005bac:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8005bae:	e008      	b.n	8005bc2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005bb0:	f7fe feda 	bl	8004968 <HAL_GetTick>
 8005bb4:	4602      	mov	r2, r0
 8005bb6:	69fb      	ldr	r3, [r7, #28]
 8005bb8:	1ad3      	subs	r3, r2, r3
 8005bba:	2b64      	cmp	r3, #100	; 0x64
 8005bbc:	d901      	bls.n	8005bc2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8005bbe:	2303      	movs	r3, #3
 8005bc0:	e25b      	b.n	800607a <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_HSE_IsReady() != 0U)
 8005bc2:	f7ff fbbf 	bl	8005344 <LL_RCC_HSE_IsReady>
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d1f1      	bne.n	8005bb0 <HAL_RCC_OscConfig+0x1e0>
 8005bcc:	e000      	b.n	8005bd0 <HAL_RCC_OscConfig+0x200>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005bce:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f003 0302 	and.w	r3, r3, #2
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d051      	beq.n	8005c80 <HAL_RCC_OscConfig+0x2b0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005bdc:	f7ff fd93 	bl	8005706 <LL_RCC_GetSysClkSource>
 8005be0:	6138      	str	r0, [r7, #16]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005be2:	f7ff fe8c 	bl	80058fe <LL_RCC_PLL_GetMainSource>
 8005be6:	60f8      	str	r0, [r7, #12]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8005be8:	693b      	ldr	r3, [r7, #16]
 8005bea:	2b04      	cmp	r3, #4
 8005bec:	d005      	beq.n	8005bfa <HAL_RCC_OscConfig+0x22a>
 8005bee:	693b      	ldr	r3, [r7, #16]
 8005bf0:	2b0c      	cmp	r3, #12
 8005bf2:	d113      	bne.n	8005c1c <HAL_RCC_OscConfig+0x24c>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	2b02      	cmp	r3, #2
 8005bf8:	d110      	bne.n	8005c1c <HAL_RCC_OscConfig+0x24c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005bfa:	f7ff fbd3 	bl	80053a4 <LL_RCC_HSI_IsReady>
 8005bfe:	4603      	mov	r3, r0
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d005      	beq.n	8005c10 <HAL_RCC_OscConfig+0x240>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	68db      	ldr	r3, [r3, #12]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d101      	bne.n	8005c10 <HAL_RCC_OscConfig+0x240>
      {
        return HAL_ERROR;
 8005c0c:	2301      	movs	r3, #1
 8005c0e:	e234      	b.n	800607a <HAL_RCC_OscConfig+0x6aa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	691b      	ldr	r3, [r3, #16]
 8005c14:	4618      	mov	r0, r3
 8005c16:	f7ff fbd7 	bl	80053c8 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005c1a:	e031      	b.n	8005c80 <HAL_RCC_OscConfig+0x2b0>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	68db      	ldr	r3, [r3, #12]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d019      	beq.n	8005c58 <HAL_RCC_OscConfig+0x288>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005c24:	f7ff fba0 	bl	8005368 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c28:	f7fe fe9e 	bl	8004968 <HAL_GetTick>
 8005c2c:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8005c2e:	e008      	b.n	8005c42 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005c30:	f7fe fe9a 	bl	8004968 <HAL_GetTick>
 8005c34:	4602      	mov	r2, r0
 8005c36:	69fb      	ldr	r3, [r7, #28]
 8005c38:	1ad3      	subs	r3, r2, r3
 8005c3a:	2b02      	cmp	r3, #2
 8005c3c:	d901      	bls.n	8005c42 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8005c3e:	2303      	movs	r3, #3
 8005c40:	e21b      	b.n	800607a <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_HSI_IsReady() == 0U)
 8005c42:	f7ff fbaf 	bl	80053a4 <LL_RCC_HSI_IsReady>
 8005c46:	4603      	mov	r3, r0
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d0f1      	beq.n	8005c30 <HAL_RCC_OscConfig+0x260>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	691b      	ldr	r3, [r3, #16]
 8005c50:	4618      	mov	r0, r3
 8005c52:	f7ff fbb9 	bl	80053c8 <LL_RCC_HSI_SetCalibTrimming>
 8005c56:	e013      	b.n	8005c80 <HAL_RCC_OscConfig+0x2b0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005c58:	f7ff fb95 	bl	8005386 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c5c:	f7fe fe84 	bl	8004968 <HAL_GetTick>
 8005c60:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8005c62:	e008      	b.n	8005c76 <HAL_RCC_OscConfig+0x2a6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005c64:	f7fe fe80 	bl	8004968 <HAL_GetTick>
 8005c68:	4602      	mov	r2, r0
 8005c6a:	69fb      	ldr	r3, [r7, #28]
 8005c6c:	1ad3      	subs	r3, r2, r3
 8005c6e:	2b02      	cmp	r3, #2
 8005c70:	d901      	bls.n	8005c76 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8005c72:	2303      	movs	r3, #3
 8005c74:	e201      	b.n	800607a <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_HSI_IsReady() != 0U)
 8005c76:	f7ff fb95 	bl	80053a4 <LL_RCC_HSI_IsReady>
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d1f1      	bne.n	8005c64 <HAL_RCC_OscConfig+0x294>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f003 0308 	and.w	r3, r3, #8
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d106      	bne.n	8005c9a <HAL_RCC_OscConfig+0x2ca>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	f000 80a2 	beq.w	8005dde <HAL_RCC_OscConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	695b      	ldr	r3, [r3, #20]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d075      	beq.n	8005d8e <HAL_RCC_OscConfig+0x3be>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f003 0310 	and.w	r3, r3, #16
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d046      	beq.n	8005d3c <HAL_RCC_OscConfig+0x36c>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8005cae:	f7ff fc4c 	bl	800554a <LL_RCC_LSI1_IsReady>
 8005cb2:	4603      	mov	r3, r0
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d113      	bne.n	8005ce0 <HAL_RCC_OscConfig+0x310>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8005cb8:	f7ff fc25 	bl	8005506 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005cbc:	f7fe fe54 	bl	8004968 <HAL_GetTick>
 8005cc0:	61f8      	str	r0, [r7, #28]

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8005cc2:	e008      	b.n	8005cd6 <HAL_RCC_OscConfig+0x306>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005cc4:	f7fe fe50 	bl	8004968 <HAL_GetTick>
 8005cc8:	4602      	mov	r2, r0
 8005cca:	69fb      	ldr	r3, [r7, #28]
 8005ccc:	1ad3      	subs	r3, r2, r3
 8005cce:	2b02      	cmp	r3, #2
 8005cd0:	d901      	bls.n	8005cd6 <HAL_RCC_OscConfig+0x306>
            {
              return HAL_TIMEOUT;
 8005cd2:	2303      	movs	r3, #3
 8005cd4:	e1d1      	b.n	800607a <HAL_RCC_OscConfig+0x6aa>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8005cd6:	f7ff fc38 	bl	800554a <LL_RCC_LSI1_IsReady>
 8005cda:	4603      	mov	r3, r0
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d0f1      	beq.n	8005cc4 <HAL_RCC_OscConfig+0x2f4>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8005ce0:	f7ff fc45 	bl	800556e <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ce4:	f7fe fe40 	bl	8004968 <HAL_GetTick>
 8005ce8:	61f8      	str	r0, [r7, #28]

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8005cea:	e008      	b.n	8005cfe <HAL_RCC_OscConfig+0x32e>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8005cec:	f7fe fe3c 	bl	8004968 <HAL_GetTick>
 8005cf0:	4602      	mov	r2, r0
 8005cf2:	69fb      	ldr	r3, [r7, #28]
 8005cf4:	1ad3      	subs	r3, r2, r3
 8005cf6:	2b03      	cmp	r3, #3
 8005cf8:	d901      	bls.n	8005cfe <HAL_RCC_OscConfig+0x32e>
          {
            return HAL_TIMEOUT;
 8005cfa:	2303      	movs	r3, #3
 8005cfc:	e1bd      	b.n	800607a <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8005cfe:	f7ff fc58 	bl	80055b2 <LL_RCC_LSI2_IsReady>
 8005d02:	4603      	mov	r3, r0
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d0f1      	beq.n	8005cec <HAL_RCC_OscConfig+0x31c>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	699b      	ldr	r3, [r3, #24]
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	f7ff fc62 	bl	80055d6 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8005d12:	f7ff fc09 	bl	8005528 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d16:	f7fe fe27 	bl	8004968 <HAL_GetTick>
 8005d1a:	61f8      	str	r0, [r7, #28]

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8005d1c:	e008      	b.n	8005d30 <HAL_RCC_OscConfig+0x360>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005d1e:	f7fe fe23 	bl	8004968 <HAL_GetTick>
 8005d22:	4602      	mov	r2, r0
 8005d24:	69fb      	ldr	r3, [r7, #28]
 8005d26:	1ad3      	subs	r3, r2, r3
 8005d28:	2b02      	cmp	r3, #2
 8005d2a:	d901      	bls.n	8005d30 <HAL_RCC_OscConfig+0x360>
          {
            return HAL_TIMEOUT;
 8005d2c:	2303      	movs	r3, #3
 8005d2e:	e1a4      	b.n	800607a <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8005d30:	f7ff fc0b 	bl	800554a <LL_RCC_LSI1_IsReady>
 8005d34:	4603      	mov	r3, r0
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d1f1      	bne.n	8005d1e <HAL_RCC_OscConfig+0x34e>
 8005d3a:	e050      	b.n	8005dde <HAL_RCC_OscConfig+0x40e>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8005d3c:	f7ff fbe3 	bl	8005506 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d40:	f7fe fe12 	bl	8004968 <HAL_GetTick>
 8005d44:	61f8      	str	r0, [r7, #28]

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8005d46:	e00b      	b.n	8005d60 <HAL_RCC_OscConfig+0x390>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005d48:	f7fe fe0e 	bl	8004968 <HAL_GetTick>
 8005d4c:	4602      	mov	r2, r0
 8005d4e:	69fb      	ldr	r3, [r7, #28]
 8005d50:	1ad3      	subs	r3, r2, r3
 8005d52:	2b02      	cmp	r3, #2
 8005d54:	d904      	bls.n	8005d60 <HAL_RCC_OscConfig+0x390>
          {
            return HAL_TIMEOUT;
 8005d56:	2303      	movs	r3, #3
 8005d58:	e18f      	b.n	800607a <HAL_RCC_OscConfig+0x6aa>
 8005d5a:	bf00      	nop
 8005d5c:	20000008 	.word	0x20000008
        while (LL_RCC_LSI1_IsReady() == 0U)
 8005d60:	f7ff fbf3 	bl	800554a <LL_RCC_LSI1_IsReady>
 8005d64:	4603      	mov	r3, r0
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d0ee      	beq.n	8005d48 <HAL_RCC_OscConfig+0x378>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8005d6a:	f7ff fc11 	bl	8005590 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8005d6e:	e008      	b.n	8005d82 <HAL_RCC_OscConfig+0x3b2>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8005d70:	f7fe fdfa 	bl	8004968 <HAL_GetTick>
 8005d74:	4602      	mov	r2, r0
 8005d76:	69fb      	ldr	r3, [r7, #28]
 8005d78:	1ad3      	subs	r3, r2, r3
 8005d7a:	2b03      	cmp	r3, #3
 8005d7c:	d901      	bls.n	8005d82 <HAL_RCC_OscConfig+0x3b2>
          {
            return HAL_TIMEOUT;
 8005d7e:	2303      	movs	r3, #3
 8005d80:	e17b      	b.n	800607a <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8005d82:	f7ff fc16 	bl	80055b2 <LL_RCC_LSI2_IsReady>
 8005d86:	4603      	mov	r3, r0
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d1f1      	bne.n	8005d70 <HAL_RCC_OscConfig+0x3a0>
 8005d8c:	e027      	b.n	8005dde <HAL_RCC_OscConfig+0x40e>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8005d8e:	f7ff fbff 	bl	8005590 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d92:	f7fe fde9 	bl	8004968 <HAL_GetTick>
 8005d96:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8005d98:	e008      	b.n	8005dac <HAL_RCC_OscConfig+0x3dc>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8005d9a:	f7fe fde5 	bl	8004968 <HAL_GetTick>
 8005d9e:	4602      	mov	r2, r0
 8005da0:	69fb      	ldr	r3, [r7, #28]
 8005da2:	1ad3      	subs	r3, r2, r3
 8005da4:	2b03      	cmp	r3, #3
 8005da6:	d901      	bls.n	8005dac <HAL_RCC_OscConfig+0x3dc>
        {
          return HAL_TIMEOUT;
 8005da8:	2303      	movs	r3, #3
 8005daa:	e166      	b.n	800607a <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8005dac:	f7ff fc01 	bl	80055b2 <LL_RCC_LSI2_IsReady>
 8005db0:	4603      	mov	r3, r0
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d1f1      	bne.n	8005d9a <HAL_RCC_OscConfig+0x3ca>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8005db6:	f7ff fbb7 	bl	8005528 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005dba:	f7fe fdd5 	bl	8004968 <HAL_GetTick>
 8005dbe:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8005dc0:	e008      	b.n	8005dd4 <HAL_RCC_OscConfig+0x404>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005dc2:	f7fe fdd1 	bl	8004968 <HAL_GetTick>
 8005dc6:	4602      	mov	r2, r0
 8005dc8:	69fb      	ldr	r3, [r7, #28]
 8005dca:	1ad3      	subs	r3, r2, r3
 8005dcc:	2b02      	cmp	r3, #2
 8005dce:	d901      	bls.n	8005dd4 <HAL_RCC_OscConfig+0x404>
        {
          return HAL_TIMEOUT;
 8005dd0:	2303      	movs	r3, #3
 8005dd2:	e152      	b.n	800607a <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8005dd4:	f7ff fbb9 	bl	800554a <LL_RCC_LSI1_IsReady>
 8005dd8:	4603      	mov	r3, r0
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d1f1      	bne.n	8005dc2 <HAL_RCC_OscConfig+0x3f2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f003 0304 	and.w	r3, r3, #4
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d05b      	beq.n	8005ea2 <HAL_RCC_OscConfig+0x4d2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005dea:	4ba6      	ldr	r3, [pc, #664]	; (8006084 <HAL_RCC_OscConfig+0x6b4>)
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d114      	bne.n	8005e20 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8005df6:	f7ff fa39 	bl	800526c <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005dfa:	f7fe fdb5 	bl	8004968 <HAL_GetTick>
 8005dfe:	61f8      	str	r0, [r7, #28]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005e00:	e008      	b.n	8005e14 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e02:	f7fe fdb1 	bl	8004968 <HAL_GetTick>
 8005e06:	4602      	mov	r2, r0
 8005e08:	69fb      	ldr	r3, [r7, #28]
 8005e0a:	1ad3      	subs	r3, r2, r3
 8005e0c:	2b02      	cmp	r3, #2
 8005e0e:	d901      	bls.n	8005e14 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8005e10:	2303      	movs	r3, #3
 8005e12:	e132      	b.n	800607a <HAL_RCC_OscConfig+0x6aa>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005e14:	4b9b      	ldr	r3, [pc, #620]	; (8006084 <HAL_RCC_OscConfig+0x6b4>)
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d0f0      	beq.n	8005e02 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	689b      	ldr	r3, [r3, #8]
 8005e24:	2b01      	cmp	r3, #1
 8005e26:	d102      	bne.n	8005e2e <HAL_RCC_OscConfig+0x45e>
 8005e28:	f7ff fb17 	bl	800545a <LL_RCC_LSE_Enable>
 8005e2c:	e00c      	b.n	8005e48 <HAL_RCC_OscConfig+0x478>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	689b      	ldr	r3, [r3, #8]
 8005e32:	2b05      	cmp	r3, #5
 8005e34:	d104      	bne.n	8005e40 <HAL_RCC_OscConfig+0x470>
 8005e36:	f7ff fb32 	bl	800549e <LL_RCC_LSE_EnableBypass>
 8005e3a:	f7ff fb0e 	bl	800545a <LL_RCC_LSE_Enable>
 8005e3e:	e003      	b.n	8005e48 <HAL_RCC_OscConfig+0x478>
 8005e40:	f7ff fb1c 	bl	800547c <LL_RCC_LSE_Disable>
 8005e44:	f7ff fb3c 	bl	80054c0 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	689b      	ldr	r3, [r3, #8]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d014      	beq.n	8005e7a <HAL_RCC_OscConfig+0x4aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e50:	f7fe fd8a 	bl	8004968 <HAL_GetTick>
 8005e54:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8005e56:	e00a      	b.n	8005e6e <HAL_RCC_OscConfig+0x49e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e58:	f7fe fd86 	bl	8004968 <HAL_GetTick>
 8005e5c:	4602      	mov	r2, r0
 8005e5e:	69fb      	ldr	r3, [r7, #28]
 8005e60:	1ad3      	subs	r3, r2, r3
 8005e62:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d901      	bls.n	8005e6e <HAL_RCC_OscConfig+0x49e>
        {
          return HAL_TIMEOUT;
 8005e6a:	2303      	movs	r3, #3
 8005e6c:	e105      	b.n	800607a <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_LSE_IsReady() == 0U)
 8005e6e:	f7ff fb38 	bl	80054e2 <LL_RCC_LSE_IsReady>
 8005e72:	4603      	mov	r3, r0
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d0ef      	beq.n	8005e58 <HAL_RCC_OscConfig+0x488>
 8005e78:	e013      	b.n	8005ea2 <HAL_RCC_OscConfig+0x4d2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e7a:	f7fe fd75 	bl	8004968 <HAL_GetTick>
 8005e7e:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8005e80:	e00a      	b.n	8005e98 <HAL_RCC_OscConfig+0x4c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e82:	f7fe fd71 	bl	8004968 <HAL_GetTick>
 8005e86:	4602      	mov	r2, r0
 8005e88:	69fb      	ldr	r3, [r7, #28]
 8005e8a:	1ad3      	subs	r3, r2, r3
 8005e8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e90:	4293      	cmp	r3, r2
 8005e92:	d901      	bls.n	8005e98 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 8005e94:	2303      	movs	r3, #3
 8005e96:	e0f0      	b.n	800607a <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_LSE_IsReady() != 0U)
 8005e98:	f7ff fb23 	bl	80054e2 <LL_RCC_LSE_IsReady>
 8005e9c:	4603      	mov	r3, r0
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d1ef      	bne.n	8005e82 <HAL_RCC_OscConfig+0x4b2>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d02c      	beq.n	8005f08 <HAL_RCC_OscConfig+0x538>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d014      	beq.n	8005ee0 <HAL_RCC_OscConfig+0x510>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005eb6:	f7ff fa9c 	bl	80053f2 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005eba:	f7fe fd55 	bl	8004968 <HAL_GetTick>
 8005ebe:	61f8      	str	r0, [r7, #28]

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8005ec0:	e008      	b.n	8005ed4 <HAL_RCC_OscConfig+0x504>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005ec2:	f7fe fd51 	bl	8004968 <HAL_GetTick>
 8005ec6:	4602      	mov	r2, r0
 8005ec8:	69fb      	ldr	r3, [r7, #28]
 8005eca:	1ad3      	subs	r3, r2, r3
 8005ecc:	2b02      	cmp	r3, #2
 8005ece:	d901      	bls.n	8005ed4 <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 8005ed0:	2303      	movs	r3, #3
 8005ed2:	e0d2      	b.n	800607a <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8005ed4:	f7ff faaf 	bl	8005436 <LL_RCC_HSI48_IsReady>
 8005ed8:	4603      	mov	r3, r0
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d0f1      	beq.n	8005ec2 <HAL_RCC_OscConfig+0x4f2>
 8005ede:	e013      	b.n	8005f08 <HAL_RCC_OscConfig+0x538>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005ee0:	f7ff fa98 	bl	8005414 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ee4:	f7fe fd40 	bl	8004968 <HAL_GetTick>
 8005ee8:	61f8      	str	r0, [r7, #28]

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8005eea:	e008      	b.n	8005efe <HAL_RCC_OscConfig+0x52e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005eec:	f7fe fd3c 	bl	8004968 <HAL_GetTick>
 8005ef0:	4602      	mov	r2, r0
 8005ef2:	69fb      	ldr	r3, [r7, #28]
 8005ef4:	1ad3      	subs	r3, r2, r3
 8005ef6:	2b02      	cmp	r3, #2
 8005ef8:	d901      	bls.n	8005efe <HAL_RCC_OscConfig+0x52e>
        {
          return HAL_TIMEOUT;
 8005efa:	2303      	movs	r3, #3
 8005efc:	e0bd      	b.n	800607a <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8005efe:	f7ff fa9a 	bl	8005436 <LL_RCC_HSI48_IsReady>
 8005f02:	4603      	mov	r3, r0
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d1f1      	bne.n	8005eec <HAL_RCC_OscConfig+0x51c>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	f000 80b3 	beq.w	8006078 <HAL_RCC_OscConfig+0x6a8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005f12:	f7ff fbf8 	bl	8005706 <LL_RCC_GetSysClkSource>
 8005f16:	4603      	mov	r3, r0
 8005f18:	2b0c      	cmp	r3, #12
 8005f1a:	d076      	beq.n	800600a <HAL_RCC_OscConfig+0x63a>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f20:	2b02      	cmp	r3, #2
 8005f22:	d14b      	bne.n	8005fbc <HAL_RCC_OscConfig+0x5ec>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f24:	f7ff fca5 	bl	8005872 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f28:	f7fe fd1e 	bl	8004968 <HAL_GetTick>
 8005f2c:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8005f2e:	e008      	b.n	8005f42 <HAL_RCC_OscConfig+0x572>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f30:	f7fe fd1a 	bl	8004968 <HAL_GetTick>
 8005f34:	4602      	mov	r2, r0
 8005f36:	69fb      	ldr	r3, [r7, #28]
 8005f38:	1ad3      	subs	r3, r2, r3
 8005f3a:	2b02      	cmp	r3, #2
 8005f3c:	d901      	bls.n	8005f42 <HAL_RCC_OscConfig+0x572>
          {
            return HAL_TIMEOUT;
 8005f3e:	2303      	movs	r3, #3
 8005f40:	e09b      	b.n	800607a <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_PLL_IsReady() != 0U)
 8005f42:	f7ff fca5 	bl	8005890 <LL_RCC_PLL_IsReady>
 8005f46:	4603      	mov	r3, r0
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d1f1      	bne.n	8005f30 <HAL_RCC_OscConfig+0x560>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005f4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f50:	68da      	ldr	r2, [r3, #12]
 8005f52:	4b4d      	ldr	r3, [pc, #308]	; (8006088 <HAL_RCC_OscConfig+0x6b8>)
 8005f54:	4013      	ands	r3, r2
 8005f56:	687a      	ldr	r2, [r7, #4]
 8005f58:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8005f5a:	687a      	ldr	r2, [r7, #4]
 8005f5c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005f5e:	4311      	orrs	r1, r2
 8005f60:	687a      	ldr	r2, [r7, #4]
 8005f62:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005f64:	0212      	lsls	r2, r2, #8
 8005f66:	4311      	orrs	r1, r2
 8005f68:	687a      	ldr	r2, [r7, #4]
 8005f6a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005f6c:	4311      	orrs	r1, r2
 8005f6e:	687a      	ldr	r2, [r7, #4]
 8005f70:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005f72:	4311      	orrs	r1, r2
 8005f74:	687a      	ldr	r2, [r7, #4]
 8005f76:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005f78:	430a      	orrs	r2, r1
 8005f7a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005f7e:	4313      	orrs	r3, r2
 8005f80:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005f82:	f7ff fc67 	bl	8005854 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005f86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f8a:	68db      	ldr	r3, [r3, #12]
 8005f8c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005f90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f94:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f96:	f7fe fce7 	bl	8004968 <HAL_GetTick>
 8005f9a:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8005f9c:	e008      	b.n	8005fb0 <HAL_RCC_OscConfig+0x5e0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f9e:	f7fe fce3 	bl	8004968 <HAL_GetTick>
 8005fa2:	4602      	mov	r2, r0
 8005fa4:	69fb      	ldr	r3, [r7, #28]
 8005fa6:	1ad3      	subs	r3, r2, r3
 8005fa8:	2b02      	cmp	r3, #2
 8005faa:	d901      	bls.n	8005fb0 <HAL_RCC_OscConfig+0x5e0>
          {
            return HAL_TIMEOUT;
 8005fac:	2303      	movs	r3, #3
 8005fae:	e064      	b.n	800607a <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_PLL_IsReady() == 0U)
 8005fb0:	f7ff fc6e 	bl	8005890 <LL_RCC_PLL_IsReady>
 8005fb4:	4603      	mov	r3, r0
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d0f1      	beq.n	8005f9e <HAL_RCC_OscConfig+0x5ce>
 8005fba:	e05d      	b.n	8006078 <HAL_RCC_OscConfig+0x6a8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005fbc:	f7ff fc59 	bl	8005872 <LL_RCC_PLL_Disable>

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8005fc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fc4:	68db      	ldr	r3, [r3, #12]
 8005fc6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005fca:	f023 0303 	bic.w	r3, r3, #3
 8005fce:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 8005fd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fd4:	68db      	ldr	r3, [r3, #12]
 8005fd6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005fda:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8005fde:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005fe2:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fe4:	f7fe fcc0 	bl	8004968 <HAL_GetTick>
 8005fe8:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8005fea:	e008      	b.n	8005ffe <HAL_RCC_OscConfig+0x62e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005fec:	f7fe fcbc 	bl	8004968 <HAL_GetTick>
 8005ff0:	4602      	mov	r2, r0
 8005ff2:	69fb      	ldr	r3, [r7, #28]
 8005ff4:	1ad3      	subs	r3, r2, r3
 8005ff6:	2b02      	cmp	r3, #2
 8005ff8:	d901      	bls.n	8005ffe <HAL_RCC_OscConfig+0x62e>
          {
            return HAL_TIMEOUT;
 8005ffa:	2303      	movs	r3, #3
 8005ffc:	e03d      	b.n	800607a <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_PLL_IsReady() != 0U)
 8005ffe:	f7ff fc47 	bl	8005890 <LL_RCC_PLL_IsReady>
 8006002:	4603      	mov	r3, r0
 8006004:	2b00      	cmp	r3, #0
 8006006:	d1f1      	bne.n	8005fec <HAL_RCC_OscConfig+0x61c>
 8006008:	e036      	b.n	8006078 <HAL_RCC_OscConfig+0x6a8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800600e:	2b01      	cmp	r3, #1
 8006010:	d101      	bne.n	8006016 <HAL_RCC_OscConfig+0x646>
      {
        return HAL_ERROR;
 8006012:	2301      	movs	r3, #1
 8006014:	e031      	b.n	800607a <HAL_RCC_OscConfig+0x6aa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 8006016:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800601a:	68db      	ldr	r3, [r3, #12]
 800601c:	60bb      	str	r3, [r7, #8]

        if ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800601e:	68bb      	ldr	r3, [r7, #8]
 8006020:	f003 0203 	and.w	r2, r3, #3
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006028:	429a      	cmp	r2, r3
 800602a:	d123      	bne.n	8006074 <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800602c:	68bb      	ldr	r3, [r7, #8]
 800602e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006036:	429a      	cmp	r2, r3
 8006038:	d11c      	bne.n	8006074 <HAL_RCC_OscConfig+0x6a4>
            ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800603a:	68bb      	ldr	r3, [r7, #8]
 800603c:	0a1b      	lsrs	r3, r3, #8
 800603e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006046:	429a      	cmp	r2, r3
 8006048:	d114      	bne.n	8006074 <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800604a:	68bb      	ldr	r3, [r7, #8]
 800604c:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
            ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8006054:	429a      	cmp	r2, r3
 8006056:	d10d      	bne.n	8006074 <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006062:	429a      	cmp	r2, r3
 8006064:	d106      	bne.n	8006074 <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8006066:	68bb      	ldr	r3, [r7, #8]
 8006068:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8006070:	429a      	cmp	r2, r3
 8006072:	d001      	beq.n	8006078 <HAL_RCC_OscConfig+0x6a8>
        {
          return HAL_ERROR;
 8006074:	2301      	movs	r3, #1
 8006076:	e000      	b.n	800607a <HAL_RCC_OscConfig+0x6aa>
        }
      }
    }
  }
  return HAL_OK;
 8006078:	2300      	movs	r3, #0
}
 800607a:	4618      	mov	r0, r3
 800607c:	372c      	adds	r7, #44	; 0x2c
 800607e:	46bd      	mov	sp, r7
 8006080:	bd90      	pop	{r4, r7, pc}
 8006082:	bf00      	nop
 8006084:	58000400 	.word	0x58000400
 8006088:	11c1808c 	.word	0x11c1808c

0800608c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b084      	sub	sp, #16
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
 8006094:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d101      	bne.n	80060a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800609c:	2301      	movs	r3, #1
 800609e:	e12a      	b.n	80062f6 <HAL_RCC_ClockConfig+0x26a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80060a0:	4b97      	ldr	r3, [pc, #604]	; (8006300 <HAL_RCC_ClockConfig+0x274>)
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f003 0307 	and.w	r3, r3, #7
 80060a8:	683a      	ldr	r2, [r7, #0]
 80060aa:	429a      	cmp	r2, r3
 80060ac:	d91b      	bls.n	80060e6 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80060ae:	4b94      	ldr	r3, [pc, #592]	; (8006300 <HAL_RCC_ClockConfig+0x274>)
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f023 0207 	bic.w	r2, r3, #7
 80060b6:	4992      	ldr	r1, [pc, #584]	; (8006300 <HAL_RCC_ClockConfig+0x274>)
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	4313      	orrs	r3, r2
 80060bc:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80060be:	f7fe fc53 	bl	8004968 <HAL_GetTick>
 80060c2:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80060c4:	e008      	b.n	80060d8 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80060c6:	f7fe fc4f 	bl	8004968 <HAL_GetTick>
 80060ca:	4602      	mov	r2, r0
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	1ad3      	subs	r3, r2, r3
 80060d0:	2b02      	cmp	r3, #2
 80060d2:	d901      	bls.n	80060d8 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80060d4:	2303      	movs	r3, #3
 80060d6:	e10e      	b.n	80062f6 <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80060d8:	4b89      	ldr	r3, [pc, #548]	; (8006300 <HAL_RCC_ClockConfig+0x274>)
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f003 0307 	and.w	r3, r3, #7
 80060e0:	683a      	ldr	r2, [r7, #0]
 80060e2:	429a      	cmp	r2, r3
 80060e4:	d1ef      	bne.n	80060c6 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f003 0302 	and.w	r3, r3, #2
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d016      	beq.n	8006120 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	689b      	ldr	r3, [r3, #8]
 80060f6:	4618      	mov	r0, r3
 80060f8:	f7ff fb11 	bl	800571e <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80060fc:	f7fe fc34 	bl	8004968 <HAL_GetTick>
 8006100:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8006102:	e008      	b.n	8006116 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006104:	f7fe fc30 	bl	8004968 <HAL_GetTick>
 8006108:	4602      	mov	r2, r0
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	1ad3      	subs	r3, r2, r3
 800610e:	2b02      	cmp	r3, #2
 8006110:	d901      	bls.n	8006116 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8006112:	2303      	movs	r3, #3
 8006114:	e0ef      	b.n	80062f6 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8006116:	f7ff fbfe 	bl	8005916 <LL_RCC_IsActiveFlag_HPRE>
 800611a:	4603      	mov	r3, r0
 800611c:	2b00      	cmp	r3, #0
 800611e:	d0f1      	beq.n	8006104 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f003 0320 	and.w	r3, r3, #32
 8006128:	2b00      	cmp	r3, #0
 800612a:	d016      	beq.n	800615a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	695b      	ldr	r3, [r3, #20]
 8006130:	4618      	mov	r0, r3
 8006132:	f7ff fb08 	bl	8005746 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006136:	f7fe fc17 	bl	8004968 <HAL_GetTick>
 800613a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800613c:	e008      	b.n	8006150 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800613e:	f7fe fc13 	bl	8004968 <HAL_GetTick>
 8006142:	4602      	mov	r2, r0
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	1ad3      	subs	r3, r2, r3
 8006148:	2b02      	cmp	r3, #2
 800614a:	d901      	bls.n	8006150 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 800614c:	2303      	movs	r3, #3
 800614e:	e0d2      	b.n	80062f6 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8006150:	f7ff fbf3 	bl	800593a <LL_RCC_IsActiveFlag_C2HPRE>
 8006154:	4603      	mov	r3, r0
 8006156:	2b00      	cmp	r3, #0
 8006158:	d0f1      	beq.n	800613e <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006162:	2b00      	cmp	r3, #0
 8006164:	d016      	beq.n	8006194 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	699b      	ldr	r3, [r3, #24]
 800616a:	4618      	mov	r0, r3
 800616c:	f7ff fb01 	bl	8005772 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006170:	f7fe fbfa 	bl	8004968 <HAL_GetTick>
 8006174:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8006176:	e008      	b.n	800618a <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006178:	f7fe fbf6 	bl	8004968 <HAL_GetTick>
 800617c:	4602      	mov	r2, r0
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	1ad3      	subs	r3, r2, r3
 8006182:	2b02      	cmp	r3, #2
 8006184:	d901      	bls.n	800618a <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8006186:	2303      	movs	r3, #3
 8006188:	e0b5      	b.n	80062f6 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800618a:	f7ff fbe9 	bl	8005960 <LL_RCC_IsActiveFlag_SHDHPRE>
 800618e:	4603      	mov	r3, r0
 8006190:	2b00      	cmp	r3, #0
 8006192:	d0f1      	beq.n	8006178 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f003 0304 	and.w	r3, r3, #4
 800619c:	2b00      	cmp	r3, #0
 800619e:	d016      	beq.n	80061ce <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	68db      	ldr	r3, [r3, #12]
 80061a4:	4618      	mov	r0, r3
 80061a6:	f7ff fafb 	bl	80057a0 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80061aa:	f7fe fbdd 	bl	8004968 <HAL_GetTick>
 80061ae:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80061b0:	e008      	b.n	80061c4 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80061b2:	f7fe fbd9 	bl	8004968 <HAL_GetTick>
 80061b6:	4602      	mov	r2, r0
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	1ad3      	subs	r3, r2, r3
 80061bc:	2b02      	cmp	r3, #2
 80061be:	d901      	bls.n	80061c4 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80061c0:	2303      	movs	r3, #3
 80061c2:	e098      	b.n	80062f6 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80061c4:	f7ff fbdf 	bl	8005986 <LL_RCC_IsActiveFlag_PPRE1>
 80061c8:	4603      	mov	r3, r0
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d0f1      	beq.n	80061b2 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f003 0308 	and.w	r3, r3, #8
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d017      	beq.n	800620a <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	691b      	ldr	r3, [r3, #16]
 80061de:	00db      	lsls	r3, r3, #3
 80061e0:	4618      	mov	r0, r3
 80061e2:	f7ff faf1 	bl	80057c8 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80061e6:	f7fe fbbf 	bl	8004968 <HAL_GetTick>
 80061ea:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80061ec:	e008      	b.n	8006200 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80061ee:	f7fe fbbb 	bl	8004968 <HAL_GetTick>
 80061f2:	4602      	mov	r2, r0
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	1ad3      	subs	r3, r2, r3
 80061f8:	2b02      	cmp	r3, #2
 80061fa:	d901      	bls.n	8006200 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 80061fc:	2303      	movs	r3, #3
 80061fe:	e07a      	b.n	80062f6 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8006200:	f7ff fbd3 	bl	80059aa <LL_RCC_IsActiveFlag_PPRE2>
 8006204:	4603      	mov	r3, r0
 8006206:	2b00      	cmp	r3, #0
 8006208:	d0f1      	beq.n	80061ee <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f003 0301 	and.w	r3, r3, #1
 8006212:	2b00      	cmp	r3, #0
 8006214:	d043      	beq.n	800629e <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	685b      	ldr	r3, [r3, #4]
 800621a:	2b02      	cmp	r3, #2
 800621c:	d106      	bne.n	800622c <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800621e:	f7ff f891 	bl	8005344 <LL_RCC_HSE_IsReady>
 8006222:	4603      	mov	r3, r0
 8006224:	2b00      	cmp	r3, #0
 8006226:	d11e      	bne.n	8006266 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006228:	2301      	movs	r3, #1
 800622a:	e064      	b.n	80062f6 <HAL_RCC_ClockConfig+0x26a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	685b      	ldr	r3, [r3, #4]
 8006230:	2b03      	cmp	r3, #3
 8006232:	d106      	bne.n	8006242 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8006234:	f7ff fb2c 	bl	8005890 <LL_RCC_PLL_IsReady>
 8006238:	4603      	mov	r3, r0
 800623a:	2b00      	cmp	r3, #0
 800623c:	d113      	bne.n	8006266 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800623e:	2301      	movs	r3, #1
 8006240:	e059      	b.n	80062f6 <HAL_RCC_ClockConfig+0x26a>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	685b      	ldr	r3, [r3, #4]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d106      	bne.n	8006258 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800624a:	f7ff f9f9 	bl	8005640 <LL_RCC_MSI_IsReady>
 800624e:	4603      	mov	r3, r0
 8006250:	2b00      	cmp	r3, #0
 8006252:	d108      	bne.n	8006266 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006254:	2301      	movs	r3, #1
 8006256:	e04e      	b.n	80062f6 <HAL_RCC_ClockConfig+0x26a>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8006258:	f7ff f8a4 	bl	80053a4 <LL_RCC_HSI_IsReady>
 800625c:	4603      	mov	r3, r0
 800625e:	2b00      	cmp	r3, #0
 8006260:	d101      	bne.n	8006266 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006262:	2301      	movs	r3, #1
 8006264:	e047      	b.n	80062f6 <HAL_RCC_ClockConfig+0x26a>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	685b      	ldr	r3, [r3, #4]
 800626a:	4618      	mov	r0, r3
 800626c:	f7ff fa37 	bl	80056de <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006270:	f7fe fb7a 	bl	8004968 <HAL_GetTick>
 8006274:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006276:	e00a      	b.n	800628e <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006278:	f7fe fb76 	bl	8004968 <HAL_GetTick>
 800627c:	4602      	mov	r2, r0
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	1ad3      	subs	r3, r2, r3
 8006282:	f241 3288 	movw	r2, #5000	; 0x1388
 8006286:	4293      	cmp	r3, r2
 8006288:	d901      	bls.n	800628e <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800628a:	2303      	movs	r3, #3
 800628c:	e033      	b.n	80062f6 <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800628e:	f7ff fa3a 	bl	8005706 <LL_RCC_GetSysClkSource>
 8006292:	4602      	mov	r2, r0
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	685b      	ldr	r3, [r3, #4]
 8006298:	009b      	lsls	r3, r3, #2
 800629a:	429a      	cmp	r2, r3
 800629c:	d1ec      	bne.n	8006278 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800629e:	4b18      	ldr	r3, [pc, #96]	; (8006300 <HAL_RCC_ClockConfig+0x274>)
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f003 0307 	and.w	r3, r3, #7
 80062a6:	683a      	ldr	r2, [r7, #0]
 80062a8:	429a      	cmp	r2, r3
 80062aa:	d21b      	bcs.n	80062e4 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80062ac:	4b14      	ldr	r3, [pc, #80]	; (8006300 <HAL_RCC_ClockConfig+0x274>)
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f023 0207 	bic.w	r2, r3, #7
 80062b4:	4912      	ldr	r1, [pc, #72]	; (8006300 <HAL_RCC_ClockConfig+0x274>)
 80062b6:	683b      	ldr	r3, [r7, #0]
 80062b8:	4313      	orrs	r3, r2
 80062ba:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80062bc:	f7fe fb54 	bl	8004968 <HAL_GetTick>
 80062c0:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80062c2:	e008      	b.n	80062d6 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80062c4:	f7fe fb50 	bl	8004968 <HAL_GetTick>
 80062c8:	4602      	mov	r2, r0
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	1ad3      	subs	r3, r2, r3
 80062ce:	2b02      	cmp	r3, #2
 80062d0:	d901      	bls.n	80062d6 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 80062d2:	2303      	movs	r3, #3
 80062d4:	e00f      	b.n	80062f6 <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80062d6:	4b0a      	ldr	r3, [pc, #40]	; (8006300 <HAL_RCC_ClockConfig+0x274>)
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f003 0307 	and.w	r3, r3, #7
 80062de:	683a      	ldr	r2, [r7, #0]
 80062e0:	429a      	cmp	r2, r3
 80062e2:	d1ef      	bne.n	80062c4 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClockUpdate();
 80062e4:	f7fe f9fa 	bl	80046dc <SystemCoreClockUpdate>
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 80062e8:	f7fe fb4a 	bl	8004980 <HAL_GetTickPrio>
 80062ec:	4603      	mov	r3, r0
 80062ee:	4618      	mov	r0, r3
 80062f0:	f7fe faee 	bl	80048d0 <HAL_InitTick>
 80062f4:	4603      	mov	r3, r0
}
 80062f6:	4618      	mov	r0, r3
 80062f8:	3710      	adds	r7, #16
 80062fa:	46bd      	mov	sp, r7
 80062fc:	bd80      	pop	{r7, pc}
 80062fe:	bf00      	nop
 8006300:	58004000 	.word	0x58004000

08006304 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006304:	b590      	push	{r4, r7, lr}
 8006306:	b085      	sub	sp, #20
 8006308:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800630a:	f7ff f9fc 	bl	8005706 <LL_RCC_GetSysClkSource>
 800630e:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d10a      	bne.n	800632c <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8006316:	f7ff f9b8 	bl	800568a <LL_RCC_MSI_GetRange>
 800631a:	4603      	mov	r3, r0
 800631c:	091b      	lsrs	r3, r3, #4
 800631e:	f003 030f 	and.w	r3, r3, #15
 8006322:	4a2a      	ldr	r2, [pc, #168]	; (80063cc <HAL_RCC_GetSysClockFreq+0xc8>)
 8006324:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006328:	60fb      	str	r3, [r7, #12]
 800632a:	e04a      	b.n	80063c2 <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2b04      	cmp	r3, #4
 8006330:	d102      	bne.n	8006338 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006332:	4b27      	ldr	r3, [pc, #156]	; (80063d0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8006334:	60fb      	str	r3, [r7, #12]
 8006336:	e044      	b.n	80063c2 <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2b08      	cmp	r3, #8
 800633c:	d10a      	bne.n	8006354 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800633e:	f7fe ffb3 	bl	80052a8 <LL_RCC_HSE_IsEnabledDiv2>
 8006342:	4603      	mov	r3, r0
 8006344:	2b01      	cmp	r3, #1
 8006346:	d102      	bne.n	800634e <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8006348:	4b21      	ldr	r3, [pc, #132]	; (80063d0 <HAL_RCC_GetSysClockFreq+0xcc>)
 800634a:	60fb      	str	r3, [r7, #12]
 800634c:	e039      	b.n	80063c2 <HAL_RCC_GetSysClockFreq+0xbe>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800634e:	4b21      	ldr	r3, [pc, #132]	; (80063d4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8006350:	60fb      	str	r3, [r7, #12]
 8006352:	e036      	b.n	80063c2 <HAL_RCC_GetSysClockFreq+0xbe>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8006354:	f7ff fad3 	bl	80058fe <LL_RCC_PLL_GetMainSource>
 8006358:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	2b02      	cmp	r3, #2
 800635e:	d002      	beq.n	8006366 <HAL_RCC_GetSysClockFreq+0x62>
 8006360:	2b03      	cmp	r3, #3
 8006362:	d003      	beq.n	800636c <HAL_RCC_GetSysClockFreq+0x68>
 8006364:	e00d      	b.n	8006382 <HAL_RCC_GetSysClockFreq+0x7e>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8006366:	4b1a      	ldr	r3, [pc, #104]	; (80063d0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8006368:	60bb      	str	r3, [r7, #8]
        break;
 800636a:	e015      	b.n	8006398 <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800636c:	f7fe ff9c 	bl	80052a8 <LL_RCC_HSE_IsEnabledDiv2>
 8006370:	4603      	mov	r3, r0
 8006372:	2b01      	cmp	r3, #1
 8006374:	d102      	bne.n	800637c <HAL_RCC_GetSysClockFreq+0x78>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8006376:	4b16      	ldr	r3, [pc, #88]	; (80063d0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8006378:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800637a:	e00d      	b.n	8006398 <HAL_RCC_GetSysClockFreq+0x94>
          pllinputfreq = HSE_VALUE;
 800637c:	4b15      	ldr	r3, [pc, #84]	; (80063d4 <HAL_RCC_GetSysClockFreq+0xd0>)
 800637e:	60bb      	str	r3, [r7, #8]
        break;
 8006380:	e00a      	b.n	8006398 <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8006382:	f7ff f982 	bl	800568a <LL_RCC_MSI_GetRange>
 8006386:	4603      	mov	r3, r0
 8006388:	091b      	lsrs	r3, r3, #4
 800638a:	f003 030f 	and.w	r3, r3, #15
 800638e:	4a0f      	ldr	r2, [pc, #60]	; (80063cc <HAL_RCC_GetSysClockFreq+0xc8>)
 8006390:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006394:	60bb      	str	r3, [r7, #8]
        break;
 8006396:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 8006398:	f7ff fa8c 	bl	80058b4 <LL_RCC_PLL_GetN>
 800639c:	4602      	mov	r2, r0
 800639e:	68bb      	ldr	r3, [r7, #8]
 80063a0:	fb03 f402 	mul.w	r4, r3, r2
 80063a4:	f7ff fa9f 	bl	80058e6 <LL_RCC_PLL_GetDivider>
 80063a8:	4603      	mov	r3, r0
 80063aa:	091b      	lsrs	r3, r3, #4
 80063ac:	3301      	adds	r3, #1
 80063ae:	fbb4 f4f3 	udiv	r4, r4, r3
 80063b2:	f7ff fa8c 	bl	80058ce <LL_RCC_PLL_GetR>
 80063b6:	4603      	mov	r3, r0
 80063b8:	0f5b      	lsrs	r3, r3, #29
 80063ba:	3301      	adds	r3, #1
 80063bc:	fbb4 f3f3 	udiv	r3, r4, r3
 80063c0:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 80063c2:	68fb      	ldr	r3, [r7, #12]
}
 80063c4:	4618      	mov	r0, r3
 80063c6:	3714      	adds	r7, #20
 80063c8:	46bd      	mov	sp, r7
 80063ca:	bd90      	pop	{r4, r7, pc}
 80063cc:	080088f8 	.word	0x080088f8
 80063d0:	00f42400 	.word	0x00f42400
 80063d4:	01e84800 	.word	0x01e84800

080063d8 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80063d8:	b598      	push	{r3, r4, r7, lr}
 80063da:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80063dc:	f7ff ff92 	bl	8006304 <HAL_RCC_GetSysClockFreq>
 80063e0:	4604      	mov	r4, r0
 80063e2:	f7ff fa05 	bl	80057f0 <LL_RCC_GetAHBPrescaler>
 80063e6:	4603      	mov	r3, r0
 80063e8:	091b      	lsrs	r3, r3, #4
 80063ea:	f003 030f 	and.w	r3, r3, #15
 80063ee:	4a03      	ldr	r2, [pc, #12]	; (80063fc <HAL_RCC_GetHCLKFreq+0x24>)
 80063f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80063f4:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80063f8:	4618      	mov	r0, r3
 80063fa:	bd98      	pop	{r3, r4, r7, pc}
 80063fc:	08008898 	.word	0x08008898

08006400 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006400:	b598      	push	{r3, r4, r7, lr}
 8006402:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8006404:	f7ff ffe8 	bl	80063d8 <HAL_RCC_GetHCLKFreq>
 8006408:	4604      	mov	r4, r0
 800640a:	f7ff fa0b 	bl	8005824 <LL_RCC_GetAPB1Prescaler>
 800640e:	4603      	mov	r3, r0
 8006410:	0a1b      	lsrs	r3, r3, #8
 8006412:	f003 0307 	and.w	r3, r3, #7
 8006416:	4a04      	ldr	r2, [pc, #16]	; (8006428 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006418:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800641c:	f003 031f 	and.w	r3, r3, #31
 8006420:	fa24 f303 	lsr.w	r3, r4, r3
}
 8006424:	4618      	mov	r0, r3
 8006426:	bd98      	pop	{r3, r4, r7, pc}
 8006428:	080088d8 	.word	0x080088d8

0800642c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800642c:	b598      	push	{r3, r4, r7, lr}
 800642e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8006430:	f7ff ffd2 	bl	80063d8 <HAL_RCC_GetHCLKFreq>
 8006434:	4604      	mov	r4, r0
 8006436:	f7ff fa01 	bl	800583c <LL_RCC_GetAPB2Prescaler>
 800643a:	4603      	mov	r3, r0
 800643c:	0adb      	lsrs	r3, r3, #11
 800643e:	f003 0307 	and.w	r3, r3, #7
 8006442:	4a04      	ldr	r2, [pc, #16]	; (8006454 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006444:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006448:	f003 031f 	and.w	r3, r3, #31
 800644c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8006450:	4618      	mov	r0, r3
 8006452:	bd98      	pop	{r3, r4, r7, pc}
 8006454:	080088d8 	.word	0x080088d8

08006458 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8006458:	b590      	push	{r4, r7, lr}
 800645a:	b085      	sub	sp, #20
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2bb0      	cmp	r3, #176	; 0xb0
 8006464:	d903      	bls.n	800646e <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8006466:	4b15      	ldr	r3, [pc, #84]	; (80064bc <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8006468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800646a:	60fb      	str	r3, [r7, #12]
 800646c:	e007      	b.n	800647e <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	091b      	lsrs	r3, r3, #4
 8006472:	f003 030f 	and.w	r3, r3, #15
 8006476:	4a11      	ldr	r2, [pc, #68]	; (80064bc <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8006478:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800647c:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800647e:	f7ff f9c3 	bl	8005808 <LL_RCC_GetAHB4Prescaler>
 8006482:	4603      	mov	r3, r0
 8006484:	091b      	lsrs	r3, r3, #4
 8006486:	f003 030f 	and.w	r3, r3, #15
 800648a:	4a0d      	ldr	r2, [pc, #52]	; (80064c0 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 800648c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006490:	68fa      	ldr	r2, [r7, #12]
 8006492:	fbb2 f3f3 	udiv	r3, r2, r3
 8006496:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8006498:	68bb      	ldr	r3, [r7, #8]
 800649a:	4a0a      	ldr	r2, [pc, #40]	; (80064c4 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 800649c:	fba2 2303 	umull	r2, r3, r2, r3
 80064a0:	0c9c      	lsrs	r4, r3, #18
 80064a2:	f7fe fef3 	bl	800528c <HAL_PWREx_GetVoltageRange>
 80064a6:	4603      	mov	r3, r0
 80064a8:	4619      	mov	r1, r3
 80064aa:	4620      	mov	r0, r4
 80064ac:	f000 f80c 	bl	80064c8 <RCC_SetFlashLatency>
 80064b0:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 80064b2:	4618      	mov	r0, r3
 80064b4:	3714      	adds	r7, #20
 80064b6:	46bd      	mov	sp, r7
 80064b8:	bd90      	pop	{r4, r7, pc}
 80064ba:	bf00      	nop
 80064bc:	080088f8 	.word	0x080088f8
 80064c0:	08008898 	.word	0x08008898
 80064c4:	431bde83 	.word	0x431bde83

080064c8 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80064c8:	b590      	push	{r4, r7, lr}
 80064ca:	b093      	sub	sp, #76	; 0x4c
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
 80064d0:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 80064d2:	4b39      	ldr	r3, [pc, #228]	; (80065b8 <RCC_SetFlashLatency+0xf0>)
 80064d4:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80064d8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80064da:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 80064de:	4a37      	ldr	r2, [pc, #220]	; (80065bc <RCC_SetFlashLatency+0xf4>)
 80064e0:	f107 031c 	add.w	r3, r7, #28
 80064e4:	ca07      	ldmia	r2, {r0, r1, r2}
 80064e6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 80064ea:	4b35      	ldr	r3, [pc, #212]	; (80065c0 <RCC_SetFlashLatency+0xf8>)
 80064ec:	f107 040c 	add.w	r4, r7, #12
 80064f0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80064f2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80064f6:	2300      	movs	r3, #0
 80064f8:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006500:	d11c      	bne.n	800653c <RCC_SetFlashLatency+0x74>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8006502:	2300      	movs	r3, #0
 8006504:	643b      	str	r3, [r7, #64]	; 0x40
 8006506:	e015      	b.n	8006534 <RCC_SetFlashLatency+0x6c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8006508:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800650a:	009b      	lsls	r3, r3, #2
 800650c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006510:	4413      	add	r3, r2
 8006512:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8006516:	687a      	ldr	r2, [r7, #4]
 8006518:	429a      	cmp	r2, r3
 800651a:	d808      	bhi.n	800652e <RCC_SetFlashLatency+0x66>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800651c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800651e:	009b      	lsls	r3, r3, #2
 8006520:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006524:	4413      	add	r3, r2
 8006526:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800652a:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 800652c:	e022      	b.n	8006574 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800652e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006530:	3301      	adds	r3, #1
 8006532:	643b      	str	r3, [r7, #64]	; 0x40
 8006534:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006536:	2b03      	cmp	r3, #3
 8006538:	d9e6      	bls.n	8006508 <RCC_SetFlashLatency+0x40>
 800653a:	e01b      	b.n	8006574 <RCC_SetFlashLatency+0xac>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800653c:	2300      	movs	r3, #0
 800653e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006540:	e015      	b.n	800656e <RCC_SetFlashLatency+0xa6>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8006542:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006544:	009b      	lsls	r3, r3, #2
 8006546:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800654a:	4413      	add	r3, r2
 800654c:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8006550:	687a      	ldr	r2, [r7, #4]
 8006552:	429a      	cmp	r2, r3
 8006554:	d808      	bhi.n	8006568 <RCC_SetFlashLatency+0xa0>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8006556:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006558:	009b      	lsls	r3, r3, #2
 800655a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800655e:	4413      	add	r3, r2
 8006560:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8006564:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8006566:	e005      	b.n	8006574 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8006568:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800656a:	3301      	adds	r3, #1
 800656c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800656e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006570:	2b02      	cmp	r3, #2
 8006572:	d9e6      	bls.n	8006542 <RCC_SetFlashLatency+0x7a>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 8006574:	4b13      	ldr	r3, [pc, #76]	; (80065c4 <RCC_SetFlashLatency+0xfc>)
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f023 0207 	bic.w	r2, r3, #7
 800657c:	4911      	ldr	r1, [pc, #68]	; (80065c4 <RCC_SetFlashLatency+0xfc>)
 800657e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006580:	4313      	orrs	r3, r2
 8006582:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006584:	f7fe f9f0 	bl	8004968 <HAL_GetTick>
 8006588:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800658a:	e008      	b.n	800659e <RCC_SetFlashLatency+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800658c:	f7fe f9ec 	bl	8004968 <HAL_GetTick>
 8006590:	4602      	mov	r2, r0
 8006592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006594:	1ad3      	subs	r3, r2, r3
 8006596:	2b02      	cmp	r3, #2
 8006598:	d901      	bls.n	800659e <RCC_SetFlashLatency+0xd6>
    {
      return HAL_TIMEOUT;
 800659a:	2303      	movs	r3, #3
 800659c:	e007      	b.n	80065ae <RCC_SetFlashLatency+0xe6>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800659e:	4b09      	ldr	r3, [pc, #36]	; (80065c4 <RCC_SetFlashLatency+0xfc>)
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f003 0307 	and.w	r3, r3, #7
 80065a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80065a8:	429a      	cmp	r2, r3
 80065aa:	d1ef      	bne.n	800658c <RCC_SetFlashLatency+0xc4>
    }
  }
  return HAL_OK;
 80065ac:	2300      	movs	r3, #0
}
 80065ae:	4618      	mov	r0, r3
 80065b0:	374c      	adds	r7, #76	; 0x4c
 80065b2:	46bd      	mov	sp, r7
 80065b4:	bd90      	pop	{r4, r7, pc}
 80065b6:	bf00      	nop
 80065b8:	0800885c 	.word	0x0800885c
 80065bc:	0800886c 	.word	0x0800886c
 80065c0:	08008878 	.word	0x08008878
 80065c4:	58004000 	.word	0x58004000

080065c8 <LL_RCC_LSE_IsEnabled>:
{
 80065c8:	b480      	push	{r7}
 80065ca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 80065cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80065d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065d4:	f003 0301 	and.w	r3, r3, #1
 80065d8:	2b01      	cmp	r3, #1
 80065da:	d101      	bne.n	80065e0 <LL_RCC_LSE_IsEnabled+0x18>
 80065dc:	2301      	movs	r3, #1
 80065de:	e000      	b.n	80065e2 <LL_RCC_LSE_IsEnabled+0x1a>
 80065e0:	2300      	movs	r3, #0
}
 80065e2:	4618      	mov	r0, r3
 80065e4:	46bd      	mov	sp, r7
 80065e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ea:	4770      	bx	lr

080065ec <LL_RCC_LSE_IsReady>:
{
 80065ec:	b480      	push	{r7}
 80065ee:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80065f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80065f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065f8:	f003 0302 	and.w	r3, r3, #2
 80065fc:	2b02      	cmp	r3, #2
 80065fe:	d101      	bne.n	8006604 <LL_RCC_LSE_IsReady+0x18>
 8006600:	2301      	movs	r3, #1
 8006602:	e000      	b.n	8006606 <LL_RCC_LSE_IsReady+0x1a>
 8006604:	2300      	movs	r3, #0
}
 8006606:	4618      	mov	r0, r3
 8006608:	46bd      	mov	sp, r7
 800660a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660e:	4770      	bx	lr

08006610 <LL_RCC_MSI_EnablePLLMode>:
{
 8006610:	b480      	push	{r7}
 8006612:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8006614:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800661e:	f043 0304 	orr.w	r3, r3, #4
 8006622:	6013      	str	r3, [r2, #0]
}
 8006624:	bf00      	nop
 8006626:	46bd      	mov	sp, r7
 8006628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662c:	4770      	bx	lr

0800662e <LL_RCC_SetRFWKPClockSource>:
{
 800662e:	b480      	push	{r7}
 8006630:	b083      	sub	sp, #12
 8006632:	af00      	add	r7, sp, #0
 8006634:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8006636:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800663a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800663e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006642:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	4313      	orrs	r3, r2
 800664a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 800664e:	bf00      	nop
 8006650:	370c      	adds	r7, #12
 8006652:	46bd      	mov	sp, r7
 8006654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006658:	4770      	bx	lr

0800665a <LL_RCC_SetSMPSClockSource>:
{
 800665a:	b480      	push	{r7}
 800665c:	b083      	sub	sp, #12
 800665e:	af00      	add	r7, sp, #0
 8006660:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8006662:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006668:	f023 0203 	bic.w	r2, r3, #3
 800666c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	4313      	orrs	r3, r2
 8006674:	624b      	str	r3, [r1, #36]	; 0x24
}
 8006676:	bf00      	nop
 8006678:	370c      	adds	r7, #12
 800667a:	46bd      	mov	sp, r7
 800667c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006680:	4770      	bx	lr

08006682 <LL_RCC_SetSMPSPrescaler>:
{
 8006682:	b480      	push	{r7}
 8006684:	b083      	sub	sp, #12
 8006686:	af00      	add	r7, sp, #0
 8006688:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 800668a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800668e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006690:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006694:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	4313      	orrs	r3, r2
 800669c:	624b      	str	r3, [r1, #36]	; 0x24
}
 800669e:	bf00      	nop
 80066a0:	370c      	adds	r7, #12
 80066a2:	46bd      	mov	sp, r7
 80066a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a8:	4770      	bx	lr

080066aa <LL_RCC_SetUSARTClockSource>:
{
 80066aa:	b480      	push	{r7}
 80066ac:	b083      	sub	sp, #12
 80066ae:	af00      	add	r7, sp, #0
 80066b0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 80066b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80066b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066ba:	f023 0203 	bic.w	r2, r3, #3
 80066be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	4313      	orrs	r3, r2
 80066c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80066ca:	bf00      	nop
 80066cc:	370c      	adds	r7, #12
 80066ce:	46bd      	mov	sp, r7
 80066d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d4:	4770      	bx	lr

080066d6 <LL_RCC_SetLPUARTClockSource>:
{
 80066d6:	b480      	push	{r7}
 80066d8:	b083      	sub	sp, #12
 80066da:	af00      	add	r7, sp, #0
 80066dc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80066de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80066e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066e6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80066ea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	4313      	orrs	r3, r2
 80066f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80066f6:	bf00      	nop
 80066f8:	370c      	adds	r7, #12
 80066fa:	46bd      	mov	sp, r7
 80066fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006700:	4770      	bx	lr

08006702 <LL_RCC_SetI2CClockSource>:
{
 8006702:	b480      	push	{r7}
 8006704:	b083      	sub	sp, #12
 8006706:	af00      	add	r7, sp, #0
 8006708:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800670a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800670e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	091b      	lsrs	r3, r3, #4
 8006716:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800671a:	43db      	mvns	r3, r3
 800671c:	401a      	ands	r2, r3
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	011b      	lsls	r3, r3, #4
 8006722:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8006726:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800672a:	4313      	orrs	r3, r2
 800672c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006730:	bf00      	nop
 8006732:	370c      	adds	r7, #12
 8006734:	46bd      	mov	sp, r7
 8006736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673a:	4770      	bx	lr

0800673c <LL_RCC_SetLPTIMClockSource>:
{
 800673c:	b480      	push	{r7}
 800673e:	b083      	sub	sp, #12
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8006744:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006748:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	0c1b      	lsrs	r3, r3, #16
 8006750:	041b      	lsls	r3, r3, #16
 8006752:	43db      	mvns	r3, r3
 8006754:	401a      	ands	r2, r3
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	041b      	lsls	r3, r3, #16
 800675a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800675e:	4313      	orrs	r3, r2
 8006760:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006764:	bf00      	nop
 8006766:	370c      	adds	r7, #12
 8006768:	46bd      	mov	sp, r7
 800676a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676e:	4770      	bx	lr

08006770 <LL_RCC_SetSAIClockSource>:
{
 8006770:	b480      	push	{r7}
 8006772:	b083      	sub	sp, #12
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8006778:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800677c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006780:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006784:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	4313      	orrs	r3, r2
 800678c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006790:	bf00      	nop
 8006792:	370c      	adds	r7, #12
 8006794:	46bd      	mov	sp, r7
 8006796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679a:	4770      	bx	lr

0800679c <LL_RCC_SetRNGClockSource>:
{
 800679c:	b480      	push	{r7}
 800679e:	b083      	sub	sp, #12
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80067a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80067a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067ac:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80067b0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	4313      	orrs	r3, r2
 80067b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80067bc:	bf00      	nop
 80067be:	370c      	adds	r7, #12
 80067c0:	46bd      	mov	sp, r7
 80067c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c6:	4770      	bx	lr

080067c8 <LL_RCC_SetCLK48ClockSource>:
{
 80067c8:	b480      	push	{r7}
 80067ca:	b083      	sub	sp, #12
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 80067d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80067d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067d8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80067dc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	4313      	orrs	r3, r2
 80067e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80067e8:	bf00      	nop
 80067ea:	370c      	adds	r7, #12
 80067ec:	46bd      	mov	sp, r7
 80067ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f2:	4770      	bx	lr

080067f4 <LL_RCC_SetUSBClockSource>:
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b082      	sub	sp, #8
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 80067fc:	6878      	ldr	r0, [r7, #4]
 80067fe:	f7ff ffe3 	bl	80067c8 <LL_RCC_SetCLK48ClockSource>
}
 8006802:	bf00      	nop
 8006804:	3708      	adds	r7, #8
 8006806:	46bd      	mov	sp, r7
 8006808:	bd80      	pop	{r7, pc}

0800680a <LL_RCC_SetADCClockSource>:
{
 800680a:	b480      	push	{r7}
 800680c:	b083      	sub	sp, #12
 800680e:	af00      	add	r7, sp, #0
 8006810:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8006812:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006816:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800681a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800681e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	4313      	orrs	r3, r2
 8006826:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800682a:	bf00      	nop
 800682c:	370c      	adds	r7, #12
 800682e:	46bd      	mov	sp, r7
 8006830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006834:	4770      	bx	lr

08006836 <LL_RCC_SetRTCClockSource>:
{
 8006836:	b480      	push	{r7}
 8006838:	b083      	sub	sp, #12
 800683a:	af00      	add	r7, sp, #0
 800683c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800683e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006842:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006846:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800684a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	4313      	orrs	r3, r2
 8006852:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8006856:	bf00      	nop
 8006858:	370c      	adds	r7, #12
 800685a:	46bd      	mov	sp, r7
 800685c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006860:	4770      	bx	lr

08006862 <LL_RCC_GetRTCClockSource>:
{
 8006862:	b480      	push	{r7}
 8006864:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8006866:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800686a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800686e:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8006872:	4618      	mov	r0, r3
 8006874:	46bd      	mov	sp, r7
 8006876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687a:	4770      	bx	lr

0800687c <LL_RCC_ForceBackupDomainReset>:
{
 800687c:	b480      	push	{r7}
 800687e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006880:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006884:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006888:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800688c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006890:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006894:	bf00      	nop
 8006896:	46bd      	mov	sp, r7
 8006898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689c:	4770      	bx	lr

0800689e <LL_RCC_ReleaseBackupDomainReset>:
{
 800689e:	b480      	push	{r7}
 80068a0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80068a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80068a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068aa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80068ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80068b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80068b6:	bf00      	nop
 80068b8:	46bd      	mov	sp, r7
 80068ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068be:	4770      	bx	lr

080068c0 <LL_RCC_PLLSAI1_Enable>:
{
 80068c0:	b480      	push	{r7}
 80068c2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80068c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80068ce:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80068d2:	6013      	str	r3, [r2, #0]
}
 80068d4:	bf00      	nop
 80068d6:	46bd      	mov	sp, r7
 80068d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068dc:	4770      	bx	lr

080068de <LL_RCC_PLLSAI1_Disable>:
{
 80068de:	b480      	push	{r7}
 80068e0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80068e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80068ec:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80068f0:	6013      	str	r3, [r2, #0]
}
 80068f2:	bf00      	nop
 80068f4:	46bd      	mov	sp, r7
 80068f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fa:	4770      	bx	lr

080068fc <LL_RCC_PLLSAI1_IsReady>:
{
 80068fc:	b480      	push	{r7}
 80068fe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8006900:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800690a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800690e:	d101      	bne.n	8006914 <LL_RCC_PLLSAI1_IsReady+0x18>
 8006910:	2301      	movs	r3, #1
 8006912:	e000      	b.n	8006916 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8006914:	2300      	movs	r3, #0
}
 8006916:	4618      	mov	r0, r3
 8006918:	46bd      	mov	sp, r7
 800691a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691e:	4770      	bx	lr

08006920 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b088      	sub	sp, #32
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8006928:	2300      	movs	r3, #0
 800692a:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800692c:	2300      	movs	r3, #0
 800692e:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006938:	2b00      	cmp	r3, #0
 800693a:	d033      	beq.n	80069a4 <HAL_RCCEx_PeriphCLKConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006940:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006944:	d00c      	beq.n	8006960 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8006946:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800694a:	d802      	bhi.n	8006952 <HAL_RCCEx_PeriphCLKConfig+0x32>
 800694c:	2b00      	cmp	r3, #0
 800694e:	d010      	beq.n	8006972 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8006950:	e017      	b.n	8006982 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8006952:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006956:	d017      	beq.n	8006988 <HAL_RCCEx_PeriphCLKConfig+0x68>
 8006958:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800695c:	d016      	beq.n	800698c <HAL_RCCEx_PeriphCLKConfig+0x6c>
 800695e:	e010      	b.n	8006982 <HAL_RCCEx_PeriphCLKConfig+0x62>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8006960:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006964:	68db      	ldr	r3, [r3, #12]
 8006966:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800696a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800696e:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8006970:	e00d      	b.n	800698e <HAL_RCCEx_PeriphCLKConfig+0x6e>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	3304      	adds	r3, #4
 8006976:	4618      	mov	r0, r3
 8006978:	f000 f94d 	bl	8006c16 <RCCEx_PLLSAI1_ConfigNP>
 800697c:	4603      	mov	r3, r0
 800697e:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8006980:	e005      	b.n	800698e <HAL_RCCEx_PeriphCLKConfig+0x6e>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8006982:	2301      	movs	r3, #1
 8006984:	77fb      	strb	r3, [r7, #31]
        break;
 8006986:	e002      	b.n	800698e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 8006988:	bf00      	nop
 800698a:	e000      	b.n	800698e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 800698c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800698e:	7ffb      	ldrb	r3, [r7, #31]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d105      	bne.n	80069a0 <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006998:	4618      	mov	r0, r3
 800699a:	f7ff fee9 	bl	8006770 <LL_RCC_SetSAIClockSource>
 800699e:	e001      	b.n	80069a4 <HAL_RCCEx_PeriphCLKConfig+0x84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069a0:	7ffb      	ldrb	r3, [r7, #31]
 80069a2:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d046      	beq.n	8006a3e <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 80069b0:	f7ff ff57 	bl	8006862 <LL_RCC_GetRTCClockSource>
 80069b4:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069ba:	69ba      	ldr	r2, [r7, #24]
 80069bc:	429a      	cmp	r2, r3
 80069be:	d03c      	beq.n	8006a3a <HAL_RCCEx_PeriphCLKConfig+0x11a>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80069c0:	f7fe fc54 	bl	800526c <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 80069c4:	69bb      	ldr	r3, [r7, #24]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d105      	bne.n	80069d6 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069ce:	4618      	mov	r0, r3
 80069d0:	f7ff ff31 	bl	8006836 <LL_RCC_SetRTCClockSource>
 80069d4:	e02e      	b.n	8006a34 <HAL_RCCEx_PeriphCLKConfig+0x114>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 80069d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80069da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069de:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 80069e0:	f7ff ff4c 	bl	800687c <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 80069e4:	f7ff ff5b 	bl	800689e <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 80069e8:	697b      	ldr	r3, [r7, #20]
 80069ea:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069f2:	4313      	orrs	r3, r2
 80069f4:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 80069f6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80069fa:	697b      	ldr	r3, [r7, #20]
 80069fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8006a00:	f7ff fde2 	bl	80065c8 <LL_RCC_LSE_IsEnabled>
 8006a04:	4603      	mov	r3, r0
 8006a06:	2b01      	cmp	r3, #1
 8006a08:	d114      	bne.n	8006a34 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006a0a:	f7fd ffad 	bl	8004968 <HAL_GetTick>
 8006a0e:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8006a10:	e00b      	b.n	8006a2a <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006a12:	f7fd ffa9 	bl	8004968 <HAL_GetTick>
 8006a16:	4602      	mov	r2, r0
 8006a18:	693b      	ldr	r3, [r7, #16]
 8006a1a:	1ad3      	subs	r3, r2, r3
 8006a1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a20:	4293      	cmp	r3, r2
 8006a22:	d902      	bls.n	8006a2a <HAL_RCCEx_PeriphCLKConfig+0x10a>
            {
              ret = HAL_TIMEOUT;
 8006a24:	2303      	movs	r3, #3
 8006a26:	77fb      	strb	r3, [r7, #31]
              break;
 8006a28:	e004      	b.n	8006a34 <HAL_RCCEx_PeriphCLKConfig+0x114>
          while (LL_RCC_LSE_IsReady() != 1U)
 8006a2a:	f7ff fddf 	bl	80065ec <LL_RCC_LSE_IsReady>
 8006a2e:	4603      	mov	r3, r0
 8006a30:	2b01      	cmp	r3, #1
 8006a32:	d1ee      	bne.n	8006a12 <HAL_RCCEx_PeriphCLKConfig+0xf2>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8006a34:	7ffb      	ldrb	r3, [r7, #31]
 8006a36:	77bb      	strb	r3, [r7, #30]
 8006a38:	e001      	b.n	8006a3e <HAL_RCCEx_PeriphCLKConfig+0x11e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a3a:	7ffb      	ldrb	r3, [r7, #31]
 8006a3c:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f003 0301 	and.w	r3, r3, #1
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d004      	beq.n	8006a54 <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	699b      	ldr	r3, [r3, #24]
 8006a4e:	4618      	mov	r0, r3
 8006a50:	f7ff fe2b 	bl	80066aa <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f003 0302 	and.w	r3, r3, #2
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d004      	beq.n	8006a6a <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	69db      	ldr	r3, [r3, #28]
 8006a64:	4618      	mov	r0, r3
 8006a66:	f7ff fe36 	bl	80066d6 <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f003 0310 	and.w	r3, r3, #16
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d004      	beq.n	8006a80 <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	f7ff fe5e 	bl	800673c <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f003 0320 	and.w	r3, r3, #32
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d004      	beq.n	8006a96 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a90:	4618      	mov	r0, r3
 8006a92:	f7ff fe53 	bl	800673c <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f003 0304 	and.w	r3, r3, #4
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d004      	beq.n	8006aac <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	6a1b      	ldr	r3, [r3, #32]
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	f7ff fe2b 	bl	8006702 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	f003 0308 	and.w	r3, r3, #8
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d004      	beq.n	8006ac2 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006abc:	4618      	mov	r0, r3
 8006abe:	f7ff fe20 	bl	8006702 <LL_RCC_SetI2CClockSource>
  }
#endif

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d022      	beq.n	8006b14 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	f7ff fe8e 	bl	80067f4 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006adc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006ae0:	d107      	bne.n	8006af2 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8006ae2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ae6:	68db      	ldr	r3, [r3, #12]
 8006ae8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006aec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006af0:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006af6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006afa:	d10b      	bne.n	8006b14 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	3304      	adds	r3, #4
 8006b00:	4618      	mov	r0, r3
 8006b02:	f000 f8e3 	bl	8006ccc <RCCEx_PLLSAI1_ConfigNQ>
 8006b06:	4603      	mov	r3, r0
 8006b08:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8006b0a:	7ffb      	ldrb	r3, [r7, #31]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d001      	beq.n	8006b14 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
      {
        /* set overall return value */
        status = ret;
 8006b10:	7ffb      	ldrb	r3, [r7, #31]
 8006b12:	77bb      	strb	r3, [r7, #30]
    }
#endif
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d02b      	beq.n	8006b78 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b28:	d008      	beq.n	8006b3c <HAL_RCCEx_PeriphCLKConfig+0x21c>
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b2e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006b32:	d003      	beq.n	8006b3c <HAL_RCCEx_PeriphCLKConfig+0x21c>
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d105      	bne.n	8006b48 <HAL_RCCEx_PeriphCLKConfig+0x228>
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b40:	4618      	mov	r0, r3
 8006b42:	f7ff fe2b 	bl	800679c <LL_RCC_SetRNGClockSource>
 8006b46:	e00a      	b.n	8006b5e <HAL_RCCEx_PeriphCLKConfig+0x23e>
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006b50:	60fb      	str	r3, [r7, #12]
 8006b52:	2000      	movs	r0, #0
 8006b54:	f7ff fe22 	bl	800679c <LL_RCC_SetRNGClockSource>
 8006b58:	68f8      	ldr	r0, [r7, #12]
 8006b5a:	f7ff fe35 	bl	80067c8 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b62:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8006b66:	d107      	bne.n	8006b78 <HAL_RCCEx_PeriphCLKConfig+0x258>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8006b68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b6c:	68db      	ldr	r3, [r3, #12]
 8006b6e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006b72:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006b76:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d022      	beq.n	8006bca <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b88:	4618      	mov	r0, r3
 8006b8a:	f7ff fe3e 	bl	800680a <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b92:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b96:	d107      	bne.n	8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006b98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b9c:	68db      	ldr	r3, [r3, #12]
 8006b9e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006ba2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ba6:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006bb0:	d10b      	bne.n	8006bca <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	3304      	adds	r3, #4
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	f000 f8e3 	bl	8006d82 <RCCEx_PLLSAI1_ConfigNR>
 8006bbc:	4603      	mov	r3, r0
 8006bbe:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8006bc0:	7ffb      	ldrb	r3, [r7, #31]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d001      	beq.n	8006bca <HAL_RCCEx_PeriphCLKConfig+0x2aa>
      {
        /* set overall return value */
        status = ret;
 8006bc6:	7ffb      	ldrb	r3, [r7, #31]
 8006bc8:	77bb      	strb	r3, [r7, #30]
    }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d004      	beq.n	8006be0 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bda:	4618      	mov	r0, r3
 8006bdc:	f7ff fd27 	bl	800662e <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d009      	beq.n	8006c00 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	f7ff fd46 	bl	8006682 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	f7ff fd2d 	bl	800665a <LL_RCC_SetSMPSClockSource>
  }
#endif

  return status;
 8006c00:	7fbb      	ldrb	r3, [r7, #30]
}
 8006c02:	4618      	mov	r0, r3
 8006c04:	3720      	adds	r7, #32
 8006c06:	46bd      	mov	sp, r7
 8006c08:	bd80      	pop	{r7, pc}

08006c0a <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8006c0a:	b580      	push	{r7, lr}
 8006c0c:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 8006c0e:	f7ff fcff 	bl	8006610 <LL_RCC_MSI_EnablePLLMode>
}
 8006c12:	bf00      	nop
 8006c14:	bd80      	pop	{r7, pc}

08006c16 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8006c16:	b580      	push	{r7, lr}
 8006c18:	b084      	sub	sp, #16
 8006c1a:	af00      	add	r7, sp, #0
 8006c1c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006c1e:	2300      	movs	r3, #0
 8006c20:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8006c22:	f7ff fe5c 	bl	80068de <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006c26:	f7fd fe9f 	bl	8004968 <HAL_GetTick>
 8006c2a:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006c2c:	e009      	b.n	8006c42 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006c2e:	f7fd fe9b 	bl	8004968 <HAL_GetTick>
 8006c32:	4602      	mov	r2, r0
 8006c34:	68bb      	ldr	r3, [r7, #8]
 8006c36:	1ad3      	subs	r3, r2, r3
 8006c38:	2b02      	cmp	r3, #2
 8006c3a:	d902      	bls.n	8006c42 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8006c3c:	2303      	movs	r3, #3
 8006c3e:	73fb      	strb	r3, [r7, #15]
      break;
 8006c40:	e004      	b.n	8006c4c <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006c42:	f7ff fe5b 	bl	80068fc <LL_RCC_PLLSAI1_IsReady>
 8006c46:	4603      	mov	r3, r0
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d1f0      	bne.n	8006c2e <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8006c4c:	7bfb      	ldrb	r3, [r7, #15]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d137      	bne.n	8006cc2 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8006c52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c56:	691b      	ldr	r3, [r3, #16]
 8006c58:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	021b      	lsls	r3, r3, #8
 8006c62:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006c66:	4313      	orrs	r3, r2
 8006c68:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8006c6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c6e:	691b      	ldr	r3, [r3, #16]
 8006c70:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	685b      	ldr	r3, [r3, #4]
 8006c78:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006c7c:	4313      	orrs	r3, r2
 8006c7e:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8006c80:	f7ff fe1e 	bl	80068c0 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006c84:	f7fd fe70 	bl	8004968 <HAL_GetTick>
 8006c88:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006c8a:	e009      	b.n	8006ca0 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006c8c:	f7fd fe6c 	bl	8004968 <HAL_GetTick>
 8006c90:	4602      	mov	r2, r0
 8006c92:	68bb      	ldr	r3, [r7, #8]
 8006c94:	1ad3      	subs	r3, r2, r3
 8006c96:	2b02      	cmp	r3, #2
 8006c98:	d902      	bls.n	8006ca0 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8006c9a:	2303      	movs	r3, #3
 8006c9c:	73fb      	strb	r3, [r7, #15]
        break;
 8006c9e:	e004      	b.n	8006caa <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006ca0:	f7ff fe2c 	bl	80068fc <LL_RCC_PLLSAI1_IsReady>
 8006ca4:	4603      	mov	r3, r0
 8006ca6:	2b01      	cmp	r3, #1
 8006ca8:	d1f0      	bne.n	8006c8c <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8006caa:	7bfb      	ldrb	r3, [r7, #15]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d108      	bne.n	8006cc2 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8006cb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006cb4:	691a      	ldr	r2, [r3, #16]
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	691b      	ldr	r3, [r3, #16]
 8006cba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006cbe:	4313      	orrs	r3, r2
 8006cc0:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8006cc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	3710      	adds	r7, #16
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	bd80      	pop	{r7, pc}

08006ccc <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b084      	sub	sp, #16
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8006cd8:	f7ff fe01 	bl	80068de <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006cdc:	f7fd fe44 	bl	8004968 <HAL_GetTick>
 8006ce0:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006ce2:	e009      	b.n	8006cf8 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006ce4:	f7fd fe40 	bl	8004968 <HAL_GetTick>
 8006ce8:	4602      	mov	r2, r0
 8006cea:	68bb      	ldr	r3, [r7, #8]
 8006cec:	1ad3      	subs	r3, r2, r3
 8006cee:	2b02      	cmp	r3, #2
 8006cf0:	d902      	bls.n	8006cf8 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8006cf2:	2303      	movs	r3, #3
 8006cf4:	73fb      	strb	r3, [r7, #15]
      break;
 8006cf6:	e004      	b.n	8006d02 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006cf8:	f7ff fe00 	bl	80068fc <LL_RCC_PLLSAI1_IsReady>
 8006cfc:	4603      	mov	r3, r0
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d1f0      	bne.n	8006ce4 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8006d02:	7bfb      	ldrb	r3, [r7, #15]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d137      	bne.n	8006d78 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8006d08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d0c:	691b      	ldr	r3, [r3, #16]
 8006d0e:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	021b      	lsls	r3, r3, #8
 8006d18:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006d1c:	4313      	orrs	r3, r2
 8006d1e:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8006d20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d24:	691b      	ldr	r3, [r3, #16]
 8006d26:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	689b      	ldr	r3, [r3, #8]
 8006d2e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006d32:	4313      	orrs	r3, r2
 8006d34:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8006d36:	f7ff fdc3 	bl	80068c0 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006d3a:	f7fd fe15 	bl	8004968 <HAL_GetTick>
 8006d3e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006d40:	e009      	b.n	8006d56 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006d42:	f7fd fe11 	bl	8004968 <HAL_GetTick>
 8006d46:	4602      	mov	r2, r0
 8006d48:	68bb      	ldr	r3, [r7, #8]
 8006d4a:	1ad3      	subs	r3, r2, r3
 8006d4c:	2b02      	cmp	r3, #2
 8006d4e:	d902      	bls.n	8006d56 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8006d50:	2303      	movs	r3, #3
 8006d52:	73fb      	strb	r3, [r7, #15]
        break;
 8006d54:	e004      	b.n	8006d60 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006d56:	f7ff fdd1 	bl	80068fc <LL_RCC_PLLSAI1_IsReady>
 8006d5a:	4603      	mov	r3, r0
 8006d5c:	2b01      	cmp	r3, #1
 8006d5e:	d1f0      	bne.n	8006d42 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8006d60:	7bfb      	ldrb	r3, [r7, #15]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d108      	bne.n	8006d78 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8006d66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d6a:	691a      	ldr	r2, [r3, #16]
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	691b      	ldr	r3, [r3, #16]
 8006d70:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006d74:	4313      	orrs	r3, r2
 8006d76:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8006d78:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	3710      	adds	r7, #16
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	bd80      	pop	{r7, pc}

08006d82 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8006d82:	b580      	push	{r7, lr}
 8006d84:	b084      	sub	sp, #16
 8006d86:	af00      	add	r7, sp, #0
 8006d88:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8006d8e:	f7ff fda6 	bl	80068de <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006d92:	f7fd fde9 	bl	8004968 <HAL_GetTick>
 8006d96:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006d98:	e009      	b.n	8006dae <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006d9a:	f7fd fde5 	bl	8004968 <HAL_GetTick>
 8006d9e:	4602      	mov	r2, r0
 8006da0:	68bb      	ldr	r3, [r7, #8]
 8006da2:	1ad3      	subs	r3, r2, r3
 8006da4:	2b02      	cmp	r3, #2
 8006da6:	d902      	bls.n	8006dae <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8006da8:	2303      	movs	r3, #3
 8006daa:	73fb      	strb	r3, [r7, #15]
      break;
 8006dac:	e004      	b.n	8006db8 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006dae:	f7ff fda5 	bl	80068fc <LL_RCC_PLLSAI1_IsReady>
 8006db2:	4603      	mov	r3, r0
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d1f0      	bne.n	8006d9a <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8006db8:	7bfb      	ldrb	r3, [r7, #15]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d137      	bne.n	8006e2e <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8006dbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006dc2:	691b      	ldr	r3, [r3, #16]
 8006dc4:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	021b      	lsls	r3, r3, #8
 8006dce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006dd2:	4313      	orrs	r3, r2
 8006dd4:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8006dd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006dda:	691b      	ldr	r3, [r3, #16]
 8006ddc:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	68db      	ldr	r3, [r3, #12]
 8006de4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006de8:	4313      	orrs	r3, r2
 8006dea:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8006dec:	f7ff fd68 	bl	80068c0 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006df0:	f7fd fdba 	bl	8004968 <HAL_GetTick>
 8006df4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006df6:	e009      	b.n	8006e0c <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006df8:	f7fd fdb6 	bl	8004968 <HAL_GetTick>
 8006dfc:	4602      	mov	r2, r0
 8006dfe:	68bb      	ldr	r3, [r7, #8]
 8006e00:	1ad3      	subs	r3, r2, r3
 8006e02:	2b02      	cmp	r3, #2
 8006e04:	d902      	bls.n	8006e0c <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8006e06:	2303      	movs	r3, #3
 8006e08:	73fb      	strb	r3, [r7, #15]
        break;
 8006e0a:	e004      	b.n	8006e16 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006e0c:	f7ff fd76 	bl	80068fc <LL_RCC_PLLSAI1_IsReady>
 8006e10:	4603      	mov	r3, r0
 8006e12:	2b01      	cmp	r3, #1
 8006e14:	d1f0      	bne.n	8006df8 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8006e16:	7bfb      	ldrb	r3, [r7, #15]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d108      	bne.n	8006e2e <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8006e1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e20:	691a      	ldr	r2, [r3, #16]
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	691b      	ldr	r3, [r3, #16]
 8006e26:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006e2a:	4313      	orrs	r3, r2
 8006e2c:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8006e2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e30:	4618      	mov	r0, r3
 8006e32:	3710      	adds	r7, #16
 8006e34:	46bd      	mov	sp, r7
 8006e36:	bd80      	pop	{r7, pc}

08006e38 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b082      	sub	sp, #8
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d101      	bne.n	8006e4a <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8006e46:	2301      	movs	r3, #1
 8006e48:	e027      	b.n	8006e9a <HAL_RNG_Init+0x62>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	7a5b      	ldrb	r3, [r3, #9]
 8006e4e:	b2db      	uxtb	r3, r3
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d105      	bne.n	8006e60 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2200      	movs	r2, #0
 8006e58:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8006e5a:	6878      	ldr	r0, [r7, #4]
 8006e5c:	f7fd fb34 	bl	80044c8 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2202      	movs	r2, #2
 8006e64:	725a      	strb	r2, [r3, #9]

  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f023 0120 	bic.w	r1, r3, #32
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	685a      	ldr	r2, [r3, #4]
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	430a      	orrs	r2, r1
 8006e7a:	601a      	str	r2, [r3, #0]

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	681a      	ldr	r2, [r3, #0]
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	f042 0204 	orr.w	r2, r2, #4
 8006e8a:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2201      	movs	r2, #1
 8006e90:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	2200      	movs	r2, #0
 8006e96:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 8006e98:	2300      	movs	r3, #0
}
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	3708      	adds	r7, #8
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	bd80      	pop	{r7, pc}

08006ea2 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006ea2:	b580      	push	{r7, lr}
 8006ea4:	b082      	sub	sp, #8
 8006ea6:	af00      	add	r7, sp, #0
 8006ea8:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d101      	bne.n	8006eb4 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8006eb0:	2301      	movs	r3, #1
 8006eb2:	e090      	b.n	8006fd6 <HAL_RTC_Init+0x134>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006eba:	b2db      	uxtb	r3, r3
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d106      	bne.n	8006ece <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2200      	movs	r2, #0
 8006ec4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8006ec8:	6878      	ldr	r0, [r7, #4]
 8006eca:	f7fd fb11 	bl	80044f0 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	2202      	movs	r2, #2
 8006ed2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	22ca      	movs	r2, #202	; 0xca
 8006edc:	625a      	str	r2, [r3, #36]	; 0x24
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	2253      	movs	r2, #83	; 0x53
 8006ee4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8006ee6:	6878      	ldr	r0, [r7, #4]
 8006ee8:	f000 f89f 	bl	800702a <RTC_EnterInitMode>
 8006eec:	4603      	mov	r3, r0
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d009      	beq.n	8006f06 <HAL_RTC_Init+0x64>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	22ff      	movs	r2, #255	; 0xff
 8006ef8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	2204      	movs	r2, #4
 8006efe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_ERROR;
 8006f02:	2301      	movs	r3, #1
 8006f04:	e067      	b.n	8006fd6 <HAL_RTC_Init+0x134>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	689b      	ldr	r3, [r3, #8]
 8006f0c:	687a      	ldr	r2, [r7, #4]
 8006f0e:	6812      	ldr	r2, [r2, #0]
 8006f10:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006f14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f18:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	6899      	ldr	r1, [r3, #8]
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	685a      	ldr	r2, [r3, #4]
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	691b      	ldr	r3, [r3, #16]
 8006f28:	431a      	orrs	r2, r3
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	699b      	ldr	r3, [r3, #24]
 8006f2e:	431a      	orrs	r2, r3
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	430a      	orrs	r2, r1
 8006f36:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	687a      	ldr	r2, [r7, #4]
 8006f3e:	68d2      	ldr	r2, [r2, #12]
 8006f40:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	6919      	ldr	r1, [r3, #16]
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	689b      	ldr	r3, [r3, #8]
 8006f4c:	041a      	lsls	r2, r3, #16
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	430a      	orrs	r2, r1
 8006f54:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	68da      	ldr	r2, [r3, #12]
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006f64:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	f022 0203 	bic.w	r2, r2, #3
 8006f74:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	69da      	ldr	r2, [r3, #28]
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	695b      	ldr	r3, [r3, #20]
 8006f84:	431a      	orrs	r2, r3
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	430a      	orrs	r2, r1
 8006f8c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	689b      	ldr	r3, [r3, #8]
 8006f94:	f003 0320 	and.w	r3, r3, #32
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d113      	bne.n	8006fc4 <HAL_RTC_Init+0x122>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006f9c:	6878      	ldr	r0, [r7, #4]
 8006f9e:	f000 f81e 	bl	8006fde <HAL_RTC_WaitForSynchro>
 8006fa2:	4603      	mov	r3, r0
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d00d      	beq.n	8006fc4 <HAL_RTC_Init+0x122>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	22ff      	movs	r2, #255	; 0xff
 8006fae:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2204      	movs	r2, #4
 8006fb4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2200      	movs	r2, #0
 8006fbc:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8006fc0:	2301      	movs	r3, #1
 8006fc2:	e008      	b.n	8006fd6 <HAL_RTC_Init+0x134>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	22ff      	movs	r2, #255	; 0xff
 8006fca:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2201      	movs	r2, #1
 8006fd0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_OK;
 8006fd4:	2300      	movs	r3, #0
  }
}
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	3708      	adds	r7, #8
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	bd80      	pop	{r7, pc}

08006fde <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8006fde:	b580      	push	{r7, lr}
 8006fe0:	b084      	sub	sp, #16
 8006fe2:	af00      	add	r7, sp, #0
 8006fe4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	68da      	ldr	r2, [r3, #12]
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006ff4:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8006ff6:	f7fd fcb7 	bl	8004968 <HAL_GetTick>
 8006ffa:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006ffc:	e009      	b.n	8007012 <HAL_RTC_WaitForSynchro+0x34>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8006ffe:	f7fd fcb3 	bl	8004968 <HAL_GetTick>
 8007002:	4602      	mov	r2, r0
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	1ad3      	subs	r3, r2, r3
 8007008:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800700c:	d901      	bls.n	8007012 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800700e:	2303      	movs	r3, #3
 8007010:	e007      	b.n	8007022 <HAL_RTC_WaitForSynchro+0x44>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	68db      	ldr	r3, [r3, #12]
 8007018:	f003 0320 	and.w	r3, r3, #32
 800701c:	2b00      	cmp	r3, #0
 800701e:	d0ee      	beq.n	8006ffe <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8007020:	2300      	movs	r3, #0
}
 8007022:	4618      	mov	r0, r3
 8007024:	3710      	adds	r7, #16
 8007026:	46bd      	mov	sp, r7
 8007028:	bd80      	pop	{r7, pc}

0800702a <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800702a:	b580      	push	{r7, lr}
 800702c:	b084      	sub	sp, #16
 800702e:	af00      	add	r7, sp, #0
 8007030:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	68db      	ldr	r3, [r3, #12]
 8007038:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800703c:	2b00      	cmp	r3, #0
 800703e:	d119      	bne.n	8007074 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007048:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800704a:	f7fd fc8d 	bl	8004968 <HAL_GetTick>
 800704e:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8007050:	e009      	b.n	8007066 <RTC_EnterInitMode+0x3c>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8007052:	f7fd fc89 	bl	8004968 <HAL_GetTick>
 8007056:	4602      	mov	r2, r0
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	1ad3      	subs	r3, r2, r3
 800705c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007060:	d901      	bls.n	8007066 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8007062:	2303      	movs	r3, #3
 8007064:	e007      	b.n	8007076 <RTC_EnterInitMode+0x4c>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	68db      	ldr	r3, [r3, #12]
 800706c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007070:	2b00      	cmp	r3, #0
 8007072:	d0ee      	beq.n	8007052 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8007074:	2300      	movs	r3, #0
}
 8007076:	4618      	mov	r0, r3
 8007078:	3710      	adds	r7, #16
 800707a:	46bd      	mov	sp, r7
 800707c:	bd80      	pop	{r7, pc}

0800707e <LL_RCC_GetUSARTClockSource>:
{
 800707e:	b480      	push	{r7}
 8007080:	b083      	sub	sp, #12
 8007082:	af00      	add	r7, sp, #0
 8007084:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8007086:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800708a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	4013      	ands	r3, r2
}
 8007092:	4618      	mov	r0, r3
 8007094:	370c      	adds	r7, #12
 8007096:	46bd      	mov	sp, r7
 8007098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709c:	4770      	bx	lr

0800709e <LL_RCC_GetLPUARTClockSource>:
{
 800709e:	b480      	push	{r7}
 80070a0:	b083      	sub	sp, #12
 80070a2:	af00      	add	r7, sp, #0
 80070a4:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80070a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80070aa:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	4013      	ands	r3, r2
}
 80070b2:	4618      	mov	r0, r3
 80070b4:	370c      	adds	r7, #12
 80070b6:	46bd      	mov	sp, r7
 80070b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070bc:	4770      	bx	lr

080070be <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80070be:	b580      	push	{r7, lr}
 80070c0:	b082      	sub	sp, #8
 80070c2:	af00      	add	r7, sp, #0
 80070c4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d101      	bne.n	80070d0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80070cc:	2301      	movs	r3, #1
 80070ce:	e042      	b.n	8007156 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d106      	bne.n	80070e8 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	2200      	movs	r2, #0
 80070de:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80070e2:	6878      	ldr	r0, [r7, #4]
 80070e4:	f7fd fa16 	bl	8004514 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2224      	movs	r2, #36	; 0x24
 80070ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	681a      	ldr	r2, [r3, #0]
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f022 0201 	bic.w	r2, r2, #1
 80070fe:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007100:	6878      	ldr	r0, [r7, #4]
 8007102:	f000 f82d 	bl	8007160 <UART_SetConfig>
 8007106:	4603      	mov	r3, r0
 8007108:	2b01      	cmp	r3, #1
 800710a:	d101      	bne.n	8007110 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800710c:	2301      	movs	r3, #1
 800710e:	e022      	b.n	8007156 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007114:	2b00      	cmp	r3, #0
 8007116:	d002      	beq.n	800711e <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007118:	6878      	ldr	r0, [r7, #4]
 800711a:	f001 f885 	bl	8008228 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	685a      	ldr	r2, [r3, #4]
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800712c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	689a      	ldr	r2, [r3, #8]
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800713c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	681a      	ldr	r2, [r3, #0]
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	f042 0201 	orr.w	r2, r2, #1
 800714c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800714e:	6878      	ldr	r0, [r7, #4]
 8007150:	f001 f90c 	bl	800836c <UART_CheckIdleState>
 8007154:	4603      	mov	r3, r0
}
 8007156:	4618      	mov	r0, r3
 8007158:	3708      	adds	r7, #8
 800715a:	46bd      	mov	sp, r7
 800715c:	bd80      	pop	{r7, pc}
	...

08007160 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007160:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8007164:	b08a      	sub	sp, #40	; 0x28
 8007166:	af00      	add	r7, sp, #0
 8007168:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800716a:	2300      	movs	r3, #0
 800716c:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 800716e:	2300      	movs	r3, #0
 8007170:	76fb      	strb	r3, [r7, #27]
#if defined(LPUART1)
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8007172:	2300      	movs	r3, #0
 8007174:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	689a      	ldr	r2, [r3, #8]
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	691b      	ldr	r3, [r3, #16]
 800717e:	431a      	orrs	r2, r3
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	695b      	ldr	r3, [r3, #20]
 8007184:	431a      	orrs	r2, r3
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	69db      	ldr	r3, [r3, #28]
 800718a:	4313      	orrs	r3, r2
 800718c:	627b      	str	r3, [r7, #36]	; 0x24
  tmpreg |= (uint32_t)huart->FifoMode;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007192:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007194:	4313      	orrs	r3, r2
 8007196:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	681a      	ldr	r2, [r3, #0]
 800719e:	4ba4      	ldr	r3, [pc, #656]	; (8007430 <UART_SetConfig+0x2d0>)
 80071a0:	4013      	ands	r3, r2
 80071a2:	687a      	ldr	r2, [r7, #4]
 80071a4:	6812      	ldr	r2, [r2, #0]
 80071a6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80071a8:	430b      	orrs	r3, r1
 80071aa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	685b      	ldr	r3, [r3, #4]
 80071b2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	68da      	ldr	r2, [r3, #12]
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	430a      	orrs	r2, r1
 80071c0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	699b      	ldr	r3, [r3, #24]
 80071c6:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	4a99      	ldr	r2, [pc, #612]	; (8007434 <UART_SetConfig+0x2d4>)
 80071ce:	4293      	cmp	r3, r2
 80071d0:	d004      	beq.n	80071dc <UART_SetConfig+0x7c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	6a1b      	ldr	r3, [r3, #32]
 80071d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071d8:	4313      	orrs	r3, r2
 80071da:	627b      	str	r3, [r7, #36]	; 0x24
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	689b      	ldr	r3, [r3, #8]
 80071e2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80071e6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80071ea:	687a      	ldr	r2, [r7, #4]
 80071ec:	6812      	ldr	r2, [r2, #0]
 80071ee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80071f0:	430b      	orrs	r3, r1
 80071f2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071fa:	f023 010f 	bic.w	r1, r3, #15
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	430a      	orrs	r2, r1
 8007208:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	4a8a      	ldr	r2, [pc, #552]	; (8007438 <UART_SetConfig+0x2d8>)
 8007210:	4293      	cmp	r3, r2
 8007212:	d126      	bne.n	8007262 <UART_SetConfig+0x102>
 8007214:	2003      	movs	r0, #3
 8007216:	f7ff ff32 	bl	800707e <LL_RCC_GetUSARTClockSource>
 800721a:	4603      	mov	r3, r0
 800721c:	2b03      	cmp	r3, #3
 800721e:	d81b      	bhi.n	8007258 <UART_SetConfig+0xf8>
 8007220:	a201      	add	r2, pc, #4	; (adr r2, 8007228 <UART_SetConfig+0xc8>)
 8007222:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007226:	bf00      	nop
 8007228:	08007239 	.word	0x08007239
 800722c:	08007249 	.word	0x08007249
 8007230:	08007241 	.word	0x08007241
 8007234:	08007251 	.word	0x08007251
 8007238:	2301      	movs	r3, #1
 800723a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800723e:	e042      	b.n	80072c6 <UART_SetConfig+0x166>
 8007240:	2302      	movs	r3, #2
 8007242:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007246:	e03e      	b.n	80072c6 <UART_SetConfig+0x166>
 8007248:	2304      	movs	r3, #4
 800724a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800724e:	e03a      	b.n	80072c6 <UART_SetConfig+0x166>
 8007250:	2308      	movs	r3, #8
 8007252:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007256:	e036      	b.n	80072c6 <UART_SetConfig+0x166>
 8007258:	2310      	movs	r3, #16
 800725a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800725e:	bf00      	nop
 8007260:	e031      	b.n	80072c6 <UART_SetConfig+0x166>
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	4a73      	ldr	r2, [pc, #460]	; (8007434 <UART_SetConfig+0x2d4>)
 8007268:	4293      	cmp	r3, r2
 800726a:	d129      	bne.n	80072c0 <UART_SetConfig+0x160>
 800726c:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8007270:	f7ff ff15 	bl	800709e <LL_RCC_GetLPUARTClockSource>
 8007274:	4603      	mov	r3, r0
 8007276:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800727a:	d014      	beq.n	80072a6 <UART_SetConfig+0x146>
 800727c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007280:	d802      	bhi.n	8007288 <UART_SetConfig+0x128>
 8007282:	2b00      	cmp	r3, #0
 8007284:	d007      	beq.n	8007296 <UART_SetConfig+0x136>
 8007286:	e016      	b.n	80072b6 <UART_SetConfig+0x156>
 8007288:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800728c:	d007      	beq.n	800729e <UART_SetConfig+0x13e>
 800728e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007292:	d00c      	beq.n	80072ae <UART_SetConfig+0x14e>
 8007294:	e00f      	b.n	80072b6 <UART_SetConfig+0x156>
 8007296:	2300      	movs	r3, #0
 8007298:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800729c:	e013      	b.n	80072c6 <UART_SetConfig+0x166>
 800729e:	2302      	movs	r3, #2
 80072a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80072a4:	e00f      	b.n	80072c6 <UART_SetConfig+0x166>
 80072a6:	2304      	movs	r3, #4
 80072a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80072ac:	e00b      	b.n	80072c6 <UART_SetConfig+0x166>
 80072ae:	2308      	movs	r3, #8
 80072b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80072b4:	e007      	b.n	80072c6 <UART_SetConfig+0x166>
 80072b6:	2310      	movs	r3, #16
 80072b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80072bc:	bf00      	nop
 80072be:	e002      	b.n	80072c6 <UART_SetConfig+0x166>
 80072c0:	2310      	movs	r3, #16
 80072c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	4a5a      	ldr	r2, [pc, #360]	; (8007434 <UART_SetConfig+0x2d4>)
 80072cc:	4293      	cmp	r3, r2
 80072ce:	f040 8428 	bne.w	8007b22 <UART_SetConfig+0x9c2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80072d2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80072d6:	2b08      	cmp	r3, #8
 80072d8:	f200 8171 	bhi.w	80075be <UART_SetConfig+0x45e>
 80072dc:	a201      	add	r2, pc, #4	; (adr r2, 80072e4 <UART_SetConfig+0x184>)
 80072de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072e2:	bf00      	nop
 80072e4:	08007309 	.word	0x08007309
 80072e8:	080075bf 	.word	0x080075bf
 80072ec:	080073ab 	.word	0x080073ab
 80072f0:	080075bf 	.word	0x080075bf
 80072f4:	0800746f 	.word	0x0800746f
 80072f8:	080075bf 	.word	0x080075bf
 80072fc:	080075bf 	.word	0x080075bf
 8007300:	080075bf 	.word	0x080075bf
 8007304:	08007511 	.word	0x08007511
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8007308:	f7ff f87a 	bl	8006400 <HAL_RCC_GetPCLK1Freq>
 800730c:	4602      	mov	r2, r0
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007312:	2b00      	cmp	r3, #0
 8007314:	d044      	beq.n	80073a0 <UART_SetConfig+0x240>
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800731a:	2b01      	cmp	r3, #1
 800731c:	d03e      	beq.n	800739c <UART_SetConfig+0x23c>
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007322:	2b02      	cmp	r3, #2
 8007324:	d038      	beq.n	8007398 <UART_SetConfig+0x238>
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800732a:	2b03      	cmp	r3, #3
 800732c:	d032      	beq.n	8007394 <UART_SetConfig+0x234>
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007332:	2b04      	cmp	r3, #4
 8007334:	d02c      	beq.n	8007390 <UART_SetConfig+0x230>
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800733a:	2b05      	cmp	r3, #5
 800733c:	d026      	beq.n	800738c <UART_SetConfig+0x22c>
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007342:	2b06      	cmp	r3, #6
 8007344:	d020      	beq.n	8007388 <UART_SetConfig+0x228>
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800734a:	2b07      	cmp	r3, #7
 800734c:	d01a      	beq.n	8007384 <UART_SetConfig+0x224>
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007352:	2b08      	cmp	r3, #8
 8007354:	d014      	beq.n	8007380 <UART_SetConfig+0x220>
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800735a:	2b09      	cmp	r3, #9
 800735c:	d00e      	beq.n	800737c <UART_SetConfig+0x21c>
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007362:	2b0a      	cmp	r3, #10
 8007364:	d008      	beq.n	8007378 <UART_SetConfig+0x218>
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800736a:	2b0b      	cmp	r3, #11
 800736c:	d102      	bne.n	8007374 <UART_SetConfig+0x214>
 800736e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007372:	e016      	b.n	80073a2 <UART_SetConfig+0x242>
 8007374:	2301      	movs	r3, #1
 8007376:	e014      	b.n	80073a2 <UART_SetConfig+0x242>
 8007378:	2380      	movs	r3, #128	; 0x80
 800737a:	e012      	b.n	80073a2 <UART_SetConfig+0x242>
 800737c:	2340      	movs	r3, #64	; 0x40
 800737e:	e010      	b.n	80073a2 <UART_SetConfig+0x242>
 8007380:	2320      	movs	r3, #32
 8007382:	e00e      	b.n	80073a2 <UART_SetConfig+0x242>
 8007384:	2310      	movs	r3, #16
 8007386:	e00c      	b.n	80073a2 <UART_SetConfig+0x242>
 8007388:	230c      	movs	r3, #12
 800738a:	e00a      	b.n	80073a2 <UART_SetConfig+0x242>
 800738c:	230a      	movs	r3, #10
 800738e:	e008      	b.n	80073a2 <UART_SetConfig+0x242>
 8007390:	2308      	movs	r3, #8
 8007392:	e006      	b.n	80073a2 <UART_SetConfig+0x242>
 8007394:	2306      	movs	r3, #6
 8007396:	e004      	b.n	80073a2 <UART_SetConfig+0x242>
 8007398:	2304      	movs	r3, #4
 800739a:	e002      	b.n	80073a2 <UART_SetConfig+0x242>
 800739c:	2302      	movs	r3, #2
 800739e:	e000      	b.n	80073a2 <UART_SetConfig+0x242>
 80073a0:	2301      	movs	r3, #1
 80073a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80073a6:	617b      	str	r3, [r7, #20]
        break;
 80073a8:	e10c      	b.n	80075c4 <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_HSI:
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d05a      	beq.n	8007468 <UART_SetConfig+0x308>
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073b6:	2b01      	cmp	r3, #1
 80073b8:	d054      	beq.n	8007464 <UART_SetConfig+0x304>
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073be:	2b02      	cmp	r3, #2
 80073c0:	d04e      	beq.n	8007460 <UART_SetConfig+0x300>
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073c6:	2b03      	cmp	r3, #3
 80073c8:	d048      	beq.n	800745c <UART_SetConfig+0x2fc>
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073ce:	2b04      	cmp	r3, #4
 80073d0:	d02c      	beq.n	800742c <UART_SetConfig+0x2cc>
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073d6:	2b05      	cmp	r3, #5
 80073d8:	d026      	beq.n	8007428 <UART_SetConfig+0x2c8>
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073de:	2b06      	cmp	r3, #6
 80073e0:	d020      	beq.n	8007424 <UART_SetConfig+0x2c4>
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073e6:	2b07      	cmp	r3, #7
 80073e8:	d01a      	beq.n	8007420 <UART_SetConfig+0x2c0>
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073ee:	2b08      	cmp	r3, #8
 80073f0:	d014      	beq.n	800741c <UART_SetConfig+0x2bc>
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073f6:	2b09      	cmp	r3, #9
 80073f8:	d00e      	beq.n	8007418 <UART_SetConfig+0x2b8>
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073fe:	2b0a      	cmp	r3, #10
 8007400:	d008      	beq.n	8007414 <UART_SetConfig+0x2b4>
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007406:	2b0b      	cmp	r3, #11
 8007408:	d102      	bne.n	8007410 <UART_SetConfig+0x2b0>
 800740a:	f24f 4324 	movw	r3, #62500	; 0xf424
 800740e:	e02c      	b.n	800746a <UART_SetConfig+0x30a>
 8007410:	4b0a      	ldr	r3, [pc, #40]	; (800743c <UART_SetConfig+0x2dc>)
 8007412:	e02a      	b.n	800746a <UART_SetConfig+0x30a>
 8007414:	4b0a      	ldr	r3, [pc, #40]	; (8007440 <UART_SetConfig+0x2e0>)
 8007416:	e028      	b.n	800746a <UART_SetConfig+0x30a>
 8007418:	4b0a      	ldr	r3, [pc, #40]	; (8007444 <UART_SetConfig+0x2e4>)
 800741a:	e026      	b.n	800746a <UART_SetConfig+0x30a>
 800741c:	4b0a      	ldr	r3, [pc, #40]	; (8007448 <UART_SetConfig+0x2e8>)
 800741e:	e024      	b.n	800746a <UART_SetConfig+0x30a>
 8007420:	4b0a      	ldr	r3, [pc, #40]	; (800744c <UART_SetConfig+0x2ec>)
 8007422:	e022      	b.n	800746a <UART_SetConfig+0x30a>
 8007424:	4b0a      	ldr	r3, [pc, #40]	; (8007450 <UART_SetConfig+0x2f0>)
 8007426:	e020      	b.n	800746a <UART_SetConfig+0x30a>
 8007428:	4b0a      	ldr	r3, [pc, #40]	; (8007454 <UART_SetConfig+0x2f4>)
 800742a:	e01e      	b.n	800746a <UART_SetConfig+0x30a>
 800742c:	4b0a      	ldr	r3, [pc, #40]	; (8007458 <UART_SetConfig+0x2f8>)
 800742e:	e01c      	b.n	800746a <UART_SetConfig+0x30a>
 8007430:	cfff69f3 	.word	0xcfff69f3
 8007434:	40008000 	.word	0x40008000
 8007438:	40013800 	.word	0x40013800
 800743c:	00f42400 	.word	0x00f42400
 8007440:	0001e848 	.word	0x0001e848
 8007444:	0003d090 	.word	0x0003d090
 8007448:	0007a120 	.word	0x0007a120
 800744c:	000f4240 	.word	0x000f4240
 8007450:	00145855 	.word	0x00145855
 8007454:	00186a00 	.word	0x00186a00
 8007458:	001e8480 	.word	0x001e8480
 800745c:	4ba6      	ldr	r3, [pc, #664]	; (80076f8 <UART_SetConfig+0x598>)
 800745e:	e004      	b.n	800746a <UART_SetConfig+0x30a>
 8007460:	4ba6      	ldr	r3, [pc, #664]	; (80076fc <UART_SetConfig+0x59c>)
 8007462:	e002      	b.n	800746a <UART_SetConfig+0x30a>
 8007464:	4ba6      	ldr	r3, [pc, #664]	; (8007700 <UART_SetConfig+0x5a0>)
 8007466:	e000      	b.n	800746a <UART_SetConfig+0x30a>
 8007468:	4ba6      	ldr	r3, [pc, #664]	; (8007704 <UART_SetConfig+0x5a4>)
 800746a:	617b      	str	r3, [r7, #20]
        break;
 800746c:	e0aa      	b.n	80075c4 <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800746e:	f7fe ff49 	bl	8006304 <HAL_RCC_GetSysClockFreq>
 8007472:	4602      	mov	r2, r0
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007478:	2b00      	cmp	r3, #0
 800747a:	d044      	beq.n	8007506 <UART_SetConfig+0x3a6>
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007480:	2b01      	cmp	r3, #1
 8007482:	d03e      	beq.n	8007502 <UART_SetConfig+0x3a2>
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007488:	2b02      	cmp	r3, #2
 800748a:	d038      	beq.n	80074fe <UART_SetConfig+0x39e>
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007490:	2b03      	cmp	r3, #3
 8007492:	d032      	beq.n	80074fa <UART_SetConfig+0x39a>
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007498:	2b04      	cmp	r3, #4
 800749a:	d02c      	beq.n	80074f6 <UART_SetConfig+0x396>
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074a0:	2b05      	cmp	r3, #5
 80074a2:	d026      	beq.n	80074f2 <UART_SetConfig+0x392>
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074a8:	2b06      	cmp	r3, #6
 80074aa:	d020      	beq.n	80074ee <UART_SetConfig+0x38e>
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074b0:	2b07      	cmp	r3, #7
 80074b2:	d01a      	beq.n	80074ea <UART_SetConfig+0x38a>
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074b8:	2b08      	cmp	r3, #8
 80074ba:	d014      	beq.n	80074e6 <UART_SetConfig+0x386>
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074c0:	2b09      	cmp	r3, #9
 80074c2:	d00e      	beq.n	80074e2 <UART_SetConfig+0x382>
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074c8:	2b0a      	cmp	r3, #10
 80074ca:	d008      	beq.n	80074de <UART_SetConfig+0x37e>
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074d0:	2b0b      	cmp	r3, #11
 80074d2:	d102      	bne.n	80074da <UART_SetConfig+0x37a>
 80074d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80074d8:	e016      	b.n	8007508 <UART_SetConfig+0x3a8>
 80074da:	2301      	movs	r3, #1
 80074dc:	e014      	b.n	8007508 <UART_SetConfig+0x3a8>
 80074de:	2380      	movs	r3, #128	; 0x80
 80074e0:	e012      	b.n	8007508 <UART_SetConfig+0x3a8>
 80074e2:	2340      	movs	r3, #64	; 0x40
 80074e4:	e010      	b.n	8007508 <UART_SetConfig+0x3a8>
 80074e6:	2320      	movs	r3, #32
 80074e8:	e00e      	b.n	8007508 <UART_SetConfig+0x3a8>
 80074ea:	2310      	movs	r3, #16
 80074ec:	e00c      	b.n	8007508 <UART_SetConfig+0x3a8>
 80074ee:	230c      	movs	r3, #12
 80074f0:	e00a      	b.n	8007508 <UART_SetConfig+0x3a8>
 80074f2:	230a      	movs	r3, #10
 80074f4:	e008      	b.n	8007508 <UART_SetConfig+0x3a8>
 80074f6:	2308      	movs	r3, #8
 80074f8:	e006      	b.n	8007508 <UART_SetConfig+0x3a8>
 80074fa:	2306      	movs	r3, #6
 80074fc:	e004      	b.n	8007508 <UART_SetConfig+0x3a8>
 80074fe:	2304      	movs	r3, #4
 8007500:	e002      	b.n	8007508 <UART_SetConfig+0x3a8>
 8007502:	2302      	movs	r3, #2
 8007504:	e000      	b.n	8007508 <UART_SetConfig+0x3a8>
 8007506:	2301      	movs	r3, #1
 8007508:	fbb2 f3f3 	udiv	r3, r2, r3
 800750c:	617b      	str	r3, [r7, #20]
        break;
 800750e:	e059      	b.n	80075c4 <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007514:	2b00      	cmp	r3, #0
 8007516:	d04e      	beq.n	80075b6 <UART_SetConfig+0x456>
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800751c:	2b01      	cmp	r3, #1
 800751e:	d047      	beq.n	80075b0 <UART_SetConfig+0x450>
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007524:	2b02      	cmp	r3, #2
 8007526:	d040      	beq.n	80075aa <UART_SetConfig+0x44a>
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800752c:	2b03      	cmp	r3, #3
 800752e:	d039      	beq.n	80075a4 <UART_SetConfig+0x444>
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007534:	2b04      	cmp	r3, #4
 8007536:	d032      	beq.n	800759e <UART_SetConfig+0x43e>
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800753c:	2b05      	cmp	r3, #5
 800753e:	d02b      	beq.n	8007598 <UART_SetConfig+0x438>
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007544:	2b06      	cmp	r3, #6
 8007546:	d024      	beq.n	8007592 <UART_SetConfig+0x432>
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800754c:	2b07      	cmp	r3, #7
 800754e:	d01d      	beq.n	800758c <UART_SetConfig+0x42c>
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007554:	2b08      	cmp	r3, #8
 8007556:	d016      	beq.n	8007586 <UART_SetConfig+0x426>
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800755c:	2b09      	cmp	r3, #9
 800755e:	d00f      	beq.n	8007580 <UART_SetConfig+0x420>
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007564:	2b0a      	cmp	r3, #10
 8007566:	d008      	beq.n	800757a <UART_SetConfig+0x41a>
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800756c:	2b0b      	cmp	r3, #11
 800756e:	d101      	bne.n	8007574 <UART_SetConfig+0x414>
 8007570:	2380      	movs	r3, #128	; 0x80
 8007572:	e022      	b.n	80075ba <UART_SetConfig+0x45a>
 8007574:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007578:	e01f      	b.n	80075ba <UART_SetConfig+0x45a>
 800757a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800757e:	e01c      	b.n	80075ba <UART_SetConfig+0x45a>
 8007580:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007584:	e019      	b.n	80075ba <UART_SetConfig+0x45a>
 8007586:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800758a:	e016      	b.n	80075ba <UART_SetConfig+0x45a>
 800758c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007590:	e013      	b.n	80075ba <UART_SetConfig+0x45a>
 8007592:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8007596:	e010      	b.n	80075ba <UART_SetConfig+0x45a>
 8007598:	f640 43cc 	movw	r3, #3276	; 0xccc
 800759c:	e00d      	b.n	80075ba <UART_SetConfig+0x45a>
 800759e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80075a2:	e00a      	b.n	80075ba <UART_SetConfig+0x45a>
 80075a4:	f241 5355 	movw	r3, #5461	; 0x1555
 80075a8:	e007      	b.n	80075ba <UART_SetConfig+0x45a>
 80075aa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80075ae:	e004      	b.n	80075ba <UART_SetConfig+0x45a>
 80075b0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80075b4:	e001      	b.n	80075ba <UART_SetConfig+0x45a>
 80075b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80075ba:	617b      	str	r3, [r7, #20]
        break;
 80075bc:	e002      	b.n	80075c4 <UART_SetConfig+0x464>
      default:
        ret = HAL_ERROR;
 80075be:	2301      	movs	r3, #1
 80075c0:	76fb      	strb	r3, [r7, #27]
        break;
 80075c2:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 80075c4:	697b      	ldr	r3, [r7, #20]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	f000 8604 	beq.w	80081d4 <UART_SetConfig+0x1074>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	685a      	ldr	r2, [r3, #4]
 80075d0:	4613      	mov	r3, r2
 80075d2:	005b      	lsls	r3, r3, #1
 80075d4:	4413      	add	r3, r2
 80075d6:	697a      	ldr	r2, [r7, #20]
 80075d8:	429a      	cmp	r2, r3
 80075da:	d305      	bcc.n	80075e8 <UART_SetConfig+0x488>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	685b      	ldr	r3, [r3, #4]
 80075e0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80075e2:	697a      	ldr	r2, [r7, #20]
 80075e4:	429a      	cmp	r2, r3
 80075e6:	d903      	bls.n	80075f0 <UART_SetConfig+0x490>
      {
        ret = HAL_ERROR;
 80075e8:	2301      	movs	r3, #1
 80075ea:	76fb      	strb	r3, [r7, #27]
 80075ec:	f000 bdf2 	b.w	80081d4 <UART_SetConfig+0x1074>
      }
      else
      {
        switch (clocksource)
 80075f0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80075f4:	2b08      	cmp	r3, #8
 80075f6:	f200 8281 	bhi.w	8007afc <UART_SetConfig+0x99c>
 80075fa:	a201      	add	r2, pc, #4	; (adr r2, 8007600 <UART_SetConfig+0x4a0>)
 80075fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007600:	08007625 	.word	0x08007625
 8007604:	08007afd 	.word	0x08007afd
 8007608:	08007775 	.word	0x08007775
 800760c:	08007afd 	.word	0x08007afd
 8007610:	0800786b 	.word	0x0800786b
 8007614:	08007afd 	.word	0x08007afd
 8007618:	08007afd 	.word	0x08007afd
 800761c:	08007afd 	.word	0x08007afd
 8007620:	080079a9 	.word	0x080079a9
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 8007624:	f7fe feec 	bl	8006400 <HAL_RCC_GetPCLK1Freq>
 8007628:	6138      	str	r0, [r7, #16]
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800762a:	693b      	ldr	r3, [r7, #16]
 800762c:	4618      	mov	r0, r3
 800762e:	f04f 0100 	mov.w	r1, #0
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007636:	2b00      	cmp	r3, #0
 8007638:	d070      	beq.n	800771c <UART_SetConfig+0x5bc>
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800763e:	2b01      	cmp	r3, #1
 8007640:	d067      	beq.n	8007712 <UART_SetConfig+0x5b2>
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007646:	2b02      	cmp	r3, #2
 8007648:	d05e      	beq.n	8007708 <UART_SetConfig+0x5a8>
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800764e:	2b03      	cmp	r3, #3
 8007650:	d04c      	beq.n	80076ec <UART_SetConfig+0x58c>
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007656:	2b04      	cmp	r3, #4
 8007658:	d043      	beq.n	80076e2 <UART_SetConfig+0x582>
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800765e:	2b05      	cmp	r3, #5
 8007660:	d03a      	beq.n	80076d8 <UART_SetConfig+0x578>
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007666:	2b06      	cmp	r3, #6
 8007668:	d031      	beq.n	80076ce <UART_SetConfig+0x56e>
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800766e:	2b07      	cmp	r3, #7
 8007670:	d028      	beq.n	80076c4 <UART_SetConfig+0x564>
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007676:	2b08      	cmp	r3, #8
 8007678:	d01f      	beq.n	80076ba <UART_SetConfig+0x55a>
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800767e:	2b09      	cmp	r3, #9
 8007680:	d016      	beq.n	80076b0 <UART_SetConfig+0x550>
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007686:	2b0a      	cmp	r3, #10
 8007688:	d00d      	beq.n	80076a6 <UART_SetConfig+0x546>
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800768e:	2b0b      	cmp	r3, #11
 8007690:	d104      	bne.n	800769c <UART_SetConfig+0x53c>
 8007692:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007696:	f04f 0400 	mov.w	r4, #0
 800769a:	e043      	b.n	8007724 <UART_SetConfig+0x5c4>
 800769c:	f04f 0301 	mov.w	r3, #1
 80076a0:	f04f 0400 	mov.w	r4, #0
 80076a4:	e03e      	b.n	8007724 <UART_SetConfig+0x5c4>
 80076a6:	f04f 0380 	mov.w	r3, #128	; 0x80
 80076aa:	f04f 0400 	mov.w	r4, #0
 80076ae:	e039      	b.n	8007724 <UART_SetConfig+0x5c4>
 80076b0:	f04f 0340 	mov.w	r3, #64	; 0x40
 80076b4:	f04f 0400 	mov.w	r4, #0
 80076b8:	e034      	b.n	8007724 <UART_SetConfig+0x5c4>
 80076ba:	f04f 0320 	mov.w	r3, #32
 80076be:	f04f 0400 	mov.w	r4, #0
 80076c2:	e02f      	b.n	8007724 <UART_SetConfig+0x5c4>
 80076c4:	f04f 0310 	mov.w	r3, #16
 80076c8:	f04f 0400 	mov.w	r4, #0
 80076cc:	e02a      	b.n	8007724 <UART_SetConfig+0x5c4>
 80076ce:	f04f 030c 	mov.w	r3, #12
 80076d2:	f04f 0400 	mov.w	r4, #0
 80076d6:	e025      	b.n	8007724 <UART_SetConfig+0x5c4>
 80076d8:	f04f 030a 	mov.w	r3, #10
 80076dc:	f04f 0400 	mov.w	r4, #0
 80076e0:	e020      	b.n	8007724 <UART_SetConfig+0x5c4>
 80076e2:	f04f 0308 	mov.w	r3, #8
 80076e6:	f04f 0400 	mov.w	r4, #0
 80076ea:	e01b      	b.n	8007724 <UART_SetConfig+0x5c4>
 80076ec:	f04f 0306 	mov.w	r3, #6
 80076f0:	f04f 0400 	mov.w	r4, #0
 80076f4:	e016      	b.n	8007724 <UART_SetConfig+0x5c4>
 80076f6:	bf00      	nop
 80076f8:	0028b0aa 	.word	0x0028b0aa
 80076fc:	003d0900 	.word	0x003d0900
 8007700:	007a1200 	.word	0x007a1200
 8007704:	00f42400 	.word	0x00f42400
 8007708:	f04f 0304 	mov.w	r3, #4
 800770c:	f04f 0400 	mov.w	r4, #0
 8007710:	e008      	b.n	8007724 <UART_SetConfig+0x5c4>
 8007712:	f04f 0302 	mov.w	r3, #2
 8007716:	f04f 0400 	mov.w	r4, #0
 800771a:	e003      	b.n	8007724 <UART_SetConfig+0x5c4>
 800771c:	f04f 0301 	mov.w	r3, #1
 8007720:	f04f 0400 	mov.w	r4, #0
 8007724:	461a      	mov	r2, r3
 8007726:	4623      	mov	r3, r4
 8007728:	f7fc fa66 	bl	8003bf8 <__aeabi_uldivmod>
 800772c:	4603      	mov	r3, r0
 800772e:	460c      	mov	r4, r1
 8007730:	4619      	mov	r1, r3
 8007732:	4622      	mov	r2, r4
 8007734:	f04f 0300 	mov.w	r3, #0
 8007738:	f04f 0400 	mov.w	r4, #0
 800773c:	0214      	lsls	r4, r2, #8
 800773e:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8007742:	020b      	lsls	r3, r1, #8
 8007744:	687a      	ldr	r2, [r7, #4]
 8007746:	6852      	ldr	r2, [r2, #4]
 8007748:	0852      	lsrs	r2, r2, #1
 800774a:	4611      	mov	r1, r2
 800774c:	f04f 0200 	mov.w	r2, #0
 8007750:	eb13 0b01 	adds.w	fp, r3, r1
 8007754:	eb44 0c02 	adc.w	ip, r4, r2
 8007758:	4658      	mov	r0, fp
 800775a:	4661      	mov	r1, ip
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	685b      	ldr	r3, [r3, #4]
 8007760:	f04f 0400 	mov.w	r4, #0
 8007764:	461a      	mov	r2, r3
 8007766:	4623      	mov	r3, r4
 8007768:	f7fc fa46 	bl	8003bf8 <__aeabi_uldivmod>
 800776c:	4603      	mov	r3, r0
 800776e:	460c      	mov	r4, r1
 8007770:	61fb      	str	r3, [r7, #28]
            break;
 8007772:	e1c6      	b.n	8007b02 <UART_SetConfig+0x9a2>
          case UART_CLOCKSOURCE_HSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007778:	2b00      	cmp	r3, #0
 800777a:	d05b      	beq.n	8007834 <UART_SetConfig+0x6d4>
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007780:	2b01      	cmp	r3, #1
 8007782:	d053      	beq.n	800782c <UART_SetConfig+0x6cc>
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007788:	2b02      	cmp	r3, #2
 800778a:	d04b      	beq.n	8007824 <UART_SetConfig+0x6c4>
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007790:	2b03      	cmp	r3, #3
 8007792:	d043      	beq.n	800781c <UART_SetConfig+0x6bc>
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007798:	2b04      	cmp	r3, #4
 800779a:	d03b      	beq.n	8007814 <UART_SetConfig+0x6b4>
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077a0:	2b05      	cmp	r3, #5
 80077a2:	d033      	beq.n	800780c <UART_SetConfig+0x6ac>
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077a8:	2b06      	cmp	r3, #6
 80077aa:	d02b      	beq.n	8007804 <UART_SetConfig+0x6a4>
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077b0:	2b07      	cmp	r3, #7
 80077b2:	d023      	beq.n	80077fc <UART_SetConfig+0x69c>
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077b8:	2b08      	cmp	r3, #8
 80077ba:	d01b      	beq.n	80077f4 <UART_SetConfig+0x694>
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077c0:	2b09      	cmp	r3, #9
 80077c2:	d013      	beq.n	80077ec <UART_SetConfig+0x68c>
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077c8:	2b0a      	cmp	r3, #10
 80077ca:	d00b      	beq.n	80077e4 <UART_SetConfig+0x684>
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077d0:	2b0b      	cmp	r3, #11
 80077d2:	d103      	bne.n	80077dc <UART_SetConfig+0x67c>
 80077d4:	4bae      	ldr	r3, [pc, #696]	; (8007a90 <UART_SetConfig+0x930>)
 80077d6:	f04f 0400 	mov.w	r4, #0
 80077da:	e02e      	b.n	800783a <UART_SetConfig+0x6da>
 80077dc:	4bad      	ldr	r3, [pc, #692]	; (8007a94 <UART_SetConfig+0x934>)
 80077de:	f04f 0400 	mov.w	r4, #0
 80077e2:	e02a      	b.n	800783a <UART_SetConfig+0x6da>
 80077e4:	4bac      	ldr	r3, [pc, #688]	; (8007a98 <UART_SetConfig+0x938>)
 80077e6:	f04f 0400 	mov.w	r4, #0
 80077ea:	e026      	b.n	800783a <UART_SetConfig+0x6da>
 80077ec:	4bab      	ldr	r3, [pc, #684]	; (8007a9c <UART_SetConfig+0x93c>)
 80077ee:	f04f 0400 	mov.w	r4, #0
 80077f2:	e022      	b.n	800783a <UART_SetConfig+0x6da>
 80077f4:	4baa      	ldr	r3, [pc, #680]	; (8007aa0 <UART_SetConfig+0x940>)
 80077f6:	f04f 0400 	mov.w	r4, #0
 80077fa:	e01e      	b.n	800783a <UART_SetConfig+0x6da>
 80077fc:	4ba9      	ldr	r3, [pc, #676]	; (8007aa4 <UART_SetConfig+0x944>)
 80077fe:	f04f 0400 	mov.w	r4, #0
 8007802:	e01a      	b.n	800783a <UART_SetConfig+0x6da>
 8007804:	a49e      	add	r4, pc, #632	; (adr r4, 8007a80 <UART_SetConfig+0x920>)
 8007806:	e9d4 3400 	ldrd	r3, r4, [r4]
 800780a:	e016      	b.n	800783a <UART_SetConfig+0x6da>
 800780c:	4ba6      	ldr	r3, [pc, #664]	; (8007aa8 <UART_SetConfig+0x948>)
 800780e:	f04f 0400 	mov.w	r4, #0
 8007812:	e012      	b.n	800783a <UART_SetConfig+0x6da>
 8007814:	4ba5      	ldr	r3, [pc, #660]	; (8007aac <UART_SetConfig+0x94c>)
 8007816:	f04f 0400 	mov.w	r4, #0
 800781a:	e00e      	b.n	800783a <UART_SetConfig+0x6da>
 800781c:	a49a      	add	r4, pc, #616	; (adr r4, 8007a88 <UART_SetConfig+0x928>)
 800781e:	e9d4 3400 	ldrd	r3, r4, [r4]
 8007822:	e00a      	b.n	800783a <UART_SetConfig+0x6da>
 8007824:	4ba2      	ldr	r3, [pc, #648]	; (8007ab0 <UART_SetConfig+0x950>)
 8007826:	f04f 0400 	mov.w	r4, #0
 800782a:	e006      	b.n	800783a <UART_SetConfig+0x6da>
 800782c:	4ba1      	ldr	r3, [pc, #644]	; (8007ab4 <UART_SetConfig+0x954>)
 800782e:	f04f 0400 	mov.w	r4, #0
 8007832:	e002      	b.n	800783a <UART_SetConfig+0x6da>
 8007834:	4b97      	ldr	r3, [pc, #604]	; (8007a94 <UART_SetConfig+0x934>)
 8007836:	f04f 0400 	mov.w	r4, #0
 800783a:	687a      	ldr	r2, [r7, #4]
 800783c:	6852      	ldr	r2, [r2, #4]
 800783e:	0852      	lsrs	r2, r2, #1
 8007840:	4611      	mov	r1, r2
 8007842:	f04f 0200 	mov.w	r2, #0
 8007846:	eb13 0b01 	adds.w	fp, r3, r1
 800784a:	eb44 0c02 	adc.w	ip, r4, r2
 800784e:	4658      	mov	r0, fp
 8007850:	4661      	mov	r1, ip
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	685b      	ldr	r3, [r3, #4]
 8007856:	f04f 0400 	mov.w	r4, #0
 800785a:	461a      	mov	r2, r3
 800785c:	4623      	mov	r3, r4
 800785e:	f7fc f9cb 	bl	8003bf8 <__aeabi_uldivmod>
 8007862:	4603      	mov	r3, r0
 8007864:	460c      	mov	r4, r1
 8007866:	61fb      	str	r3, [r7, #28]
            break;
 8007868:	e14b      	b.n	8007b02 <UART_SetConfig+0x9a2>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 800786a:	f7fe fd4b 	bl	8006304 <HAL_RCC_GetSysClockFreq>
 800786e:	6138      	str	r0, [r7, #16]
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007870:	693b      	ldr	r3, [r7, #16]
 8007872:	4618      	mov	r0, r3
 8007874:	f04f 0100 	mov.w	r1, #0
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800787c:	2b00      	cmp	r3, #0
 800787e:	d067      	beq.n	8007950 <UART_SetConfig+0x7f0>
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007884:	2b01      	cmp	r3, #1
 8007886:	d05e      	beq.n	8007946 <UART_SetConfig+0x7e6>
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800788c:	2b02      	cmp	r3, #2
 800788e:	d055      	beq.n	800793c <UART_SetConfig+0x7dc>
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007894:	2b03      	cmp	r3, #3
 8007896:	d04c      	beq.n	8007932 <UART_SetConfig+0x7d2>
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800789c:	2b04      	cmp	r3, #4
 800789e:	d043      	beq.n	8007928 <UART_SetConfig+0x7c8>
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078a4:	2b05      	cmp	r3, #5
 80078a6:	d03a      	beq.n	800791e <UART_SetConfig+0x7be>
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078ac:	2b06      	cmp	r3, #6
 80078ae:	d031      	beq.n	8007914 <UART_SetConfig+0x7b4>
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078b4:	2b07      	cmp	r3, #7
 80078b6:	d028      	beq.n	800790a <UART_SetConfig+0x7aa>
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078bc:	2b08      	cmp	r3, #8
 80078be:	d01f      	beq.n	8007900 <UART_SetConfig+0x7a0>
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078c4:	2b09      	cmp	r3, #9
 80078c6:	d016      	beq.n	80078f6 <UART_SetConfig+0x796>
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078cc:	2b0a      	cmp	r3, #10
 80078ce:	d00d      	beq.n	80078ec <UART_SetConfig+0x78c>
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078d4:	2b0b      	cmp	r3, #11
 80078d6:	d104      	bne.n	80078e2 <UART_SetConfig+0x782>
 80078d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80078dc:	f04f 0400 	mov.w	r4, #0
 80078e0:	e03a      	b.n	8007958 <UART_SetConfig+0x7f8>
 80078e2:	f04f 0301 	mov.w	r3, #1
 80078e6:	f04f 0400 	mov.w	r4, #0
 80078ea:	e035      	b.n	8007958 <UART_SetConfig+0x7f8>
 80078ec:	f04f 0380 	mov.w	r3, #128	; 0x80
 80078f0:	f04f 0400 	mov.w	r4, #0
 80078f4:	e030      	b.n	8007958 <UART_SetConfig+0x7f8>
 80078f6:	f04f 0340 	mov.w	r3, #64	; 0x40
 80078fa:	f04f 0400 	mov.w	r4, #0
 80078fe:	e02b      	b.n	8007958 <UART_SetConfig+0x7f8>
 8007900:	f04f 0320 	mov.w	r3, #32
 8007904:	f04f 0400 	mov.w	r4, #0
 8007908:	e026      	b.n	8007958 <UART_SetConfig+0x7f8>
 800790a:	f04f 0310 	mov.w	r3, #16
 800790e:	f04f 0400 	mov.w	r4, #0
 8007912:	e021      	b.n	8007958 <UART_SetConfig+0x7f8>
 8007914:	f04f 030c 	mov.w	r3, #12
 8007918:	f04f 0400 	mov.w	r4, #0
 800791c:	e01c      	b.n	8007958 <UART_SetConfig+0x7f8>
 800791e:	f04f 030a 	mov.w	r3, #10
 8007922:	f04f 0400 	mov.w	r4, #0
 8007926:	e017      	b.n	8007958 <UART_SetConfig+0x7f8>
 8007928:	f04f 0308 	mov.w	r3, #8
 800792c:	f04f 0400 	mov.w	r4, #0
 8007930:	e012      	b.n	8007958 <UART_SetConfig+0x7f8>
 8007932:	f04f 0306 	mov.w	r3, #6
 8007936:	f04f 0400 	mov.w	r4, #0
 800793a:	e00d      	b.n	8007958 <UART_SetConfig+0x7f8>
 800793c:	f04f 0304 	mov.w	r3, #4
 8007940:	f04f 0400 	mov.w	r4, #0
 8007944:	e008      	b.n	8007958 <UART_SetConfig+0x7f8>
 8007946:	f04f 0302 	mov.w	r3, #2
 800794a:	f04f 0400 	mov.w	r4, #0
 800794e:	e003      	b.n	8007958 <UART_SetConfig+0x7f8>
 8007950:	f04f 0301 	mov.w	r3, #1
 8007954:	f04f 0400 	mov.w	r4, #0
 8007958:	461a      	mov	r2, r3
 800795a:	4623      	mov	r3, r4
 800795c:	f7fc f94c 	bl	8003bf8 <__aeabi_uldivmod>
 8007960:	4603      	mov	r3, r0
 8007962:	460c      	mov	r4, r1
 8007964:	4619      	mov	r1, r3
 8007966:	4622      	mov	r2, r4
 8007968:	f04f 0300 	mov.w	r3, #0
 800796c:	f04f 0400 	mov.w	r4, #0
 8007970:	0214      	lsls	r4, r2, #8
 8007972:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8007976:	020b      	lsls	r3, r1, #8
 8007978:	687a      	ldr	r2, [r7, #4]
 800797a:	6852      	ldr	r2, [r2, #4]
 800797c:	0852      	lsrs	r2, r2, #1
 800797e:	4611      	mov	r1, r2
 8007980:	f04f 0200 	mov.w	r2, #0
 8007984:	eb13 0b01 	adds.w	fp, r3, r1
 8007988:	eb44 0c02 	adc.w	ip, r4, r2
 800798c:	4658      	mov	r0, fp
 800798e:	4661      	mov	r1, ip
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	685b      	ldr	r3, [r3, #4]
 8007994:	f04f 0400 	mov.w	r4, #0
 8007998:	461a      	mov	r2, r3
 800799a:	4623      	mov	r3, r4
 800799c:	f7fc f92c 	bl	8003bf8 <__aeabi_uldivmod>
 80079a0:	4603      	mov	r3, r0
 80079a2:	460c      	mov	r4, r1
 80079a4:	61fb      	str	r3, [r7, #28]
            break;
 80079a6:	e0ac      	b.n	8007b02 <UART_SetConfig+0x9a2>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	f000 8089 	beq.w	8007ac4 <UART_SetConfig+0x964>
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079b6:	2b01      	cmp	r3, #1
 80079b8:	d05b      	beq.n	8007a72 <UART_SetConfig+0x912>
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079be:	2b02      	cmp	r3, #2
 80079c0:	d052      	beq.n	8007a68 <UART_SetConfig+0x908>
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079c6:	2b03      	cmp	r3, #3
 80079c8:	d04a      	beq.n	8007a60 <UART_SetConfig+0x900>
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079ce:	2b04      	cmp	r3, #4
 80079d0:	d041      	beq.n	8007a56 <UART_SetConfig+0x8f6>
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079d6:	2b05      	cmp	r3, #5
 80079d8:	d039      	beq.n	8007a4e <UART_SetConfig+0x8ee>
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079de:	2b06      	cmp	r3, #6
 80079e0:	d031      	beq.n	8007a46 <UART_SetConfig+0x8e6>
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079e6:	2b07      	cmp	r3, #7
 80079e8:	d028      	beq.n	8007a3c <UART_SetConfig+0x8dc>
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079ee:	2b08      	cmp	r3, #8
 80079f0:	d01f      	beq.n	8007a32 <UART_SetConfig+0x8d2>
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079f6:	2b09      	cmp	r3, #9
 80079f8:	d016      	beq.n	8007a28 <UART_SetConfig+0x8c8>
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079fe:	2b0a      	cmp	r3, #10
 8007a00:	d00d      	beq.n	8007a1e <UART_SetConfig+0x8be>
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a06:	2b0b      	cmp	r3, #11
 8007a08:	d104      	bne.n	8007a14 <UART_SetConfig+0x8b4>
 8007a0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007a0e:	f04f 0400 	mov.w	r4, #0
 8007a12:	e05b      	b.n	8007acc <UART_SetConfig+0x96c>
 8007a14:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8007a18:	f04f 0400 	mov.w	r4, #0
 8007a1c:	e056      	b.n	8007acc <UART_SetConfig+0x96c>
 8007a1e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007a22:	f04f 0400 	mov.w	r4, #0
 8007a26:	e051      	b.n	8007acc <UART_SetConfig+0x96c>
 8007a28:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007a2c:	f04f 0400 	mov.w	r4, #0
 8007a30:	e04c      	b.n	8007acc <UART_SetConfig+0x96c>
 8007a32:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007a36:	f04f 0400 	mov.w	r4, #0
 8007a3a:	e047      	b.n	8007acc <UART_SetConfig+0x96c>
 8007a3c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007a40:	f04f 0400 	mov.w	r4, #0
 8007a44:	e042      	b.n	8007acc <UART_SetConfig+0x96c>
 8007a46:	4b1c      	ldr	r3, [pc, #112]	; (8007ab8 <UART_SetConfig+0x958>)
 8007a48:	f04f 0400 	mov.w	r4, #0
 8007a4c:	e03e      	b.n	8007acc <UART_SetConfig+0x96c>
 8007a4e:	4b1b      	ldr	r3, [pc, #108]	; (8007abc <UART_SetConfig+0x95c>)
 8007a50:	f04f 0400 	mov.w	r4, #0
 8007a54:	e03a      	b.n	8007acc <UART_SetConfig+0x96c>
 8007a56:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8007a5a:	f04f 0400 	mov.w	r4, #0
 8007a5e:	e035      	b.n	8007acc <UART_SetConfig+0x96c>
 8007a60:	4b17      	ldr	r3, [pc, #92]	; (8007ac0 <UART_SetConfig+0x960>)
 8007a62:	f04f 0400 	mov.w	r4, #0
 8007a66:	e031      	b.n	8007acc <UART_SetConfig+0x96c>
 8007a68:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007a6c:	f04f 0400 	mov.w	r4, #0
 8007a70:	e02c      	b.n	8007acc <UART_SetConfig+0x96c>
 8007a72:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007a76:	f04f 0400 	mov.w	r4, #0
 8007a7a:	e027      	b.n	8007acc <UART_SetConfig+0x96c>
 8007a7c:	f3af 8000 	nop.w
 8007a80:	14585500 	.word	0x14585500
 8007a84:	00000000 	.word	0x00000000
 8007a88:	28b0aa00 	.word	0x28b0aa00
 8007a8c:	00000000 	.word	0x00000000
 8007a90:	00f42400 	.word	0x00f42400
 8007a94:	f4240000 	.word	0xf4240000
 8007a98:	01e84800 	.word	0x01e84800
 8007a9c:	03d09000 	.word	0x03d09000
 8007aa0:	07a12000 	.word	0x07a12000
 8007aa4:	0f424000 	.word	0x0f424000
 8007aa8:	186a0000 	.word	0x186a0000
 8007aac:	1e848000 	.word	0x1e848000
 8007ab0:	3d090000 	.word	0x3d090000
 8007ab4:	7a120000 	.word	0x7a120000
 8007ab8:	000aaa00 	.word	0x000aaa00
 8007abc:	000ccc00 	.word	0x000ccc00
 8007ac0:	00155500 	.word	0x00155500
 8007ac4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8007ac8:	f04f 0400 	mov.w	r4, #0
 8007acc:	687a      	ldr	r2, [r7, #4]
 8007ace:	6852      	ldr	r2, [r2, #4]
 8007ad0:	0852      	lsrs	r2, r2, #1
 8007ad2:	4611      	mov	r1, r2
 8007ad4:	f04f 0200 	mov.w	r2, #0
 8007ad8:	eb13 0b01 	adds.w	fp, r3, r1
 8007adc:	eb44 0c02 	adc.w	ip, r4, r2
 8007ae0:	4658      	mov	r0, fp
 8007ae2:	4661      	mov	r1, ip
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	685b      	ldr	r3, [r3, #4]
 8007ae8:	f04f 0400 	mov.w	r4, #0
 8007aec:	461a      	mov	r2, r3
 8007aee:	4623      	mov	r3, r4
 8007af0:	f7fc f882 	bl	8003bf8 <__aeabi_uldivmod>
 8007af4:	4603      	mov	r3, r0
 8007af6:	460c      	mov	r4, r1
 8007af8:	61fb      	str	r3, [r7, #28]
            break;
 8007afa:	e002      	b.n	8007b02 <UART_SetConfig+0x9a2>
          default:
            ret = HAL_ERROR;
 8007afc:	2301      	movs	r3, #1
 8007afe:	76fb      	strb	r3, [r7, #27]
            break;
 8007b00:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007b02:	69fb      	ldr	r3, [r7, #28]
 8007b04:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007b08:	d308      	bcc.n	8007b1c <UART_SetConfig+0x9bc>
 8007b0a:	69fb      	ldr	r3, [r7, #28]
 8007b0c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007b10:	d204      	bcs.n	8007b1c <UART_SetConfig+0x9bc>
        {
          huart->Instance->BRR = usartdiv;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	69fa      	ldr	r2, [r7, #28]
 8007b18:	60da      	str	r2, [r3, #12]
 8007b1a:	e35b      	b.n	80081d4 <UART_SetConfig+0x1074>
        }
        else
        {
          ret = HAL_ERROR;
 8007b1c:	2301      	movs	r3, #1
 8007b1e:	76fb      	strb	r3, [r7, #27]
 8007b20:	e358      	b.n	80081d4 <UART_SetConfig+0x1074>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	69db      	ldr	r3, [r3, #28]
 8007b26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007b2a:	f040 81a6 	bne.w	8007e7a <UART_SetConfig+0xd1a>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8007b2e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007b32:	3b01      	subs	r3, #1
 8007b34:	2b07      	cmp	r3, #7
 8007b36:	f200 8180 	bhi.w	8007e3a <UART_SetConfig+0xcda>
 8007b3a:	a201      	add	r2, pc, #4	; (adr r2, 8007b40 <UART_SetConfig+0x9e0>)
 8007b3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b40:	08007b61 	.word	0x08007b61
 8007b44:	08007c19 	.word	0x08007c19
 8007b48:	08007e3b 	.word	0x08007e3b
 8007b4c:	08007cc1 	.word	0x08007cc1
 8007b50:	08007e3b 	.word	0x08007e3b
 8007b54:	08007e3b 	.word	0x08007e3b
 8007b58:	08007e3b 	.word	0x08007e3b
 8007b5c:	08007d79 	.word	0x08007d79
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007b60:	f7fe fc64 	bl	800642c <HAL_RCC_GetPCLK2Freq>
 8007b64:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d044      	beq.n	8007bf8 <UART_SetConfig+0xa98>
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b72:	2b01      	cmp	r3, #1
 8007b74:	d03e      	beq.n	8007bf4 <UART_SetConfig+0xa94>
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b7a:	2b02      	cmp	r3, #2
 8007b7c:	d038      	beq.n	8007bf0 <UART_SetConfig+0xa90>
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b82:	2b03      	cmp	r3, #3
 8007b84:	d032      	beq.n	8007bec <UART_SetConfig+0xa8c>
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b8a:	2b04      	cmp	r3, #4
 8007b8c:	d02c      	beq.n	8007be8 <UART_SetConfig+0xa88>
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b92:	2b05      	cmp	r3, #5
 8007b94:	d026      	beq.n	8007be4 <UART_SetConfig+0xa84>
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b9a:	2b06      	cmp	r3, #6
 8007b9c:	d020      	beq.n	8007be0 <UART_SetConfig+0xa80>
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ba2:	2b07      	cmp	r3, #7
 8007ba4:	d01a      	beq.n	8007bdc <UART_SetConfig+0xa7c>
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007baa:	2b08      	cmp	r3, #8
 8007bac:	d014      	beq.n	8007bd8 <UART_SetConfig+0xa78>
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bb2:	2b09      	cmp	r3, #9
 8007bb4:	d00e      	beq.n	8007bd4 <UART_SetConfig+0xa74>
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bba:	2b0a      	cmp	r3, #10
 8007bbc:	d008      	beq.n	8007bd0 <UART_SetConfig+0xa70>
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bc2:	2b0b      	cmp	r3, #11
 8007bc4:	d102      	bne.n	8007bcc <UART_SetConfig+0xa6c>
 8007bc6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007bca:	e016      	b.n	8007bfa <UART_SetConfig+0xa9a>
 8007bcc:	2301      	movs	r3, #1
 8007bce:	e014      	b.n	8007bfa <UART_SetConfig+0xa9a>
 8007bd0:	2380      	movs	r3, #128	; 0x80
 8007bd2:	e012      	b.n	8007bfa <UART_SetConfig+0xa9a>
 8007bd4:	2340      	movs	r3, #64	; 0x40
 8007bd6:	e010      	b.n	8007bfa <UART_SetConfig+0xa9a>
 8007bd8:	2320      	movs	r3, #32
 8007bda:	e00e      	b.n	8007bfa <UART_SetConfig+0xa9a>
 8007bdc:	2310      	movs	r3, #16
 8007bde:	e00c      	b.n	8007bfa <UART_SetConfig+0xa9a>
 8007be0:	230c      	movs	r3, #12
 8007be2:	e00a      	b.n	8007bfa <UART_SetConfig+0xa9a>
 8007be4:	230a      	movs	r3, #10
 8007be6:	e008      	b.n	8007bfa <UART_SetConfig+0xa9a>
 8007be8:	2308      	movs	r3, #8
 8007bea:	e006      	b.n	8007bfa <UART_SetConfig+0xa9a>
 8007bec:	2306      	movs	r3, #6
 8007bee:	e004      	b.n	8007bfa <UART_SetConfig+0xa9a>
 8007bf0:	2304      	movs	r3, #4
 8007bf2:	e002      	b.n	8007bfa <UART_SetConfig+0xa9a>
 8007bf4:	2302      	movs	r3, #2
 8007bf6:	e000      	b.n	8007bfa <UART_SetConfig+0xa9a>
 8007bf8:	2301      	movs	r3, #1
 8007bfa:	693a      	ldr	r2, [r7, #16]
 8007bfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c00:	005a      	lsls	r2, r3, #1
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	685b      	ldr	r3, [r3, #4]
 8007c06:	085b      	lsrs	r3, r3, #1
 8007c08:	441a      	add	r2, r3
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	685b      	ldr	r3, [r3, #4]
 8007c0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c12:	b29b      	uxth	r3, r3
 8007c14:	61fb      	str	r3, [r7, #28]
        break;
 8007c16:	e113      	b.n	8007e40 <UART_SetConfig+0xce0>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d043      	beq.n	8007ca8 <UART_SetConfig+0xb48>
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c24:	2b01      	cmp	r3, #1
 8007c26:	d03d      	beq.n	8007ca4 <UART_SetConfig+0xb44>
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c2c:	2b02      	cmp	r3, #2
 8007c2e:	d037      	beq.n	8007ca0 <UART_SetConfig+0xb40>
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c34:	2b03      	cmp	r3, #3
 8007c36:	d031      	beq.n	8007c9c <UART_SetConfig+0xb3c>
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c3c:	2b04      	cmp	r3, #4
 8007c3e:	d02b      	beq.n	8007c98 <UART_SetConfig+0xb38>
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c44:	2b05      	cmp	r3, #5
 8007c46:	d025      	beq.n	8007c94 <UART_SetConfig+0xb34>
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c4c:	2b06      	cmp	r3, #6
 8007c4e:	d01f      	beq.n	8007c90 <UART_SetConfig+0xb30>
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c54:	2b07      	cmp	r3, #7
 8007c56:	d019      	beq.n	8007c8c <UART_SetConfig+0xb2c>
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c5c:	2b08      	cmp	r3, #8
 8007c5e:	d013      	beq.n	8007c88 <UART_SetConfig+0xb28>
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c64:	2b09      	cmp	r3, #9
 8007c66:	d00d      	beq.n	8007c84 <UART_SetConfig+0xb24>
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c6c:	2b0a      	cmp	r3, #10
 8007c6e:	d007      	beq.n	8007c80 <UART_SetConfig+0xb20>
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c74:	2b0b      	cmp	r3, #11
 8007c76:	d101      	bne.n	8007c7c <UART_SetConfig+0xb1c>
 8007c78:	4b8c      	ldr	r3, [pc, #560]	; (8007eac <UART_SetConfig+0xd4c>)
 8007c7a:	e016      	b.n	8007caa <UART_SetConfig+0xb4a>
 8007c7c:	4b8c      	ldr	r3, [pc, #560]	; (8007eb0 <UART_SetConfig+0xd50>)
 8007c7e:	e014      	b.n	8007caa <UART_SetConfig+0xb4a>
 8007c80:	4b8c      	ldr	r3, [pc, #560]	; (8007eb4 <UART_SetConfig+0xd54>)
 8007c82:	e012      	b.n	8007caa <UART_SetConfig+0xb4a>
 8007c84:	4b8c      	ldr	r3, [pc, #560]	; (8007eb8 <UART_SetConfig+0xd58>)
 8007c86:	e010      	b.n	8007caa <UART_SetConfig+0xb4a>
 8007c88:	4b8c      	ldr	r3, [pc, #560]	; (8007ebc <UART_SetConfig+0xd5c>)
 8007c8a:	e00e      	b.n	8007caa <UART_SetConfig+0xb4a>
 8007c8c:	4b8c      	ldr	r3, [pc, #560]	; (8007ec0 <UART_SetConfig+0xd60>)
 8007c8e:	e00c      	b.n	8007caa <UART_SetConfig+0xb4a>
 8007c90:	4b8c      	ldr	r3, [pc, #560]	; (8007ec4 <UART_SetConfig+0xd64>)
 8007c92:	e00a      	b.n	8007caa <UART_SetConfig+0xb4a>
 8007c94:	4b8c      	ldr	r3, [pc, #560]	; (8007ec8 <UART_SetConfig+0xd68>)
 8007c96:	e008      	b.n	8007caa <UART_SetConfig+0xb4a>
 8007c98:	4b8c      	ldr	r3, [pc, #560]	; (8007ecc <UART_SetConfig+0xd6c>)
 8007c9a:	e006      	b.n	8007caa <UART_SetConfig+0xb4a>
 8007c9c:	4b8c      	ldr	r3, [pc, #560]	; (8007ed0 <UART_SetConfig+0xd70>)
 8007c9e:	e004      	b.n	8007caa <UART_SetConfig+0xb4a>
 8007ca0:	4b8c      	ldr	r3, [pc, #560]	; (8007ed4 <UART_SetConfig+0xd74>)
 8007ca2:	e002      	b.n	8007caa <UART_SetConfig+0xb4a>
 8007ca4:	4b8c      	ldr	r3, [pc, #560]	; (8007ed8 <UART_SetConfig+0xd78>)
 8007ca6:	e000      	b.n	8007caa <UART_SetConfig+0xb4a>
 8007ca8:	4b81      	ldr	r3, [pc, #516]	; (8007eb0 <UART_SetConfig+0xd50>)
 8007caa:	687a      	ldr	r2, [r7, #4]
 8007cac:	6852      	ldr	r2, [r2, #4]
 8007cae:	0852      	lsrs	r2, r2, #1
 8007cb0:	441a      	add	r2, r3
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	685b      	ldr	r3, [r3, #4]
 8007cb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8007cba:	b29b      	uxth	r3, r3
 8007cbc:	61fb      	str	r3, [r7, #28]
        break;
 8007cbe:	e0bf      	b.n	8007e40 <UART_SetConfig+0xce0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007cc0:	f7fe fb20 	bl	8006304 <HAL_RCC_GetSysClockFreq>
 8007cc4:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d044      	beq.n	8007d58 <UART_SetConfig+0xbf8>
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cd2:	2b01      	cmp	r3, #1
 8007cd4:	d03e      	beq.n	8007d54 <UART_SetConfig+0xbf4>
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cda:	2b02      	cmp	r3, #2
 8007cdc:	d038      	beq.n	8007d50 <UART_SetConfig+0xbf0>
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ce2:	2b03      	cmp	r3, #3
 8007ce4:	d032      	beq.n	8007d4c <UART_SetConfig+0xbec>
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cea:	2b04      	cmp	r3, #4
 8007cec:	d02c      	beq.n	8007d48 <UART_SetConfig+0xbe8>
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cf2:	2b05      	cmp	r3, #5
 8007cf4:	d026      	beq.n	8007d44 <UART_SetConfig+0xbe4>
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cfa:	2b06      	cmp	r3, #6
 8007cfc:	d020      	beq.n	8007d40 <UART_SetConfig+0xbe0>
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d02:	2b07      	cmp	r3, #7
 8007d04:	d01a      	beq.n	8007d3c <UART_SetConfig+0xbdc>
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d0a:	2b08      	cmp	r3, #8
 8007d0c:	d014      	beq.n	8007d38 <UART_SetConfig+0xbd8>
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d12:	2b09      	cmp	r3, #9
 8007d14:	d00e      	beq.n	8007d34 <UART_SetConfig+0xbd4>
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d1a:	2b0a      	cmp	r3, #10
 8007d1c:	d008      	beq.n	8007d30 <UART_SetConfig+0xbd0>
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d22:	2b0b      	cmp	r3, #11
 8007d24:	d102      	bne.n	8007d2c <UART_SetConfig+0xbcc>
 8007d26:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007d2a:	e016      	b.n	8007d5a <UART_SetConfig+0xbfa>
 8007d2c:	2301      	movs	r3, #1
 8007d2e:	e014      	b.n	8007d5a <UART_SetConfig+0xbfa>
 8007d30:	2380      	movs	r3, #128	; 0x80
 8007d32:	e012      	b.n	8007d5a <UART_SetConfig+0xbfa>
 8007d34:	2340      	movs	r3, #64	; 0x40
 8007d36:	e010      	b.n	8007d5a <UART_SetConfig+0xbfa>
 8007d38:	2320      	movs	r3, #32
 8007d3a:	e00e      	b.n	8007d5a <UART_SetConfig+0xbfa>
 8007d3c:	2310      	movs	r3, #16
 8007d3e:	e00c      	b.n	8007d5a <UART_SetConfig+0xbfa>
 8007d40:	230c      	movs	r3, #12
 8007d42:	e00a      	b.n	8007d5a <UART_SetConfig+0xbfa>
 8007d44:	230a      	movs	r3, #10
 8007d46:	e008      	b.n	8007d5a <UART_SetConfig+0xbfa>
 8007d48:	2308      	movs	r3, #8
 8007d4a:	e006      	b.n	8007d5a <UART_SetConfig+0xbfa>
 8007d4c:	2306      	movs	r3, #6
 8007d4e:	e004      	b.n	8007d5a <UART_SetConfig+0xbfa>
 8007d50:	2304      	movs	r3, #4
 8007d52:	e002      	b.n	8007d5a <UART_SetConfig+0xbfa>
 8007d54:	2302      	movs	r3, #2
 8007d56:	e000      	b.n	8007d5a <UART_SetConfig+0xbfa>
 8007d58:	2301      	movs	r3, #1
 8007d5a:	693a      	ldr	r2, [r7, #16]
 8007d5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d60:	005a      	lsls	r2, r3, #1
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	685b      	ldr	r3, [r3, #4]
 8007d66:	085b      	lsrs	r3, r3, #1
 8007d68:	441a      	add	r2, r3
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	685b      	ldr	r3, [r3, #4]
 8007d6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d72:	b29b      	uxth	r3, r3
 8007d74:	61fb      	str	r3, [r7, #28]
        break;
 8007d76:	e063      	b.n	8007e40 <UART_SetConfig+0xce0>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d04f      	beq.n	8007e20 <UART_SetConfig+0xcc0>
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d84:	2b01      	cmp	r3, #1
 8007d86:	d048      	beq.n	8007e1a <UART_SetConfig+0xcba>
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d8c:	2b02      	cmp	r3, #2
 8007d8e:	d041      	beq.n	8007e14 <UART_SetConfig+0xcb4>
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d94:	2b03      	cmp	r3, #3
 8007d96:	d03a      	beq.n	8007e0e <UART_SetConfig+0xcae>
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d9c:	2b04      	cmp	r3, #4
 8007d9e:	d033      	beq.n	8007e08 <UART_SetConfig+0xca8>
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007da4:	2b05      	cmp	r3, #5
 8007da6:	d02c      	beq.n	8007e02 <UART_SetConfig+0xca2>
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dac:	2b06      	cmp	r3, #6
 8007dae:	d025      	beq.n	8007dfc <UART_SetConfig+0xc9c>
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007db4:	2b07      	cmp	r3, #7
 8007db6:	d01e      	beq.n	8007df6 <UART_SetConfig+0xc96>
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dbc:	2b08      	cmp	r3, #8
 8007dbe:	d017      	beq.n	8007df0 <UART_SetConfig+0xc90>
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dc4:	2b09      	cmp	r3, #9
 8007dc6:	d010      	beq.n	8007dea <UART_SetConfig+0xc8a>
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dcc:	2b0a      	cmp	r3, #10
 8007dce:	d009      	beq.n	8007de4 <UART_SetConfig+0xc84>
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dd4:	2b0b      	cmp	r3, #11
 8007dd6:	d102      	bne.n	8007dde <UART_SetConfig+0xc7e>
 8007dd8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007ddc:	e022      	b.n	8007e24 <UART_SetConfig+0xcc4>
 8007dde:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007de2:	e01f      	b.n	8007e24 <UART_SetConfig+0xcc4>
 8007de4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007de8:	e01c      	b.n	8007e24 <UART_SetConfig+0xcc4>
 8007dea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007dee:	e019      	b.n	8007e24 <UART_SetConfig+0xcc4>
 8007df0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007df4:	e016      	b.n	8007e24 <UART_SetConfig+0xcc4>
 8007df6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007dfa:	e013      	b.n	8007e24 <UART_SetConfig+0xcc4>
 8007dfc:	f241 5354 	movw	r3, #5460	; 0x1554
 8007e00:	e010      	b.n	8007e24 <UART_SetConfig+0xcc4>
 8007e02:	f641 1398 	movw	r3, #6552	; 0x1998
 8007e06:	e00d      	b.n	8007e24 <UART_SetConfig+0xcc4>
 8007e08:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007e0c:	e00a      	b.n	8007e24 <UART_SetConfig+0xcc4>
 8007e0e:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 8007e12:	e007      	b.n	8007e24 <UART_SetConfig+0xcc4>
 8007e14:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007e18:	e004      	b.n	8007e24 <UART_SetConfig+0xcc4>
 8007e1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007e1e:	e001      	b.n	8007e24 <UART_SetConfig+0xcc4>
 8007e20:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007e24:	687a      	ldr	r2, [r7, #4]
 8007e26:	6852      	ldr	r2, [r2, #4]
 8007e28:	0852      	lsrs	r2, r2, #1
 8007e2a:	441a      	add	r2, r3
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	685b      	ldr	r3, [r3, #4]
 8007e30:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e34:	b29b      	uxth	r3, r3
 8007e36:	61fb      	str	r3, [r7, #28]
        break;
 8007e38:	e002      	b.n	8007e40 <UART_SetConfig+0xce0>
      default:
        ret = HAL_ERROR;
 8007e3a:	2301      	movs	r3, #1
 8007e3c:	76fb      	strb	r3, [r7, #27]
        break;
 8007e3e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007e40:	69fb      	ldr	r3, [r7, #28]
 8007e42:	2b0f      	cmp	r3, #15
 8007e44:	d916      	bls.n	8007e74 <UART_SetConfig+0xd14>
 8007e46:	69fb      	ldr	r3, [r7, #28]
 8007e48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e4c:	d212      	bcs.n	8007e74 <UART_SetConfig+0xd14>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007e4e:	69fb      	ldr	r3, [r7, #28]
 8007e50:	b29b      	uxth	r3, r3
 8007e52:	f023 030f 	bic.w	r3, r3, #15
 8007e56:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007e58:	69fb      	ldr	r3, [r7, #28]
 8007e5a:	085b      	lsrs	r3, r3, #1
 8007e5c:	b29b      	uxth	r3, r3
 8007e5e:	f003 0307 	and.w	r3, r3, #7
 8007e62:	b29a      	uxth	r2, r3
 8007e64:	89fb      	ldrh	r3, [r7, #14]
 8007e66:	4313      	orrs	r3, r2
 8007e68:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	89fa      	ldrh	r2, [r7, #14]
 8007e70:	60da      	str	r2, [r3, #12]
 8007e72:	e1af      	b.n	80081d4 <UART_SetConfig+0x1074>
    }
    else
    {
      ret = HAL_ERROR;
 8007e74:	2301      	movs	r3, #1
 8007e76:	76fb      	strb	r3, [r7, #27]
 8007e78:	e1ac      	b.n	80081d4 <UART_SetConfig+0x1074>
    }
  }
  else
  {
    switch (clocksource)
 8007e7a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007e7e:	3b01      	subs	r3, #1
 8007e80:	2b07      	cmp	r3, #7
 8007e82:	f200 8196 	bhi.w	80081b2 <UART_SetConfig+0x1052>
 8007e86:	a201      	add	r2, pc, #4	; (adr r2, 8007e8c <UART_SetConfig+0xd2c>)
 8007e88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e8c:	08007edd 	.word	0x08007edd
 8007e90:	08007f93 	.word	0x08007f93
 8007e94:	080081b3 	.word	0x080081b3
 8007e98:	0800803d 	.word	0x0800803d
 8007e9c:	080081b3 	.word	0x080081b3
 8007ea0:	080081b3 	.word	0x080081b3
 8007ea4:	080081b3 	.word	0x080081b3
 8007ea8:	080080f3 	.word	0x080080f3
 8007eac:	0001e848 	.word	0x0001e848
 8007eb0:	01e84800 	.word	0x01e84800
 8007eb4:	0003d090 	.word	0x0003d090
 8007eb8:	0007a120 	.word	0x0007a120
 8007ebc:	000f4240 	.word	0x000f4240
 8007ec0:	001e8480 	.word	0x001e8480
 8007ec4:	0028b0aa 	.word	0x0028b0aa
 8007ec8:	0030d400 	.word	0x0030d400
 8007ecc:	003d0900 	.word	0x003d0900
 8007ed0:	00516154 	.word	0x00516154
 8007ed4:	007a1200 	.word	0x007a1200
 8007ed8:	00f42400 	.word	0x00f42400
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007edc:	f7fe faa6 	bl	800642c <HAL_RCC_GetPCLK2Freq>
 8007ee0:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d044      	beq.n	8007f74 <UART_SetConfig+0xe14>
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eee:	2b01      	cmp	r3, #1
 8007ef0:	d03e      	beq.n	8007f70 <UART_SetConfig+0xe10>
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ef6:	2b02      	cmp	r3, #2
 8007ef8:	d038      	beq.n	8007f6c <UART_SetConfig+0xe0c>
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007efe:	2b03      	cmp	r3, #3
 8007f00:	d032      	beq.n	8007f68 <UART_SetConfig+0xe08>
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f06:	2b04      	cmp	r3, #4
 8007f08:	d02c      	beq.n	8007f64 <UART_SetConfig+0xe04>
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f0e:	2b05      	cmp	r3, #5
 8007f10:	d026      	beq.n	8007f60 <UART_SetConfig+0xe00>
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f16:	2b06      	cmp	r3, #6
 8007f18:	d020      	beq.n	8007f5c <UART_SetConfig+0xdfc>
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f1e:	2b07      	cmp	r3, #7
 8007f20:	d01a      	beq.n	8007f58 <UART_SetConfig+0xdf8>
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f26:	2b08      	cmp	r3, #8
 8007f28:	d014      	beq.n	8007f54 <UART_SetConfig+0xdf4>
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f2e:	2b09      	cmp	r3, #9
 8007f30:	d00e      	beq.n	8007f50 <UART_SetConfig+0xdf0>
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f36:	2b0a      	cmp	r3, #10
 8007f38:	d008      	beq.n	8007f4c <UART_SetConfig+0xdec>
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f3e:	2b0b      	cmp	r3, #11
 8007f40:	d102      	bne.n	8007f48 <UART_SetConfig+0xde8>
 8007f42:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007f46:	e016      	b.n	8007f76 <UART_SetConfig+0xe16>
 8007f48:	2301      	movs	r3, #1
 8007f4a:	e014      	b.n	8007f76 <UART_SetConfig+0xe16>
 8007f4c:	2380      	movs	r3, #128	; 0x80
 8007f4e:	e012      	b.n	8007f76 <UART_SetConfig+0xe16>
 8007f50:	2340      	movs	r3, #64	; 0x40
 8007f52:	e010      	b.n	8007f76 <UART_SetConfig+0xe16>
 8007f54:	2320      	movs	r3, #32
 8007f56:	e00e      	b.n	8007f76 <UART_SetConfig+0xe16>
 8007f58:	2310      	movs	r3, #16
 8007f5a:	e00c      	b.n	8007f76 <UART_SetConfig+0xe16>
 8007f5c:	230c      	movs	r3, #12
 8007f5e:	e00a      	b.n	8007f76 <UART_SetConfig+0xe16>
 8007f60:	230a      	movs	r3, #10
 8007f62:	e008      	b.n	8007f76 <UART_SetConfig+0xe16>
 8007f64:	2308      	movs	r3, #8
 8007f66:	e006      	b.n	8007f76 <UART_SetConfig+0xe16>
 8007f68:	2306      	movs	r3, #6
 8007f6a:	e004      	b.n	8007f76 <UART_SetConfig+0xe16>
 8007f6c:	2304      	movs	r3, #4
 8007f6e:	e002      	b.n	8007f76 <UART_SetConfig+0xe16>
 8007f70:	2302      	movs	r3, #2
 8007f72:	e000      	b.n	8007f76 <UART_SetConfig+0xe16>
 8007f74:	2301      	movs	r3, #1
 8007f76:	693a      	ldr	r2, [r7, #16]
 8007f78:	fbb2 f2f3 	udiv	r2, r2, r3
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	685b      	ldr	r3, [r3, #4]
 8007f80:	085b      	lsrs	r3, r3, #1
 8007f82:	441a      	add	r2, r3
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	685b      	ldr	r3, [r3, #4]
 8007f88:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f8c:	b29b      	uxth	r3, r3
 8007f8e:	61fb      	str	r3, [r7, #28]
        break;
 8007f90:	e112      	b.n	80081b8 <UART_SetConfig+0x1058>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d044      	beq.n	8008024 <UART_SetConfig+0xec4>
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f9e:	2b01      	cmp	r3, #1
 8007fa0:	d03e      	beq.n	8008020 <UART_SetConfig+0xec0>
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fa6:	2b02      	cmp	r3, #2
 8007fa8:	d038      	beq.n	800801c <UART_SetConfig+0xebc>
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fae:	2b03      	cmp	r3, #3
 8007fb0:	d032      	beq.n	8008018 <UART_SetConfig+0xeb8>
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fb6:	2b04      	cmp	r3, #4
 8007fb8:	d02c      	beq.n	8008014 <UART_SetConfig+0xeb4>
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fbe:	2b05      	cmp	r3, #5
 8007fc0:	d026      	beq.n	8008010 <UART_SetConfig+0xeb0>
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fc6:	2b06      	cmp	r3, #6
 8007fc8:	d020      	beq.n	800800c <UART_SetConfig+0xeac>
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fce:	2b07      	cmp	r3, #7
 8007fd0:	d01a      	beq.n	8008008 <UART_SetConfig+0xea8>
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fd6:	2b08      	cmp	r3, #8
 8007fd8:	d014      	beq.n	8008004 <UART_SetConfig+0xea4>
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fde:	2b09      	cmp	r3, #9
 8007fe0:	d00e      	beq.n	8008000 <UART_SetConfig+0xea0>
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fe6:	2b0a      	cmp	r3, #10
 8007fe8:	d008      	beq.n	8007ffc <UART_SetConfig+0xe9c>
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fee:	2b0b      	cmp	r3, #11
 8007ff0:	d102      	bne.n	8007ff8 <UART_SetConfig+0xe98>
 8007ff2:	f24f 4324 	movw	r3, #62500	; 0xf424
 8007ff6:	e016      	b.n	8008026 <UART_SetConfig+0xec6>
 8007ff8:	4b80      	ldr	r3, [pc, #512]	; (80081fc <UART_SetConfig+0x109c>)
 8007ffa:	e014      	b.n	8008026 <UART_SetConfig+0xec6>
 8007ffc:	4b80      	ldr	r3, [pc, #512]	; (8008200 <UART_SetConfig+0x10a0>)
 8007ffe:	e012      	b.n	8008026 <UART_SetConfig+0xec6>
 8008000:	4b80      	ldr	r3, [pc, #512]	; (8008204 <UART_SetConfig+0x10a4>)
 8008002:	e010      	b.n	8008026 <UART_SetConfig+0xec6>
 8008004:	4b80      	ldr	r3, [pc, #512]	; (8008208 <UART_SetConfig+0x10a8>)
 8008006:	e00e      	b.n	8008026 <UART_SetConfig+0xec6>
 8008008:	4b80      	ldr	r3, [pc, #512]	; (800820c <UART_SetConfig+0x10ac>)
 800800a:	e00c      	b.n	8008026 <UART_SetConfig+0xec6>
 800800c:	4b80      	ldr	r3, [pc, #512]	; (8008210 <UART_SetConfig+0x10b0>)
 800800e:	e00a      	b.n	8008026 <UART_SetConfig+0xec6>
 8008010:	4b80      	ldr	r3, [pc, #512]	; (8008214 <UART_SetConfig+0x10b4>)
 8008012:	e008      	b.n	8008026 <UART_SetConfig+0xec6>
 8008014:	4b80      	ldr	r3, [pc, #512]	; (8008218 <UART_SetConfig+0x10b8>)
 8008016:	e006      	b.n	8008026 <UART_SetConfig+0xec6>
 8008018:	4b80      	ldr	r3, [pc, #512]	; (800821c <UART_SetConfig+0x10bc>)
 800801a:	e004      	b.n	8008026 <UART_SetConfig+0xec6>
 800801c:	4b80      	ldr	r3, [pc, #512]	; (8008220 <UART_SetConfig+0x10c0>)
 800801e:	e002      	b.n	8008026 <UART_SetConfig+0xec6>
 8008020:	4b80      	ldr	r3, [pc, #512]	; (8008224 <UART_SetConfig+0x10c4>)
 8008022:	e000      	b.n	8008026 <UART_SetConfig+0xec6>
 8008024:	4b75      	ldr	r3, [pc, #468]	; (80081fc <UART_SetConfig+0x109c>)
 8008026:	687a      	ldr	r2, [r7, #4]
 8008028:	6852      	ldr	r2, [r2, #4]
 800802a:	0852      	lsrs	r2, r2, #1
 800802c:	441a      	add	r2, r3
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	685b      	ldr	r3, [r3, #4]
 8008032:	fbb2 f3f3 	udiv	r3, r2, r3
 8008036:	b29b      	uxth	r3, r3
 8008038:	61fb      	str	r3, [r7, #28]
        break;
 800803a:	e0bd      	b.n	80081b8 <UART_SetConfig+0x1058>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800803c:	f7fe f962 	bl	8006304 <HAL_RCC_GetSysClockFreq>
 8008040:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008046:	2b00      	cmp	r3, #0
 8008048:	d044      	beq.n	80080d4 <UART_SetConfig+0xf74>
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800804e:	2b01      	cmp	r3, #1
 8008050:	d03e      	beq.n	80080d0 <UART_SetConfig+0xf70>
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008056:	2b02      	cmp	r3, #2
 8008058:	d038      	beq.n	80080cc <UART_SetConfig+0xf6c>
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800805e:	2b03      	cmp	r3, #3
 8008060:	d032      	beq.n	80080c8 <UART_SetConfig+0xf68>
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008066:	2b04      	cmp	r3, #4
 8008068:	d02c      	beq.n	80080c4 <UART_SetConfig+0xf64>
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800806e:	2b05      	cmp	r3, #5
 8008070:	d026      	beq.n	80080c0 <UART_SetConfig+0xf60>
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008076:	2b06      	cmp	r3, #6
 8008078:	d020      	beq.n	80080bc <UART_SetConfig+0xf5c>
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800807e:	2b07      	cmp	r3, #7
 8008080:	d01a      	beq.n	80080b8 <UART_SetConfig+0xf58>
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008086:	2b08      	cmp	r3, #8
 8008088:	d014      	beq.n	80080b4 <UART_SetConfig+0xf54>
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800808e:	2b09      	cmp	r3, #9
 8008090:	d00e      	beq.n	80080b0 <UART_SetConfig+0xf50>
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008096:	2b0a      	cmp	r3, #10
 8008098:	d008      	beq.n	80080ac <UART_SetConfig+0xf4c>
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800809e:	2b0b      	cmp	r3, #11
 80080a0:	d102      	bne.n	80080a8 <UART_SetConfig+0xf48>
 80080a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80080a6:	e016      	b.n	80080d6 <UART_SetConfig+0xf76>
 80080a8:	2301      	movs	r3, #1
 80080aa:	e014      	b.n	80080d6 <UART_SetConfig+0xf76>
 80080ac:	2380      	movs	r3, #128	; 0x80
 80080ae:	e012      	b.n	80080d6 <UART_SetConfig+0xf76>
 80080b0:	2340      	movs	r3, #64	; 0x40
 80080b2:	e010      	b.n	80080d6 <UART_SetConfig+0xf76>
 80080b4:	2320      	movs	r3, #32
 80080b6:	e00e      	b.n	80080d6 <UART_SetConfig+0xf76>
 80080b8:	2310      	movs	r3, #16
 80080ba:	e00c      	b.n	80080d6 <UART_SetConfig+0xf76>
 80080bc:	230c      	movs	r3, #12
 80080be:	e00a      	b.n	80080d6 <UART_SetConfig+0xf76>
 80080c0:	230a      	movs	r3, #10
 80080c2:	e008      	b.n	80080d6 <UART_SetConfig+0xf76>
 80080c4:	2308      	movs	r3, #8
 80080c6:	e006      	b.n	80080d6 <UART_SetConfig+0xf76>
 80080c8:	2306      	movs	r3, #6
 80080ca:	e004      	b.n	80080d6 <UART_SetConfig+0xf76>
 80080cc:	2304      	movs	r3, #4
 80080ce:	e002      	b.n	80080d6 <UART_SetConfig+0xf76>
 80080d0:	2302      	movs	r3, #2
 80080d2:	e000      	b.n	80080d6 <UART_SetConfig+0xf76>
 80080d4:	2301      	movs	r3, #1
 80080d6:	693a      	ldr	r2, [r7, #16]
 80080d8:	fbb2 f2f3 	udiv	r2, r2, r3
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	685b      	ldr	r3, [r3, #4]
 80080e0:	085b      	lsrs	r3, r3, #1
 80080e2:	441a      	add	r2, r3
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	685b      	ldr	r3, [r3, #4]
 80080e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80080ec:	b29b      	uxth	r3, r3
 80080ee:	61fb      	str	r3, [r7, #28]
        break;
 80080f0:	e062      	b.n	80081b8 <UART_SetConfig+0x1058>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d04e      	beq.n	8008198 <UART_SetConfig+0x1038>
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080fe:	2b01      	cmp	r3, #1
 8008100:	d047      	beq.n	8008192 <UART_SetConfig+0x1032>
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008106:	2b02      	cmp	r3, #2
 8008108:	d040      	beq.n	800818c <UART_SetConfig+0x102c>
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800810e:	2b03      	cmp	r3, #3
 8008110:	d039      	beq.n	8008186 <UART_SetConfig+0x1026>
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008116:	2b04      	cmp	r3, #4
 8008118:	d032      	beq.n	8008180 <UART_SetConfig+0x1020>
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800811e:	2b05      	cmp	r3, #5
 8008120:	d02b      	beq.n	800817a <UART_SetConfig+0x101a>
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008126:	2b06      	cmp	r3, #6
 8008128:	d024      	beq.n	8008174 <UART_SetConfig+0x1014>
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800812e:	2b07      	cmp	r3, #7
 8008130:	d01d      	beq.n	800816e <UART_SetConfig+0x100e>
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008136:	2b08      	cmp	r3, #8
 8008138:	d016      	beq.n	8008168 <UART_SetConfig+0x1008>
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800813e:	2b09      	cmp	r3, #9
 8008140:	d00f      	beq.n	8008162 <UART_SetConfig+0x1002>
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008146:	2b0a      	cmp	r3, #10
 8008148:	d008      	beq.n	800815c <UART_SetConfig+0xffc>
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800814e:	2b0b      	cmp	r3, #11
 8008150:	d101      	bne.n	8008156 <UART_SetConfig+0xff6>
 8008152:	2380      	movs	r3, #128	; 0x80
 8008154:	e022      	b.n	800819c <UART_SetConfig+0x103c>
 8008156:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800815a:	e01f      	b.n	800819c <UART_SetConfig+0x103c>
 800815c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008160:	e01c      	b.n	800819c <UART_SetConfig+0x103c>
 8008162:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008166:	e019      	b.n	800819c <UART_SetConfig+0x103c>
 8008168:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800816c:	e016      	b.n	800819c <UART_SetConfig+0x103c>
 800816e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008172:	e013      	b.n	800819c <UART_SetConfig+0x103c>
 8008174:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8008178:	e010      	b.n	800819c <UART_SetConfig+0x103c>
 800817a:	f640 43cc 	movw	r3, #3276	; 0xccc
 800817e:	e00d      	b.n	800819c <UART_SetConfig+0x103c>
 8008180:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008184:	e00a      	b.n	800819c <UART_SetConfig+0x103c>
 8008186:	f241 5355 	movw	r3, #5461	; 0x1555
 800818a:	e007      	b.n	800819c <UART_SetConfig+0x103c>
 800818c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008190:	e004      	b.n	800819c <UART_SetConfig+0x103c>
 8008192:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008196:	e001      	b.n	800819c <UART_SetConfig+0x103c>
 8008198:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800819c:	687a      	ldr	r2, [r7, #4]
 800819e:	6852      	ldr	r2, [r2, #4]
 80081a0:	0852      	lsrs	r2, r2, #1
 80081a2:	441a      	add	r2, r3
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	685b      	ldr	r3, [r3, #4]
 80081a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80081ac:	b29b      	uxth	r3, r3
 80081ae:	61fb      	str	r3, [r7, #28]
        break;
 80081b0:	e002      	b.n	80081b8 <UART_SetConfig+0x1058>
      default:
        ret = HAL_ERROR;
 80081b2:	2301      	movs	r3, #1
 80081b4:	76fb      	strb	r3, [r7, #27]
        break;
 80081b6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80081b8:	69fb      	ldr	r3, [r7, #28]
 80081ba:	2b0f      	cmp	r3, #15
 80081bc:	d908      	bls.n	80081d0 <UART_SetConfig+0x1070>
 80081be:	69fb      	ldr	r3, [r7, #28]
 80081c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80081c4:	d204      	bcs.n	80081d0 <UART_SetConfig+0x1070>
    {
      huart->Instance->BRR = usartdiv;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	69fa      	ldr	r2, [r7, #28]
 80081cc:	60da      	str	r2, [r3, #12]
 80081ce:	e001      	b.n	80081d4 <UART_SetConfig+0x1074>
    }
    else
    {
      ret = HAL_ERROR;
 80081d0:	2301      	movs	r3, #1
 80081d2:	76fb      	strb	r3, [r7, #27]
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	2201      	movs	r2, #1
 80081d8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2201      	movs	r2, #1
 80081e0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	2200      	movs	r2, #0
 80081e8:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	2200      	movs	r2, #0
 80081ee:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 80081f0:	7efb      	ldrb	r3, [r7, #27]
}
 80081f2:	4618      	mov	r0, r3
 80081f4:	3728      	adds	r7, #40	; 0x28
 80081f6:	46bd      	mov	sp, r7
 80081f8:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80081fc:	00f42400 	.word	0x00f42400
 8008200:	0001e848 	.word	0x0001e848
 8008204:	0003d090 	.word	0x0003d090
 8008208:	0007a120 	.word	0x0007a120
 800820c:	000f4240 	.word	0x000f4240
 8008210:	00145855 	.word	0x00145855
 8008214:	00186a00 	.word	0x00186a00
 8008218:	001e8480 	.word	0x001e8480
 800821c:	0028b0aa 	.word	0x0028b0aa
 8008220:	003d0900 	.word	0x003d0900
 8008224:	007a1200 	.word	0x007a1200

08008228 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008228:	b480      	push	{r7}
 800822a:	b083      	sub	sp, #12
 800822c:	af00      	add	r7, sp, #0
 800822e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008234:	f003 0301 	and.w	r3, r3, #1
 8008238:	2b00      	cmp	r3, #0
 800823a:	d00a      	beq.n	8008252 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	685b      	ldr	r3, [r3, #4]
 8008242:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	430a      	orrs	r2, r1
 8008250:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008256:	f003 0302 	and.w	r3, r3, #2
 800825a:	2b00      	cmp	r3, #0
 800825c:	d00a      	beq.n	8008274 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	685b      	ldr	r3, [r3, #4]
 8008264:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	430a      	orrs	r2, r1
 8008272:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008278:	f003 0304 	and.w	r3, r3, #4
 800827c:	2b00      	cmp	r3, #0
 800827e:	d00a      	beq.n	8008296 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	685b      	ldr	r3, [r3, #4]
 8008286:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	430a      	orrs	r2, r1
 8008294:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800829a:	f003 0308 	and.w	r3, r3, #8
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d00a      	beq.n	80082b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	685b      	ldr	r3, [r3, #4]
 80082a8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	430a      	orrs	r2, r1
 80082b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082bc:	f003 0310 	and.w	r3, r3, #16
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d00a      	beq.n	80082da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	689b      	ldr	r3, [r3, #8]
 80082ca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	430a      	orrs	r2, r1
 80082d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082de:	f003 0320 	and.w	r3, r3, #32
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d00a      	beq.n	80082fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	689b      	ldr	r3, [r3, #8]
 80082ec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	430a      	orrs	r2, r1
 80082fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008300:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008304:	2b00      	cmp	r3, #0
 8008306:	d01a      	beq.n	800833e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	685b      	ldr	r3, [r3, #4]
 800830e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	430a      	orrs	r2, r1
 800831c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008322:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008326:	d10a      	bne.n	800833e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	685b      	ldr	r3, [r3, #4]
 800832e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	430a      	orrs	r2, r1
 800833c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008342:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008346:	2b00      	cmp	r3, #0
 8008348:	d00a      	beq.n	8008360 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	685b      	ldr	r3, [r3, #4]
 8008350:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	430a      	orrs	r2, r1
 800835e:	605a      	str	r2, [r3, #4]
  }
}
 8008360:	bf00      	nop
 8008362:	370c      	adds	r7, #12
 8008364:	46bd      	mov	sp, r7
 8008366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836a:	4770      	bx	lr

0800836c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800836c:	b580      	push	{r7, lr}
 800836e:	b086      	sub	sp, #24
 8008370:	af02      	add	r7, sp, #8
 8008372:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	2200      	movs	r2, #0
 8008378:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800837c:	f7fc faf4 	bl	8004968 <HAL_GetTick>
 8008380:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	f003 0308 	and.w	r3, r3, #8
 800838c:	2b08      	cmp	r3, #8
 800838e:	d10e      	bne.n	80083ae <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008390:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008394:	9300      	str	r3, [sp, #0]
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	2200      	movs	r2, #0
 800839a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800839e:	6878      	ldr	r0, [r7, #4]
 80083a0:	f000 f82c 	bl	80083fc <UART_WaitOnFlagUntilTimeout>
 80083a4:	4603      	mov	r3, r0
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d001      	beq.n	80083ae <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80083aa:	2303      	movs	r3, #3
 80083ac:	e022      	b.n	80083f4 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	f003 0304 	and.w	r3, r3, #4
 80083b8:	2b04      	cmp	r3, #4
 80083ba:	d10e      	bne.n	80083da <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80083bc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80083c0:	9300      	str	r3, [sp, #0]
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	2200      	movs	r2, #0
 80083c6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80083ca:	6878      	ldr	r0, [r7, #4]
 80083cc:	f000 f816 	bl	80083fc <UART_WaitOnFlagUntilTimeout>
 80083d0:	4603      	mov	r3, r0
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d001      	beq.n	80083da <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80083d6:	2303      	movs	r3, #3
 80083d8:	e00c      	b.n	80083f4 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	2220      	movs	r2, #32
 80083de:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	2220      	movs	r2, #32
 80083e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	2200      	movs	r2, #0
 80083ee:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80083f2:	2300      	movs	r3, #0
}
 80083f4:	4618      	mov	r0, r3
 80083f6:	3710      	adds	r7, #16
 80083f8:	46bd      	mov	sp, r7
 80083fa:	bd80      	pop	{r7, pc}

080083fc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80083fc:	b580      	push	{r7, lr}
 80083fe:	b084      	sub	sp, #16
 8008400:	af00      	add	r7, sp, #0
 8008402:	60f8      	str	r0, [r7, #12]
 8008404:	60b9      	str	r1, [r7, #8]
 8008406:	603b      	str	r3, [r7, #0]
 8008408:	4613      	mov	r3, r2
 800840a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800840c:	e062      	b.n	80084d4 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800840e:	69bb      	ldr	r3, [r7, #24]
 8008410:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008414:	d05e      	beq.n	80084d4 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008416:	f7fc faa7 	bl	8004968 <HAL_GetTick>
 800841a:	4602      	mov	r2, r0
 800841c:	683b      	ldr	r3, [r7, #0]
 800841e:	1ad3      	subs	r3, r2, r3
 8008420:	69ba      	ldr	r2, [r7, #24]
 8008422:	429a      	cmp	r2, r3
 8008424:	d302      	bcc.n	800842c <UART_WaitOnFlagUntilTimeout+0x30>
 8008426:	69bb      	ldr	r3, [r7, #24]
 8008428:	2b00      	cmp	r3, #0
 800842a:	d11d      	bne.n	8008468 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	681a      	ldr	r2, [r3, #0]
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800843a:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	689a      	ldr	r2, [r3, #8]
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	f022 0201 	bic.w	r2, r2, #1
 800844a:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	2220      	movs	r2, #32
 8008450:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	2220      	movs	r2, #32
 8008458:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	2200      	movs	r2, #0
 8008460:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8008464:	2303      	movs	r3, #3
 8008466:	e045      	b.n	80084f4 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	f003 0304 	and.w	r3, r3, #4
 8008472:	2b00      	cmp	r3, #0
 8008474:	d02e      	beq.n	80084d4 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	69db      	ldr	r3, [r3, #28]
 800847c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008480:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008484:	d126      	bne.n	80084d4 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800848e:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	681a      	ldr	r2, [r3, #0]
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800849e:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	689a      	ldr	r2, [r3, #8]
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	f022 0201 	bic.w	r2, r2, #1
 80084ae:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	2220      	movs	r2, #32
 80084b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	2220      	movs	r2, #32
 80084bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	2220      	movs	r2, #32
 80084c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	2200      	movs	r2, #0
 80084cc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
          
          return HAL_TIMEOUT;
 80084d0:	2303      	movs	r3, #3
 80084d2:	e00f      	b.n	80084f4 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	69da      	ldr	r2, [r3, #28]
 80084da:	68bb      	ldr	r3, [r7, #8]
 80084dc:	4013      	ands	r3, r2
 80084de:	68ba      	ldr	r2, [r7, #8]
 80084e0:	429a      	cmp	r2, r3
 80084e2:	bf0c      	ite	eq
 80084e4:	2301      	moveq	r3, #1
 80084e6:	2300      	movne	r3, #0
 80084e8:	b2db      	uxtb	r3, r3
 80084ea:	461a      	mov	r2, r3
 80084ec:	79fb      	ldrb	r3, [r7, #7]
 80084ee:	429a      	cmp	r2, r3
 80084f0:	d08d      	beq.n	800840e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80084f2:	2300      	movs	r3, #0
}
 80084f4:	4618      	mov	r0, r3
 80084f6:	3710      	adds	r7, #16
 80084f8:	46bd      	mov	sp, r7
 80084fa:	bd80      	pop	{r7, pc}

080084fc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80084fc:	b480      	push	{r7}
 80084fe:	b085      	sub	sp, #20
 8008500:	af00      	add	r7, sp, #0
 8008502:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800850a:	2b01      	cmp	r3, #1
 800850c:	d101      	bne.n	8008512 <HAL_UARTEx_DisableFifoMode+0x16>
 800850e:	2302      	movs	r3, #2
 8008510:	e027      	b.n	8008562 <HAL_UARTEx_DisableFifoMode+0x66>
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	2201      	movs	r2, #1
 8008516:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	2224      	movs	r2, #36	; 0x24
 800851e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	681a      	ldr	r2, [r3, #0]
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	f022 0201 	bic.w	r2, r2, #1
 8008538:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008540:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	2200      	movs	r2, #0
 8008546:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	68fa      	ldr	r2, [r7, #12]
 800854e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	2220      	movs	r2, #32
 8008554:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	2200      	movs	r2, #0
 800855c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8008560:	2300      	movs	r3, #0
}
 8008562:	4618      	mov	r0, r3
 8008564:	3714      	adds	r7, #20
 8008566:	46bd      	mov	sp, r7
 8008568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800856c:	4770      	bx	lr

0800856e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800856e:	b580      	push	{r7, lr}
 8008570:	b084      	sub	sp, #16
 8008572:	af00      	add	r7, sp, #0
 8008574:	6078      	str	r0, [r7, #4]
 8008576:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800857e:	2b01      	cmp	r3, #1
 8008580:	d101      	bne.n	8008586 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008582:	2302      	movs	r3, #2
 8008584:	e02d      	b.n	80085e2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	2201      	movs	r2, #1
 800858a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	2224      	movs	r2, #36	; 0x24
 8008592:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	681a      	ldr	r2, [r3, #0]
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	f022 0201 	bic.w	r2, r2, #1
 80085ac:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	689b      	ldr	r3, [r3, #8]
 80085b4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	683a      	ldr	r2, [r7, #0]
 80085be:	430a      	orrs	r2, r1
 80085c0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80085c2:	6878      	ldr	r0, [r7, #4]
 80085c4:	f000 f850 	bl	8008668 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	68fa      	ldr	r2, [r7, #12]
 80085ce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	2220      	movs	r2, #32
 80085d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	2200      	movs	r2, #0
 80085dc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80085e0:	2300      	movs	r3, #0
}
 80085e2:	4618      	mov	r0, r3
 80085e4:	3710      	adds	r7, #16
 80085e6:	46bd      	mov	sp, r7
 80085e8:	bd80      	pop	{r7, pc}

080085ea <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80085ea:	b580      	push	{r7, lr}
 80085ec:	b084      	sub	sp, #16
 80085ee:	af00      	add	r7, sp, #0
 80085f0:	6078      	str	r0, [r7, #4]
 80085f2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80085fa:	2b01      	cmp	r3, #1
 80085fc:	d101      	bne.n	8008602 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80085fe:	2302      	movs	r3, #2
 8008600:	e02d      	b.n	800865e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	2201      	movs	r2, #1
 8008606:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	2224      	movs	r2, #36	; 0x24
 800860e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	681a      	ldr	r2, [r3, #0]
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	f022 0201 	bic.w	r2, r2, #1
 8008628:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	689b      	ldr	r3, [r3, #8]
 8008630:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	683a      	ldr	r2, [r7, #0]
 800863a:	430a      	orrs	r2, r1
 800863c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800863e:	6878      	ldr	r0, [r7, #4]
 8008640:	f000 f812 	bl	8008668 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	68fa      	ldr	r2, [r7, #12]
 800864a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	2220      	movs	r2, #32
 8008650:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	2200      	movs	r2, #0
 8008658:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800865c:	2300      	movs	r3, #0
}
 800865e:	4618      	mov	r0, r3
 8008660:	3710      	adds	r7, #16
 8008662:	46bd      	mov	sp, r7
 8008664:	bd80      	pop	{r7, pc}
	...

08008668 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008668:	b480      	push	{r7}
 800866a:	b089      	sub	sp, #36	; 0x24
 800866c:	af00      	add	r7, sp, #0
 800866e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8008670:	4a2f      	ldr	r2, [pc, #188]	; (8008730 <UARTEx_SetNbDataToProcess+0xc8>)
 8008672:	f107 0314 	add.w	r3, r7, #20
 8008676:	e892 0003 	ldmia.w	r2, {r0, r1}
 800867a:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800867e:	4a2d      	ldr	r2, [pc, #180]	; (8008734 <UARTEx_SetNbDataToProcess+0xcc>)
 8008680:	f107 030c 	add.w	r3, r7, #12
 8008684:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008688:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008690:	2b00      	cmp	r3, #0
 8008692:	d108      	bne.n	80086a6 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	2201      	movs	r2, #1
 8008698:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	2201      	movs	r2, #1
 80086a0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80086a4:	e03d      	b.n	8008722 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80086a6:	2308      	movs	r3, #8
 80086a8:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80086aa:	2308      	movs	r3, #8
 80086ac:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	689b      	ldr	r3, [r3, #8]
 80086b4:	0e5b      	lsrs	r3, r3, #25
 80086b6:	b2db      	uxtb	r3, r3
 80086b8:	f003 0307 	and.w	r3, r3, #7
 80086bc:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	689b      	ldr	r3, [r3, #8]
 80086c4:	0f5b      	lsrs	r3, r3, #29
 80086c6:	b2db      	uxtb	r3, r3
 80086c8:	f003 0307 	and.w	r3, r3, #7
 80086cc:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 80086ce:	7fbb      	ldrb	r3, [r7, #30]
 80086d0:	7f3a      	ldrb	r2, [r7, #28]
 80086d2:	f107 0120 	add.w	r1, r7, #32
 80086d6:	440a      	add	r2, r1
 80086d8:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80086dc:	fb02 f303 	mul.w	r3, r2, r3
 80086e0:	7f3a      	ldrb	r2, [r7, #28]
 80086e2:	f107 0120 	add.w	r1, r7, #32
 80086e6:	440a      	add	r2, r1
 80086e8:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80086ec:	fb93 f3f2 	sdiv	r3, r3, r2
 80086f0:	b29a      	uxth	r2, r3
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 80086f8:	7ffb      	ldrb	r3, [r7, #31]
 80086fa:	7f7a      	ldrb	r2, [r7, #29]
 80086fc:	f107 0120 	add.w	r1, r7, #32
 8008700:	440a      	add	r2, r1
 8008702:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8008706:	fb02 f303 	mul.w	r3, r2, r3
 800870a:	7f7a      	ldrb	r2, [r7, #29]
 800870c:	f107 0120 	add.w	r1, r7, #32
 8008710:	440a      	add	r2, r1
 8008712:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8008716:	fb93 f3f2 	sdiv	r3, r3, r2
 800871a:	b29a      	uxth	r2, r3
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008722:	bf00      	nop
 8008724:	3724      	adds	r7, #36	; 0x24
 8008726:	46bd      	mov	sp, r7
 8008728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872c:	4770      	bx	lr
 800872e:	bf00      	nop
 8008730:	08008888 	.word	0x08008888
 8008734:	08008890 	.word	0x08008890

08008738 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8008738:	b480      	push	{r7}
 800873a:	b085      	sub	sp, #20
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008740:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8008744:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800874c:	b29a      	uxth	r2, r3
 800874e:	89fb      	ldrh	r3, [r7, #14]
 8008750:	4313      	orrs	r3, r2
 8008752:	b29a      	uxth	r2, r3
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800875a:	2300      	movs	r3, #0
}
 800875c:	4618      	mov	r0, r3
 800875e:	3714      	adds	r7, #20
 8008760:	46bd      	mov	sp, r7
 8008762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008766:	4770      	bx	lr

08008768 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8008768:	b480      	push	{r7}
 800876a:	b085      	sub	sp, #20
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008770:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8008774:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800877c:	b29b      	uxth	r3, r3
 800877e:	b21a      	sxth	r2, r3
 8008780:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8008784:	43db      	mvns	r3, r3
 8008786:	b21b      	sxth	r3, r3
 8008788:	4013      	ands	r3, r2
 800878a:	b21b      	sxth	r3, r3
 800878c:	b29a      	uxth	r2, r3
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008794:	2300      	movs	r3, #0
}
 8008796:	4618      	mov	r0, r3
 8008798:	3714      	adds	r7, #20
 800879a:	46bd      	mov	sp, r7
 800879c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a0:	4770      	bx	lr

080087a2 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80087a2:	b084      	sub	sp, #16
 80087a4:	b580      	push	{r7, lr}
 80087a6:	b082      	sub	sp, #8
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	6078      	str	r0, [r7, #4]
 80087ac:	f107 0014 	add.w	r0, r7, #20
 80087b0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	2201      	movs	r2, #1
 80087b8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	2200      	movs	r2, #0
 80087c0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	2200      	movs	r2, #0
 80087c8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	2200      	movs	r2, #0
 80087d0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 80087d4:	6878      	ldr	r0, [r7, #4]
 80087d6:	f7ff ffaf 	bl	8008738 <USB_EnableGlobalInt>

  return HAL_OK;
 80087da:	2300      	movs	r3, #0
}
 80087dc:	4618      	mov	r0, r3
 80087de:	3708      	adds	r7, #8
 80087e0:	46bd      	mov	sp, r7
 80087e2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80087e6:	b004      	add	sp, #16
 80087e8:	4770      	bx	lr
	...

080087ec <__libc_init_array>:
 80087ec:	b570      	push	{r4, r5, r6, lr}
 80087ee:	4e0d      	ldr	r6, [pc, #52]	; (8008824 <__libc_init_array+0x38>)
 80087f0:	4c0d      	ldr	r4, [pc, #52]	; (8008828 <__libc_init_array+0x3c>)
 80087f2:	1ba4      	subs	r4, r4, r6
 80087f4:	10a4      	asrs	r4, r4, #2
 80087f6:	2500      	movs	r5, #0
 80087f8:	42a5      	cmp	r5, r4
 80087fa:	d109      	bne.n	8008810 <__libc_init_array+0x24>
 80087fc:	4e0b      	ldr	r6, [pc, #44]	; (800882c <__libc_init_array+0x40>)
 80087fe:	4c0c      	ldr	r4, [pc, #48]	; (8008830 <__libc_init_array+0x44>)
 8008800:	f000 f820 	bl	8008844 <_init>
 8008804:	1ba4      	subs	r4, r4, r6
 8008806:	10a4      	asrs	r4, r4, #2
 8008808:	2500      	movs	r5, #0
 800880a:	42a5      	cmp	r5, r4
 800880c:	d105      	bne.n	800881a <__libc_init_array+0x2e>
 800880e:	bd70      	pop	{r4, r5, r6, pc}
 8008810:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008814:	4798      	blx	r3
 8008816:	3501      	adds	r5, #1
 8008818:	e7ee      	b.n	80087f8 <__libc_init_array+0xc>
 800881a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800881e:	4798      	blx	r3
 8008820:	3501      	adds	r5, #1
 8008822:	e7f2      	b.n	800880a <__libc_init_array+0x1e>
 8008824:	08008940 	.word	0x08008940
 8008828:	08008940 	.word	0x08008940
 800882c:	08008940 	.word	0x08008940
 8008830:	08008944 	.word	0x08008944

08008834 <memset>:
 8008834:	4402      	add	r2, r0
 8008836:	4603      	mov	r3, r0
 8008838:	4293      	cmp	r3, r2
 800883a:	d100      	bne.n	800883e <memset+0xa>
 800883c:	4770      	bx	lr
 800883e:	f803 1b01 	strb.w	r1, [r3], #1
 8008842:	e7f9      	b.n	8008838 <memset+0x4>

08008844 <_init>:
 8008844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008846:	bf00      	nop
 8008848:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800884a:	bc08      	pop	{r3}
 800884c:	469e      	mov	lr, r3
 800884e:	4770      	bx	lr

08008850 <_fini>:
 8008850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008852:	bf00      	nop
 8008854:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008856:	bc08      	pop	{r3}
 8008858:	469e      	mov	lr, r3
 800885a:	4770      	bx	lr
